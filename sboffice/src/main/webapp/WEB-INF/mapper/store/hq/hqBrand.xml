<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.solbipos.store.persistence.hq.hqbrand.HqBrandMapper">

  <select id="list" parameterType="DefaultMap" resultType="DefaultMap">
    /* HqBrandMapper.list */
    <![CDATA[
    SELECT COUNT(1) OVER (PARTITION BY 1 ORDER BY 1) TOT_CNT,
           ROW_NUMBER() OVER(PARTITION BY 1 ORDER BY 1) RNUM,
           A.HQ_OFFICE_CD,
           B.HQ_OFFICE_NM,
           A.HQ_BRAND_CD,
           A.HQ_BRAND_NM,
           A.USE_YN
      FROM TB_HQ_BRAND A,
           TB_HQ_OFFICE B
     WHERE B.HQ_OFFICE_CD = A.HQ_OFFICE_CD
    ]]>
    <if test='hqOfficeCd != null and hqOfficeCd != ""'>
       AND A.HQ_OFFICE_CD LIKE '%'||#{hqOfficeCd}||'%'
    </if>
    <if test='hqOfficeNm != null and hqOfficeNm != ""'>
       AND B.HQ_OFFICE_NM LIKE '%'||#{hqOfficeNm}||'%'
    </if>
    <if test='hqBrandCd != null and hqBrandCd != ""'>
       AND A.HQ_BRAND_CD LIKE '%'||#{hqBrandCd}||'%'
    </if>
    <if test='hqBrandNm != null and hqBrandNm != ""'>
       AND A.HQ_BRAND_NM LIKE '%'||#{hqBrandNm}||'%'
    </if>
    <if test='useYn != null and useYn.toString() != "ALL"'>
       AND A.USE_YN = #{useYn}
    </if>
     ORDER BY A.REG_DT, A.HQ_OFFICE_CD, A.HQ_BRAND_CD ASC
  </select>

  <select id="getHqBrandCd" parameterType="hqBrandVO" resultType="String">
    /* HqBrandMapper.getHqBrandCd */
    SELECT CONCAT(#{hqOfficeCd}, LPAD(SUBSTR(NVL(MAX(HQ_BRAND_CD), '0000000'), 6, 2) +1, 2, '0')) 
      FROM TB_HQ_BRAND
     WHERE HQ_OFFICE_CD = #{hqOfficeCd}
  </select>

  <insert id="insertBrand" parameterType="DefaultMap">
    /* HqBrandMapper.insertBrand */
      INSERT INTO TB_HQ_BRAND 
    (
      HQ_BRAND_CD,
      HQ_BRAND_NM,
      HQ_OFFICE_CD,
      USE_YN,
      REG_DT,
      REG_ID,
      MOD_DT,
      MOD_ID
    )
    VALUES
    (
       #{hqBrandCd},
       #{hqBrandNm},
       #{hqOfficeCd},
       #{useYn},
       #{regDt},
       #{regId},
       #{modDt},
       #{modId}
    )
  </insert>

  <update id="updateBrand" parameterType="hqBrandVO">
    /* HqBrandMapper.updateBrand */
    UPDATE TB_HQ_BRAND
       SET USE_YN = #{useYn}
     WHERE HQ_BRAND_CD = #{hqBrandCd}
       AND HQ_OFFICE_CD = #{hqOfficeCd}
  </update>

  <delete id="deleteBrand" parameterType="hqBrandVO">
    /* HqBrandMapper.deleteBrand */
    DELETE TB_HQ_BRAND
     WHERE HQ_BRAND_CD = #{hqBrandCd}
       AND HQ_OFFICE_CD = #{hqOfficeCd}
  </delete>
  
  <select id="getConfigList" parameterType="hqBrandVO" resultType="DefaultMap">
    /* HqBrandMapper.getConfigList */
    SELECT A.ENVST_GRP_CD,
           C.NMCODE_NM,
           A.ENVST_CD,
           A.ENVST_NM,
           A.DIRCT_IN_YN,
           A.REMARK,
           A.ENVST_VAL_CD,
           A.ENVST_VAL_NM,
           A.DEFLT_YN,
           A.TARGT_FG,
           DECODE(B.ENVST_CD, NULL, 'N', 'Y') EXIST_FG,
           B.ENVST_VAL
      FROM (
      SELECT AA.ENVST_GRP_CD,
             AA.ENVST_CD,
             AA.ENVST_NM,
             AA.ENVST_FG,
             AA.TARGT_FG,
             AA.DIRCT_IN_YN,
             AA.REMARK,
             BB.ENVST_VAL_CD,
             BB.ENVST_VAL_NM,
             BB.DEFLT_YN
        FROM TB_CM_ENVST AA,
             TB_CM_ENVST_DTL BB
       WHERE AA.TARGT_FG IN ('H','X','C')
         AND AA.USE_YN = 'Y'
         AND BB.ENVST_CD (+)= AA.ENVST_CD
         ) A,
           TB_HQ_ENVST B,
           TB_CM_NMCODE C,
         (
      SELECT A.HQ_BRAND_CD, B.HQ_OFFICE_CD, B.CLS_FG
        FROM TB_HQ_BRAND A,
             TB_HQ_OFFICE B
       WHERE B.HQ_OFFICE_CD = A.HQ_OFFICE_CD
         ) D
     WHERE B.HQ_BRAND_CD (+)= #{hqBrandCd}
       AND B.ENVST_CD (+)= A.ENVST_CD
       AND C.NMCODE_GRP_CD = '048'
       AND C.NMCODE_CD = A.ENVST_GRP_CD
       AND D.HQ_BRAND_CD (+)= B.HQ_BRAND_CD
     ORDER BY A.ENVST_GRP_CD, A.ENVST_CD, A.ENVST_VAL_CD
  </select>


  <insert id="insertConfig" parameterType="DefaultMap">
    /* HqBrandMapper.insertConfig */
    INSERT INTO TB_HQ_ENVST
    (
      HQ_BRAND_CD,
      ENVST_CD,
      ENVST_VAL,
      DIRCT_IN_YN,
      USE_YN,
      REG_DT,
      REG_ID,
      MOD_DT,
      MOD_ID 
    )
    VALUES
    (
      #{hqBrandCd},
      #{envstCd},
      #{envstVal},
      #{dirctInYn},
      #{useYn},
      #{regDt},
      #{regId},
      #{modDt},
      #{modId}
    )
  </insert>

  <update id="updateConfig" parameterType="DefaultMap">
    /* HqBrandMapper.updateConfig */
    UPDATE TB_HQ_ENVST
       SET ENVST_VAL = #{envstVal},
           MOD_DT = #{modDt},
           MOD_ID = #{modId}
     WHERE HQ_BRAND_CD = #{hqBrandCd}
       AND ENVST_CD = #{envstCd}
  </update>

  <update id="updateConfigStore" parameterType="DefaultMap">
    /* HqBrandMapper.updateConfigStore */
    UPDATE TB_MS_STORE_ENVST
       SET ENVST_VAL = #{envstVal}
     WHERE STORE_CD IN (SELECT STORE_CD FROM TB_MS_STORE WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND HQ_BRAND_CD = #{hqBrandCd} )
       AND ENVST_CD = #{envstCd}
  </update>
  
  <select id="getClsList" parameterType="hqBrandVO" resultType="DefaultMap">
    /* HqBrandMapper.getClsList */
    SELECT HQ_BRAND_CD,
           PROD_CLASS_CD,
           PROD_CLASS_NM,
           P_PROD_CLASS_CD
      FROM TB_HQ_PRODUCT_CLASS
     WHERE HQ_BRAND_CD = #{hqBrandCd}
  </select>
  
  <select id="getClsCd" parameterType="hqClsVO" resultType="String">
    /* HqBrandMapper.getClsCd */
    SELECT LPAD( NVL(MAX(PROD_CLASS_CD), 0) + 1, 5, '0') PROD_CLASS_CD
      FROM TB_HQ_PRODUCT_CLASS
     WHERE HQ_BRAND_CD = #{hqBrandCd}
  </select>

  <select id="getPProdClsCd" parameterType="hqClsVO" resultType="String">
    /* HqBrandMapper.getPProdClsCd */
    SELECT MAX(PROD_CLASS_CD)
      FROM TB_HQ_PRODUCT_CLASS
     WHERE HQ_BRAND_CD = #{hqBrandCd}
  </select>

  <insert id="insertCls" parameterType="hqClsVO">
    /* HqBrandMapper.insertCls */
    INSERT INTO TB_HQ_PRODUCT_CLASS
    (
      HQ_BRAND_CD,
      PROD_CLASS_CD,
      PROD_CLASS_NM,
      P_PROD_CLASS_CD,
      REG_DT,
      REG_ID,
      MOD_DT,
      MOD_ID
    )
    VALUES
    (
      #{hqBrandCd},
      #{prodClassCd},
      #{prodClassNm},
      #{pProdClassCd},
      #{regDt},
      #{regId},
      #{modDt},
      #{modId}
    )
  </insert>

  <update id="updateCls" parameterType="hqClsVO">
    /* HqBrandMapper.updateCls */
    MERGE INTO TB_HQ_PRODUCT_CLASS A
    USING (
          SELECT #{hqBrandCd} HQ_BRAND_CD,
                 #{prodClassCd} PROD_CLASS_CD,
                 #{prodClassNm} PROD_CLASS_NM,
                 #{pProdClassCd} P_PROD_CLASS_CD,
                 #{regDt} REG_DT,
                 #{regId} REG_ID,
                 #{modDt} MOD_DT,
                 #{modId} MOD_ID
            FROM DUAL
          ) B
       ON 
        (
          B.HQ_BRAND_CD = A.HQ_BRAND_CD
      AND B.PROD_CLASS_CD = A.PROD_CLASS_CD
        )
     WHEN MATCHED THEN
          UPDATE SET
                 A.PROD_CLASS_NM = B.PROD_CLASS_NM,
                 A.MOD_DT = B.MOD_DT,
                 A.MOD_ID = B.MOD_ID
     WHEN NOT MATCHED THEN
          INSERT
          (
            A.HQ_BRAND_CD,
            A.PROD_CLASS_CD,
            A.PROD_CLASS_NM,
            A.P_PROD_CLASS_CD,
            A.REG_DT,
            A.REG_ID,
            A.MOD_DT,
            A.MOD_ID
          )
          VALUES
          (
            B.HQ_BRAND_CD,
            B.PROD_CLASS_CD,
            B.PROD_CLASS_NM,
            B.P_PROD_CLASS_CD,
            B.REG_DT,
            B.REG_ID,
            B.MOD_DT,
            B.MOD_ID
          )
  </update>

  <select id="chkProdCnt" parameterType="hqClsVO" resultType="Integer">
    /* HqBrandMapper.chkProdCnt */
    SELECT COUNT(1)
      FROM TB_HQ_PRODUCT
     WHERE HQ_BRAND_CD = #{hqBrandCd}
       AND PROD_CLASS_CD = #{prodClassCd}
  </select>

  <delete id="deleteCls">
    /* HqBrandMapper.deleteCls */
    DELETE TB_HQ_PRODUCT_CLASS
     WHERE HQ_BRAND_CD = #{hqBrandCd}
       AND PROD_CLASS_CD = #{prodClassCd}
  </delete>

</mapper>