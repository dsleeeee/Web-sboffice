<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.solbipos.iostock.orderReturn.rtnStoreOrder.service.impl.RtnStoreOrderMapper">

    <!-- 반품등록 HD 리스트 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : rtnStoreOrderVO
        COMMENTS : 반품등록 HD 리스트를 조회한다.
    -->
    <select id="getRtnStoreOrderList" parameterType="rtnStoreOrderVO" resultType="DefaultMap">
        /* USE : RtnStoreOrderMapper.getRtnStoreOrderList */
        <![CDATA[
        SELECT   tphso.REQ_DATE, tphso.STORE_CD
        ,        tphso.DTL_CNT, tphso.PROC_FG, tphso.REMARK
        ,        tphso.SLIP_FG, tphso.MOD_DT
        ,        tphso.ORDER_TOT_QTY*tphso.SLIP_FG AS ORDER_TOT_QTY
        ,        tphso.ORDER_AMT*tphso.SLIP_FG     AS ORDER_AMT
        ,        tphso.ORDER_VAT*tphso.SLIP_FG     AS ORDER_VAT
        ,        tphso.ORDER_TOT*tphso.SLIP_FG     AS ORDER_TOT
        ,        tphso.MD_TOT_QTY*tphso.SLIP_FG    AS MD_TOT_QTY
        ,        tphso.MD_AMT*tphso.SLIP_FG        AS MD_AMT
        ,        tphso.MD_VAT*tphso.SLIP_FG        AS MD_VAT
        ,        tphso.MD_TOT*tphso.SLIP_FG        AS MD_TOT
        FROM     TB_PO_HQ_STORE_ORDER tphso
        WHERE    tphso.STORE_CD   =   #{storeCd}
        ]]>
        <if test='dateFg == "req"'>
            AND tphso.REQ_DATE BETWEEN #{startDate} AND #{endDate}
        </if>
        <if test='dateFg == "reg"'>
            AND tphso.REG_DT BETWEEN #{startDate}||'000000' AND #{endDate}||'235959'
        </if>
        <if test='dateFg == "mod"'>
            AND tphso.MOD_DT BETWEEN #{startDate}||'000000' AND #{endDate}||'235959'
        </if>
        <if test='slipFg != null and slipFg != ""'>
            AND tphso.SLIP_FG = #{slipFg}
        </if>
        <if test='procFg != null and procFg != ""'>
            AND tphso.PROC_FG = #{procFg}
        </if>
        ORDER BY tphso.REQ_DATE DESC
    </select>

    <!-- 반품등록 DT 리스트 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL, TB_MS_PRODUCT, TB_HQ_ENVST
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 DT 리스트를 조회한다.
    -->
    <select id="getRtnStoreOrderDtlList" parameterType="rtnStoreOrderDtlVO" resultType="DefaultMap">
        /* USE : RtnStoreOrderMapper.getRtnStoreOrderDtlList */
        <![CDATA[
        SELECT  tphso.PROD_CD, tmp.PROD_NM, tphso.PO_UNIT_FG, tphso.PO_UNIT_QTY, tmp.PO_UNIT_ALLOW_FG
        ,       tphso.SLIP_FG, tphso.REMARK, tphso.ORDER_SPLY_UPRC, tmp.PO_MIN_QTY
        ,       TO_NUMBER(DECODE(tphso.ORDER_TOT_QTY , 0, NULL, tphso.ORDER_TOT_QTY *tphso.SLIP_FG)) AS PREV_ORDER_TOT_QTY
        ,       TO_NUMBER(DECODE(tphso.ORDER_UNIT_QTY, 0, NULL, tphso.ORDER_UNIT_QTY*tphso.SLIP_FG)) AS ORDER_UNIT_QTY
        ,       TO_NUMBER(DECODE(tphso.ORDER_ETC_QTY , 0, NULL, tphso.ORDER_ETC_QTY *tphso.SLIP_FG)) AS ORDER_ETC_QTY
        ,       TO_NUMBER(DECODE(tphso.ORDER_TOT_QTY , 0, NULL, tphso.ORDER_TOT_QTY *tphso.SLIP_FG)) AS ORDER_TOT_QTY
        ,       tphso.ORDER_AMT*tphso.SLIP_FG AS ORDER_AMT
        ,       tphso.ORDER_VAT*tphso.SLIP_FG AS ORDER_VAT
        ,       tphso.ORDER_TOT*tphso.SLIP_FG AS ORDER_TOT
        ,       tmp.VAT_FG AS VAT_FG01
        ,       the.ENVST_VAL AS ENVST0011
        FROM    TB_PO_HQ_STORE_ORDER_DTL tphso
        ,       TB_MS_PRODUCT tmp
        ,       TB_HQ_ENVST the
        WHERE   tphso.REQ_DATE      =   #{reqDate}
        AND     tphso.STORE_CD      =   #{storeCd}
        AND     tphso.SLIP_FG       =   #{slipFg}
        AND     tmp.STORE_CD        =   tphso.STORE_CD
        AND     tmp.PROD_CD         =   tphso.PROD_CD
        AND     the.HQ_OFFICE_CD    =   #{hqOfficeCd}
        AND     the.ENVST_CD        =   '0011'
        ORDER
        BY      tphso.PROD_CD
        ]]>
    </select>

    <!-- 반품등록 상품추가 리스트 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL, TB_MS_PRODUCT, TB_HQ_ENVST
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 상품추가 리스트를 조회한다.
    -->
    <select id="getRtnStoreOrderRegistList" parameterType="rtnStoreOrderDtlVO" resultType="DefaultMap">
        /* USE : RtnStoreOrderMapper.getRtnStoreOrderRegistList */
        <include refid="CmmSQL.PagingTemplateHeader"/>
        <![CDATA[
        SELECT  tmp.PROD_CD
        ,       tmp.PROD_NM
        ,       tmp.VAT_FG AS VAT_FG01
        ,       TRUNC(DECODE(SIGN(tshsc.CURR_QTY),-1,0,tshsc.CURR_QTY) / tmp.PO_UNIT_QTY) AS HD_CUR_UNIT_QTY
        ,       MOD  (DECODE(SIGN(tshsc.CURR_QTY),-1,0,tshsc.CURR_QTY) , tmp.PO_UNIT_QTY) AS HD_CUR_ETC_QTY
        ,       TRUNC(NVL(tsssc.CURR_QTY,0)                            / tmp.PO_UNIT_QTY) AS STORE_CUR_UNIT_QTY
        ,       MOD  (NVL(tsssc.CURR_QTY,0)                            , tmp.PO_UNIT_QTY) AS STORE_CUR_ETC_QTY
        ,		NVL((SELECT MAX(SALE_UPRC) KEEP(DENSE_RANK FIRST ORDER BY REG_DT DESC)
                              FROM TB_MS_PRODUCT_SALE_PRICE
                             WHERE STORE_CD = tmp.STORE_CD
                               AND PROD_CD = tmp.PROD_CD
                               AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN START_DATE AND END_DATE
                            ), 0) AS SALE_UPRC
        , 		tmp.SPLY_UPRC AS ORDER_SPLY_UPRC
        ,       tmp.PO_MIN_QTY
        ,       tmp.PO_UNIT_ALLOW_FG
        ,       tmp.PO_PROD_FG
        ,       tmp.USE_YN
        ,       tmp.PO_UNIT_FG
        ,       tmp.PO_UNIT_QTY
        ,       the.ENVST_VAL AS ENVST0011
        ,       tmp.SAFE_STOCK_QTY
        ,       TRUNC(DECODE(SIGN(tmp.SAFE_STOCK_QTY),-1,0,tmp.SAFE_STOCK_QTY) / tmp.PO_UNIT_QTY) AS SAFE_STOCK_UNIT_QTY
        ,       MOD  (DECODE(SIGN(tmp.SAFE_STOCK_QTY),-1,0,tmp.SAFE_STOCK_QTY) , tmp.PO_UNIT_QTY) AS SAFE_STOCK_ETC_QTY
        ,       TO_NUMBER(DECODE(tphso.ORDER_UNIT_QTY, 0, NULL, tphso.ORDER_UNIT_QTY*tphso.SLIP_FG)) AS PREV_ORDER_UNIT_QTY
        ,       TO_NUMBER(DECODE(tphso.ORDER_ETC_QTY,  0, NULL, tphso.ORDER_ETC_QTY*tphso.SLIP_FG )) AS PREV_ORDER_ETC_QTY
        ,       TO_NUMBER(DECODE(tphso.ORDER_TOT_QTY,  0, NULL, tphso.ORDER_TOT_QTY*tphso.SLIP_FG )) AS PREV_ORDER_TOT_QTY
        ,       TO_NUMBER(DECODE(tphso.ORDER_AMT    ,  0, NULL, tphso.ORDER_AMT*tphso.SLIP_FG     )) AS ORDER_AMT
        ,       TO_NUMBER(DECODE(tphso.ORDER_VAT    ,  0, NULL, tphso.ORDER_VAT*tphso.SLIP_FG     )) AS ORDER_VAT
        ,       TO_NUMBER(DECODE(tphso.ORDER_TOT    ,  0, NULL, tphso.ORDER_TOT*tphso.SLIP_FG     )) AS ORDER_TOT
        ]]>
        <if test='option2 != null and option2 != ""'>
            , optionTb.ORDER_UNIT_QTY, optionTb.ORDER_ETC_QTY, optionTb.ORDER_TOT_QTY
        </if>
        <include refid="CmmSQL.PagingTemplateCount"/>
        <![CDATA[
        FROM    TB_MS_PRODUCT tmp
        ,       TB_ST_STORE_STOCK_CUR tsssc
        ,       (   SELECT  PROD_CD, CURR_QTY
                    FROM    TB_ST_HQ_STOCK_CUR
                    WHERE   HQ_OFFICE_CD  =   #{hqOfficeCd}
                )   tshsc
        ,       TB_PO_HQ_STORE_ORDER_DTL tphso
        ,       TB_HQ_ENVST the
        ]]>
        <if test='option2 == "ORD"'>
            ,   (   SELECT  tphsod.PROD_CD
            ,       TRUNC(SUM(tphsod.ORDER_TOT_QTY) / tphsod.PO_UNIT_QTY) AS ORDER_UNIT_QTY
            ,       MOD  (SUM(tphsod.ORDER_TOT_QTY) , tphsod.PO_UNIT_QTY) AS ORDER_ETC_QTY
            ,       SUM(tphsod.ORDER_TOT_QTY) AS ORDER_TOT_QTY
            FROM    TB_PO_HQ_STORE_ORDER_DTL tphsod
            WHERE   tphsod.STORE_CD = #{storeCd}
            AND     tphsod.REQ_DATE BETWEEN #{startDate} AND #{endDate}
            GROUP
            BY      tphsod.PROD_CD, tphsod.PO_UNIT_QTY
            ) optionTb
        </if>
        <if test='option2 == "OUT"'>
            ,   (   SELECT  tphsod.PROD_CD
            ,       TRUNC(SUM(tphsod.ORDER_TOT_QTY) / tphsod.PO_UNIT_QTY) AS ORDER_UNIT_QTY
            ,       MOD  (SUM(tphsod.ORDER_TOT_QTY) , tphsod.PO_UNIT_QTY) AS ORDER_ETC_QTY
            ,       SUM(tphsod.ORDER_TOT_QTY) AS ORDER_TOT_QTY
            FROM    TB_PO_HQ_STORE_OUTSTOCK tphso
            ,       TB_PO_HQ_STORE_OUTSTOCK_DTL tphsod
            WHERE   tphso.STORE_CD = #{storeCd}
            AND     tphso.OUT_DATE      BETWEEN #{startDate} AND #{endDate}
            AND     tphso.PROC_FG       IN ('20', '30')
            AND     tphsod.HQ_OFFICE_CD = tphso.HQ_OFFICE_CD
            AND     tphsod.SLIP_NO      = tphso.SLIP_NO
            GROUP
            BY      tphsod.PROD_CD, tphsod.PO_UNIT_QTY
            ) optionTb
        </if>
        <if test='option2 == "SALE"'>
            ,   (   SELECT  tsdp.PROD_CD
            ,       TRUNC(SUM(tsdp.TOT_SALE_QTY) / tmp.PO_UNIT_QTY) AS ORDER_UNIT_QTY
            ,       MOD  (SUM(tsdp.TOT_SALE_QTY) , tmp.PO_UNIT_QTY) AS ORDER_ETC_QTY
            ,       SUM(tsdp.TOT_SALE_QTY) AS ORDER_TOT_QTY
            FROM    TB_SL_DAILY_PROD tsdp
            ,       TB_MS_PRODUCT tmp
            WHERE   tsdp.STORE_CD   = #{storeCd}
            AND     tsdp.SALE_DATE  BETWEEN #{startDate} AND #{endDate}
            AND     tmp.PROD_CD  = tsdp.PROD_CD
            GROUP
            BY      tsdp.PROD_CD, tmp.PO_UNIT_QTY
            ) optionTb
        </if>
        <![CDATA[
        WHERE   tmp.STORE_CD          =   #{storeCd}
        AND     tmp.USE_YN            =   'Y'
        AND     tsssc.STORE_CD    (+) =   tmp.STORE_CD
        AND     tsssc.PROD_CD     (+) =   tmp.PROD_CD
        AND     tshsc.PROD_CD     (+) =   tmp.PROD_CD
        AND     tphso.REQ_DATE    (+) =   #{reqDate}
        AND     tphso.STORE_CD    (+) =   tmp.STORE_CD
        AND     tphso.PROD_CD     (+) =   tmp.PROD_CD
        AND     tphso.SLIP_FG     (+) =   #{slipFg}
        AND     the.HQ_OFFICE_CD      =   #{hqOfficeCd}
        AND     the.ENVST_CD          =   '0011'
        ]]>
        <if test='prodCd != null and prodCd != ""'>
            AND tmp.PROD_CD = #{prodCd}
        </if>
        <if test='prodNm != null and prodNm != ""'>
            AND tmp.PROD_NM LIKE '%'||#{prodNm}||'%'
        </if>
        <if test="barcdCd != null and barcdCd != ''">
            AND tmp.PROD_CD IN  ( SELECT  tmpb.PROD_CD
                                  FROM    TB_MS_PRODUCT_BARCD tmpb
                                  WHERE   tmpb.STORE_CD  = #{storeCd}
                                  AND     tmpb.BARCD_CD  = #{barcdCd}
                                )
        </if>
        <if test="prodClassCd != null and prodClassCd != ''">
            AND tmp.PROD_CLASS_CD IN  ( SELECT  #{prodClassCd} AS PROD_CLASS_CD
                                        FROM    DUAL
                                        UNION
                                        SELECT  tmpc.PROD_CLASS_CD
                                        FROM    TB_MS_PRODUCT_CLASS tmpc
                                        WHERE   tmpc.STORE_CD = #{storeCd}
                                        START WITH  tmpc.P_PROD_CLASS_CD = #{prodClassCd}
                                        CONNECT BY  tmpc.P_PROD_CLASS_CD = PRIOR tmpc.PROD_CLASS_CD
                                      )
        </if>
        <if test='option1 == "S"'>
            <![CDATA[
            AND NVL(tsssc.CURR_QTY, 0) < NVL(tmp.SAFE_STOCK_QTY, 0)
            AND NVL(tmp.SAFE_STOCK_QTY,0) > 0
            ]]>
        </if>
        <if test='option2 != null and option2 != ""'>
            AND optionTb.PROD_CD  = tmp.PROD_CD
        </if>
        ORDER BY tmp.PROD_CD
        <include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <!-- 반품등록 요청일의 상품건수 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 요청일의 상품건수 조회한다.
    -->
    <select id="getDtlCnt" parameterType="rtnStoreOrderVO" resultType="Integer">
        /* USE : RtnStoreOrderMapper.getDtlCnt */
        <![CDATA[
        SELECT  COUNT(tphsod.PROD_CD) AS DTL_CNT
        FROM    TB_PO_HQ_STORE_ORDER_DTL tphsod
        WHERE   tphsod.REQ_DATE    = #{reqDate}
        AND     tphsod.STORE_CD    = #{storeCd}
        AND     tphsod.SLIP_FG     = #{slipFg}
        ]]>
    </select>

    <!-- 반품등록 요청일의 HD 내용이 존재하는지 여부 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 요청일의 HD 내용이 존재하는지 여부 조회한다.
    -->
    <select id="getHdExist" parameterType="rtnStoreOrderVO" resultType="String">
        /* USE : RtnStoreOrderMapper.getHdExist */
        <![CDATA[
        SELECT  DECODE(COUNT(*), 0, 'N', 'Y') AS IS_EXIST
        FROM    TB_PO_HQ_STORE_ORDER tphso
        WHERE   tphso.REQ_DATE    = #{reqDate}
        AND     tphso.STORE_CD    = #{storeCd}
        AND     tphso.SLIP_FG     = #{slipFg}
        ]]>
    </select>

    <!-- 반품등록 반품진행구분 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : rtnStoreOrderVO
        COMMENTS : 반품등록 반품진행구분을 조회한다.
    -->
    <select id="getOrderProcFgCheck" parameterType="rtnStoreOrderVO" resultType="DefaultMap">
        /* USE : RtnStoreOrderMapper.getOrderProcFgCheck */
        <![CDATA[
        SELECT  PROC_FG, REMARK
        FROM    TB_PO_HQ_STORE_ORDER tphso
        WHERE   tphso.REQ_DATE    = #{reqDate}
        AND     tphso.STORE_CD    = #{storeCd}
        AND     tphso.SLIP_FG     = #{slipFg}
        ]]>
    </select>

    <!-- 반품등록 출고요청가능일 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DAYS, TB_PO_HQ_STORE_ORDER_SPECIFIC, TB_PO_HQ_STORE_CLOSE
        PARAM    : rtnStoreOrderVO
        COMMENTS : 반품등록 출고요청가능일 조회한다.
    -->
    <select id="getReqDate" parameterType="rtnStoreOrderVO" resultType="String">
        /* USE : RtnStoreOrderMapper.getReqDate */
        <![CDATA[
        SELECT	*
        FROM	(	SELECT  A.DAY AS ORDER_DATE
                    FROM    (   SELECT  TO_CHAR(SYSDATE + LEVEL - 1,'YYYYMMDD') AS DAY
						        ,       TO_CHAR(SYSDATE + LEVEL - 1,'D')    	AS WEEK
                                FROM    DUAL
                                CONNECT
                                BY      LEVEL <= 30
                            )   A
                    ,       TB_PO_HQ_STORE_ORDER_DAYS tphsod
                    WHERE   tphsod.STORE_CD    (+) =       #{storeCd}
                    AND     tphsod.REQ_NO_DAY  (+) LIKE    '%'||A.WEEK||'%'
                    AND     tphsod.REQ_NO_DAY      IS      NULL
                    AND     A.DAY                   NOT IN  (   SELECT  SPECIFIC_DATE
                                                                FROM    TB_PO_HQ_STORE_ORDER_SPECIFIC tphsos
                                                                WHERE   STORE_CD        =   #{storeCd}
                                                                AND     OUTSTOCK_REQ_YN =   'N'
                                                            )
                    UNION
                    SELECT  SPECIFIC_DATE    ORDER_DATE
                    FROM    TB_PO_HQ_STORE_ORDER_SPECIFIC tphsos
                    WHERE   STORE_CD          =   #{storeCd}
                    AND     SPECIFIC_DATE     >=  TO_CHAR(SYSDATE,'YYYYMMDD')
                    AND     OUTSTOCK_REQ_YN   =   'Y'
                    MINUS
                    SELECT  tphsc.CLOSE_DATE  ORDER_DATE
                    FROM    TB_PO_HQ_STORE_CLOSE tphsc
                    WHERE   HQ_OFFICE_CD    =   #{hqOfficeCd}
                    AND     CLOSE_DATE      >=  TO_CHAR(SYSDATE,'YYYYMMDD')
                    AND     ORDER_CLOSE_FG  =   '1'
                    ORDER
                    BY      ORDER_DATE
                )
        WHERE	ROWNUM	=	1
        ]]>
    </select>

    <!-- 반품등록 반품상품 DTL 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 반품상품 DTL을 등록한다.
    -->
    <insert id="insertRtnStoreOrderDtl" parameterType="rtnStoreOrderDtlVO">
        /* USE : RtnStoreOrderMapper.insertRtnStoreOrderDtl */
        INSERT INTO TB_PO_HQ_STORE_ORDER_DTL
        (
            REQ_DATE,
            STORE_CD,
            SLIP_FG,
            HQ_BRAND_CD,
            PROD_CD,
            PO_UNIT_FG,
            PO_UNIT_QTY,
            ORDER_SPLY_UPRC,
            ORDER_UNIT_QTY,
            ORDER_ETC_QTY,
            ORDER_TOT_QTY,
            ORDER_AMT,
            ORDER_VAT,
            ORDER_TOT,
            REMARK,
            REG_DT,
            REG_ID,
            MOD_DT,
            MOD_ID
        )
        VALUES
        (
            #{reqDate},
            #{storeCd},
            #{slipFg},
            #{hqBrandCd},
            #{prodCd},
            #{poUnitFg},
            #{poUnitQty},
            #{orderSplyUprc},
            #{orderUnitQty},
            #{orderEtcQty},
            #{orderTotQty},
            #{orderAmt},
            #{orderVat},
            #{orderTot},
            #{remark},
            #{regDt},
            #{regId},
            #{modDt},
            #{modId}
        )
    </insert>

    <!-- 반품등록 반품상품 DTL 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 반품상품 DTL을 수정한다.
    -->
    <update id="updateRtnStoreOrderDtl" parameterType="rtnStoreOrderDtlVO">
        /* USE : RtnStoreOrderMapper.updateRtnStoreOrderDtl */
        UPDATE  TB_PO_HQ_STORE_ORDER_DTL
        SET     PO_UNIT_FG         = #{poUnitFg},
                PO_UNIT_QTY        = #{poUnitQty},
                ORDER_SPLY_UPRC    = #{orderSplyUprc},
                ORDER_UNIT_QTY     = #{orderUnitQty},
                ORDER_ETC_QTY      = #{orderEtcQty},
                ORDER_TOT_QTY      = #{orderTotQty},
                ORDER_AMT          = #{orderAmt},
                ORDER_VAT          = #{orderVat},
                ORDER_TOT          = #{orderTot},
                REMARK             = #{remark},
                MOD_DT             = #{modDt},
                MOD_ID             = #{modId}
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = #{slipFg}
        AND     PROD_CD     = #{prodCd}
    </update>

    <!-- 반품등록 반품상품 DTL 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 반품상품 DTL을 삭제한다.
    -->
    <delete id="deleteRtnStoreOrderDtl" parameterType="rtnStoreOrderDtlVO">
        /* USE : RtnStoreOrderMapper.deleteRtnStoreOrderDtl */
        DELETE  TB_PO_HQ_STORE_ORDER_DTL
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = #{slipFg}
        AND     PROD_CD     = #{prodCd}
    </delete>

    <!-- 반품등록 반품상품 HD 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : rtnStoreOrderVO
        COMMENTS : 반품등록 반품상품 HD를 등록한다.
    -->
    <insert id="insertRtnStoreOrder" parameterType="rtnStoreOrderVO">
        /* USE : RtnStoreOrderMapper.insertRtnStoreOrder */
        INSERT INTO TB_PO_HQ_STORE_ORDER
        (
            REQ_DATE,
            STORE_CD,
            EMP_NO,
            SLIP_FG,
            ORDER_UNIT_QTY,
            ORDER_ETC_QTY,
            ORDER_TOT_QTY,
            ORDER_AMT,
            ORDER_VAT,
            ORDER_TOT,
            DTL_CNT,
            PROC_FG,
            MD_UNIT_QTY,
            MD_ETC_QTY,
            MD_TOT_QTY,
            MD_AMT,
            MD_VAT,
            MD_TOT,
            REMARK,
            REG_DT,
            REG_ID,
            MOD_DT,
            MOD_ID
        )
        SELECT  tphsod.REQ_DATE
        ,       tphsod.STORE_CD
        ,       #{empNo}
        ,       tphsod.SLIP_FG
        ,       SUM(tphsod.ORDER_UNIT_QTY)
        ,       SUM(tphsod.ORDER_ETC_QTY)
        ,       SUM(tphsod.ORDER_TOT_QTY)
        ,       SUM(tphsod.ORDER_AMT)
        ,       SUM(tphsod.ORDER_VAT)
        ,       SUM(tphsod.ORDER_TOT)
        ,       COUNT(tphsod.PROD_CD)
        ,       #{procFg}
        ,       0
        ,       0
        ,       0
        ,       0
        ,       0
        ,       0
        ,       #{remark}
        ,       #{regDt}
        ,       #{regId}
        ,       #{modDt}
        ,       #{modId}
        FROM    TB_PO_HQ_STORE_ORDER_DTL tphsod
        WHERE   tphsod.REQ_DATE  = #{reqDate}
        AND     tphsod.STORE_CD  = #{storeCd}
        AND     tphsod.SLIP_FG   = #{slipFg}
        GROUP
        BY      tphsod.REQ_DATE
        ,       tphsod.STORE_CD
        ,       tphsod.SLIP_FG
    </insert>

    <!-- 반품등록 반품상품 HD 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : rtnStoreOrderVO
        COMMENTS : 반품등록 반품상품 HD를 수정한다.
    -->
    <update id="updateRtnStoreOrder" parameterType="rtnStoreOrderVO">
        /* USE : RtnStoreOrderMapper.updateRtnStoreOrder */
        UPDATE  TB_PO_HQ_STORE_ORDER
        SET     ( ORDER_UNIT_QTY, ORDER_ETC_QTY, ORDER_TOT_QTY
                , ORDER_AMT, ORDER_VAT, ORDER_TOT
                , MD_UNIT_QTY, MD_ETC_QTY, MD_TOT_QTY
                , MD_AMT, MD_VAT, MD_TOT
                , DTL_CNT)
            =   ( SELECT  NVL(SUM(tphsod.ORDER_UNIT_QTY), 0), NVL(SUM(tphsod.ORDER_ETC_QTY), 0), NVL(SUM(tphsod.ORDER_TOT_QTY), 0)
                  ,       NVL(SUM(tphsod.ORDER_AMT), 0)     , NVL(SUM(tphsod.ORDER_VAT), 0)    , NVL(SUM(tphsod.ORDER_TOT), 0)
                  ,       NVL(SUM(tphsod.MD_UNIT_QTY), 0)   , NVL(SUM(tphsod.MD_ETC_QTY), 0)   , NVL(SUM(tphsod.MD_TOT_QTY), 0)
                  ,       NVL(SUM(tphsod.MD_AMT), 0)        , NVL(SUM(tphsod.MD_VAT), 0)       , NVL(SUM(tphsod.MD_TOT), 0)
                  ,       COUNT(tphsod.PROD_CD)
                  FROM    TB_PO_HQ_STORE_ORDER_DTL tphsod
                  WHERE   tphsod.REQ_DATE  = #{reqDate}
                  AND     tphsod.STORE_CD  = #{storeCd}
                  AND     tphsod.SLIP_FG   = #{slipFg}
                )
        ,       PROC_FG = #{procFg}
        ,       REMARK  = #{remark}
        ,       MOD_DT  = #{modDt}
        ,       MOD_ID  = #{modId}
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = #{slipFg}
    </update>

    <!-- 반품등록 반품상품 HD 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : rtnStoreOrderVO
        COMMENTS : 반품등록 반품상품 HD를 삭제한다.
    -->
    <delete id="deleteRtnStoreOrder" parameterType="rtnStoreOrderVO">
        /* USE : RtnStoreOrderMapper.deleteRtnStoreOrder */
        DELETE  TB_PO_HQ_STORE_ORDER
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = #{slipFg}
    </delete>

    <!-- 반품등록 확정 - 반품수량을 MD수량으로 수정 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : rtnStoreOrderVO
        COMMENTS : 반품등록 확정 - 반품수량을 MD수량으로 수정한다.
    -->
    <update id="updateOrderQtyMdQty" parameterType="rtnStoreOrderVO">
        /* USE : RtnStoreOrderMapper.updateOrderQtyMdQty */
        UPDATE  TB_PO_HQ_STORE_ORDER_DTL
        SET     MD_SPLY_UPRC    =   ORDER_SPLY_UPRC
        ,       MD_UNIT_QTY     =   ORDER_UNIT_QTY
        ,       MD_ETC_QTY      =   ORDER_ETC_QTY
        ,       MD_TOT_QTY      =   ORDER_TOT_QTY
        ,       MD_AMT          =   ORDER_AMT
        ,       MD_VAT          =   ORDER_VAT
        ,       MD_TOT          =   ORDER_TOT
        ,       MOD_DT          =   #{modDt}
        ,       MOD_ID          =   #{modId}
        WHERE   REQ_DATE  = #{reqDate}
        AND     STORE_CD  = #{storeCd}
        AND     SLIP_FG   = #{slipFg}
    </update>

    <!--  반품등록 확정 - 분배자료 생성 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_DISTRIBUTE
        PARAM    : dstbReqVO
        COMMENTS : 반품등록 확정 - 반품등록 정보를 바탕으로 분배자료를 생성한다.
    -->
    <insert id="insertDstbRegist" parameterType="dstbReqVO">
        /* USE : RtnStoreOrderMapper.insertDstbRegist */
        <selectKey resultType="int" keyProperty="seq" order="BEFORE">
            SELECT  NVL(MAX(tphsd.SEQ), 0) AS SEQ
            FROM    TB_PO_HQ_STORE_DISTRIBUTE tphsd
            WHERE   HQ_OFFICE_CD  = #{hqOfficeCd}
            AND     REQ_DATE      = #{reqDate}
        </selectKey>
        INSERT INTO TB_PO_HQ_STORE_DISTRIBUTE
        (
        HQ_OFFICE_CD,
        REQ_DATE,
        SEQ,
        STORE_CD,
        EMP_NO,
        SLIP_FG,
        DSTB_FG,
        STORAGE_CD,
        HQ_BRAND_CD,
        PROD_CD,
        PO_UNIT_FG,
        PO_UNIT_QTY,
        ORDER_SPLY_UPRC,
        ORDER_UNIT_QTY,
        ORDER_ETC_QTY,
        ORDER_TOT_QTY,
        ORDER_AMT,
        ORDER_VAT,
        ORDER_TOT,
        MD_SPLY_UPRC,
        MD_UNIT_QTY,
        MD_ETC_QTY,
        MD_TOT_QTY,
        MD_AMT,
        MD_VAT,
        MD_TOT,
        MGR_SPLY_UPRC,
        MGR_UNIT_QTY,
        MGR_ETC_QTY,
        MGR_TOT_QTY,
        MGR_AMT,
        MGR_VAT,
        MGR_TOT,
        MGR_DT,
        MGR_ID,
        PROC_FG,
        REMARK,
        REG_DT,
        REG_ID,
        MOD_DT,
        MOD_ID
        )
        SELECT  #{hqOfficeCd}
        ,       #{reqDate}
        ,       #{seq}+ROWNUM
        ,       #{storeCd}
        ,       #{empNo}
        ,       #{slipFg}
        ,       #{dstbFg}
        ,       #{storageCd}
        ,       #{hqBrandCd}
        ,       PROD_CD
        ,       PO_UNIT_FG
        ,       PO_UNIT_QTY
        ,       ORDER_SPLY_UPRC
        ,       ORDER_UNIT_QTY
        ,       ORDER_ETC_QTY
        ,       ORDER_TOT_QTY
        ,       ORDER_AMT
        ,       ORDER_VAT
        ,       ORDER_TOT
        ,       MD_SPLY_UPRC
        ,       MD_UNIT_QTY
        ,       MD_ETC_QTY
        ,       MD_TOT_QTY
        ,       MD_AMT
        ,       MD_VAT
        ,       MD_TOT
        ,       MD_SPLY_UPRC
        ,       MD_UNIT_QTY
        ,       MD_ETC_QTY
        ,       MD_TOT_QTY
        ,       MD_AMT
        ,       MD_VAT
        ,       MD_TOT
        ,       #{modDt}
        ,       #{modId}
        ,       #{procFg}
        ,       REMARK
        ,       #{regDt}
        ,       #{regId}
        ,       #{modDt}
        ,       #{modId}
        FROM    (   SELECT  PROD_CD         ,   PO_UNIT_FG     ,   PO_UNIT_QTY
        ,       REMARK
        ,       ORDER_SPLY_UPRC ,   ORDER_UNIT_QTY ,   ORDER_ETC_QTY      ,   ORDER_TOT_QTY       ,   ORDER_AMT       ,   ORDER_VAT       ,   ORDER_TOT
        ,       MD_SPLY_UPRC    ,   MD_UNIT_QTY    ,   MD_ETC_QTY         ,   MD_TOT_QTY          ,   MD_AMT          ,   MD_VAT          ,   MD_TOT
        FROM    TB_PO_HQ_STORE_ORDER_DTL
        WHERE   REQ_DATE    =   #{reqDate}
        AND     STORE_CD    =   #{storeCd}
        AND     SLIP_FG     =   #{slipFg}
        ORDER
        BY      PROD_CD
        )
    </insert>

    <!-- 반품등록 확정 - 분배자료 진행구분 변경 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_DISTRIBUTE
        PARAM    : dstbCloseStoreVO
        COMMENTS : 반품등록 확정 - 분배자료 진행구분을 변경한다.
    -->
    <update id="updateDstbProcFg" parameterType="dstbCloseStoreVO">
        /* USE : RtnStoreOrderMapper.updateDstbProcFg */
        UPDATE  TB_PO_HQ_STORE_DISTRIBUTE
        SET     PROC_FG         = #{updateProcFg},
                MGR_DT          = #{modDt},
                MGR_ID          = #{modId}
        WHERE   HQ_OFFICE_CD  = #{hqOfficeCd}
        AND     REQ_DATE      = #{reqDate}
        AND     SLIP_FG       = #{slipFg}
        AND     STORE_CD      = #{storeCd}
        AND     PROC_FG       = #{procFg}
    </update>
</mapper>
