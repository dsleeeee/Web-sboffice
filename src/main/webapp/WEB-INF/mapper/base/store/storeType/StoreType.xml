<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    StoreType.xml
    매장타입관리
    ======================================================
    No  ||  수정자 ||  수정일자    ||  수정내역
    ======================================================
    1       이다솜     2021.06.28     최초작성
-->

<mapper namespace="kr.co.solbipos.base.store.storeType.service.impl.StoreTypeMapper">

    <!-- 매장타입관리 - 매장타입조회 -->
    <!--
        TABLE    : TB_HQ_STORE_TYPE
        PARAM    : storeTypeVO
        COMMENTS : 매장타입을 조회한다.
    -->
    <select id="getStoreType" parameterType="storeTypeVO" resultType="DefaultMap">
        /* USE : StoreTypeMapper.getStoreType */
        SELECT HQ_OFFICE_CD,
                STORE_TYPE_CD,
                STORE_TYPE_NM,
                REMARK,
                USE_YN
          FROM TB_HQ_STORE_TYPE
         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
        <if test="storeTypeNm != null and storeTypeNm != ''">
           AND STORE_TYPE_NM LIKE '%' || #{storeTypeNm} || '%'
        </if>
        <if test="useYn != null and useYn != ''">
           AND USE_YN = #{useYn}
        </if>
         ORDER
            BY STORE_TYPE_CD ASC
    </select>

    <!-- 매장타입관리 - 매장타입코드 생성 -->
    <!--
        TABLE    : TB_HQ_STORE_TYPE
        PARAM    : storeTypeVO
        COMMENTS : 새로운 매장타입 생성시 매장타입코드를 생성한다.
    -->
    <select id="getStoreTypeCode" parameterType="storeTypeVO" resultType="String">
        /* USE : StoreTypeMapper.getStoreTypeCode */
        SELECT LPAD(NVL(MAX(STORE_TYPE_CD), '0') + 1, 3, '0')
          FROM TB_HQ_STORE_TYPE
         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
    </select>

    <!-- 매장타입관리 - 매장타입생성 -->
    <!--
        TABLE    : TB_HQ_STORE_TYPE
        PARAM    : storeTypeVO
        COMMENTS : 새로운 매장타입을 생성한다.
    -->
    <insert id="insertStoreType" parameterType="storeTypeVO">
        /* USE : StoreTypeMapper.insertStoreType */
        INSERT INTO TB_HQ_STORE_TYPE
                    (
                        HQ_OFFICE_CD,
                        STORE_TYPE_CD,
                        STORE_TYPE_NM,
                        REMARK,
                        OPTION01,
                        USE_YN,
                        REG_DT,
                        REG_ID,
                        MOD_DT,
                        MOD_ID
                    )
                    VALUES
                    (
                        #{hqOfficeCd},
                        #{storeTypeCd},
                        #{storeTypeNm},
                        #{remark},
                        #{option01},
                        #{useYn},
                        #{regDt},
                        #{regId},
                        #{modDt},
                        #{modId}
                    )
    </insert>

    <!-- 매장타입관리 - 매장타입수정 -->
    <!--
        TABLE    : TB_HQ_STORE_TYPE
        PARAM    : storeTypeVO
        COMMENTS : 매장타입을 수정한다.
    -->
    <update id="updateStoreType" parameterType="storeTypeVO">
        /* USE : StoreTypeMapper.updateStoreType */
        UPDATE TB_HQ_STORE_TYPE
           SET STORE_TYPE_NM = #{storeTypeNm},
                REMARK = #{remark},
                USE_YN = #{useYn},
                MOD_DT = #{modDt},
                MOD_ID = #{modId}
         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
           AND STORE_TYPE_CD = #{storeTypeCd}
    </update>

    <!-- 매장타입관리 - 매장연결조회 -->
    <!--
        TABLE    : TB_HQ_STORE_TYPE_STORE
        PARAM    : storeTypeVO
        COMMENTS : 매장연결을 조회한다.
    -->
    <select id="getStoreMapping" parameterType="storeTypeVO" resultType="DefaultMap">
        /* StoreTypeMapper.getStoreMapping */
        SELECT thsts.HQ_OFFICE_CD,
                thsts.STORE_TYPE_CD,
                thsts.STORE_CD,
                tms.STORE_NM,
                tms.SYS_STAT_FG
          FROM TB_HQ_STORE_TYPE_STORE thsts,
          	    TB_MS_STORE tms
         WHERE thsts.HQ_OFFICE_CD = #{hqOfficeCd}
           AND thsts.STORE_TYPE_CD = #{storeTypeCd}
           AND thsts.USE_YN = 'Y'
           AND tms.HQ_OFFICE_CD = thsts.HQ_OFFICE_CD
           AND tms.STORE_CD = thsts.STORE_CD
        ORDER
           BY thsts.STORE_CD ASC
    </select>

    <!-- 매장타입관리 - 매장연결삭제 -->
    <!--
        TABLE    : TB_HQ_STORE_TYPE_STORE
        PARAM    : storeTypeVO
        COMMENTS : 매장타입에 연결됨 매장을 삭제한다.
    -->
    <delete id="deleteStoreMapping" parameterType="storeTypeVO">
        /* StoreTypeMapper.deleteStoreMapping */
        DELETE TB_HQ_STORE_TYPE_STORE
         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
           AND STORE_TYPE_CD = #{storeTypeCd}
           AND STORE_CD = #{storeCd}
    </delete>

    <!-- 매장타입관리 - 매장조회 -->
    <!--
        TABLE    : TB_MS_STORE
        PARAM    : storeTypeVO
        COMMENTS : 매장을 조회한다.
    -->
    <select id="getStoreList" parameterType="storeTypeVO" resultType="DefaultMap">
        /* StoreTypeMapper.getStoreList */
        SELECT HQ_OFFICE_CD,
                STORE_CD,
                STORE_NM,
                SYS_STAT_FG
          FROM TB_MS_STORE
          WHERE HQ_OFFICE_CD = #{hqOfficeCd}
        <if test="storeCd != null and storeCd != ''">
            AND STORE_CD LIKE '%'||#{storeCd}||'%' --매장코드
        </if>
        <if test="storeNm != null and storeNm != ''">
            AND STORE_NM LIKE '%'||#{storeNm}||'%' --매장명
        </if>
        <if test="sysStatFg != null and sysStatFg != ''">
            AND SYS_STAT_FG = #{sysStatFg} --매장상태구분
        </if>
        <if test='storeHqBrandCd != null and storeHqBrandCd != ""'>
            AND HQ_BRAND_CD = #{storeHqBrandCd} -- 선택한 매장브랜드가 있을 때
        </if>
        <if test='storeHqBrandCd == null or storeHqBrandCd == ""'>
            <if test='userBrands != null and userBrands != ""'>
                -- 선택한 매장브랜드가 없을 때('전체' 일때), 사용자 관리브랜드에 속한 정보만 조회
                AND HQ_BRAND_CD IN
                <foreach collection="userBrandList" item="item" open=" (" separator="," close=")" >
                    #{item}
                </foreach>
            </if>
        </if>
        AND STORE_CD NOT IN (SELECT STORE_CD FROM TB_HQ_STORE_TYPE_STORE WHERE HQ_OFFICE_CD = #{hqOfficeCd})
        ORDER
        BY STORE_CD ASC
    </select>

    <!-- 매장타입관리 - 매장중복체크 -->
    <!--
        TABLE    : TB_HQ_STORE_TYPE_STORE
        PARAM    : storeTypeVO
        COMMENTS : 매장연결 전에 이미 매장타입에 등록된 매장인지 중복체크한다.
    -->
    <select id="getStoreMappingYn" parameterType="storeTypeVO" resultType="integer">
      /* StoreTypeMapper.getStoreMappingYn */
      SELECT COUNT(1)
        FROM TB_HQ_STORE_TYPE_STORE
       WHERE HQ_OFFICE_CD = #{hqOfficeCd}
         AND STORE_CD = #{storeCd}
    </select>

    <!-- 매장타입관리 - 매장연결등록 -->
    <!--
        TABLE    : TB_HQ_STORE_TYPE_STORE
        PARAM    : storeTypeVO
        COMMENTS : 매장타입에 매장을 연결한다.
    -->
    <insert id="saveStoreMapping" parameterType="storeTypeVO">
        /* StoreTypeMapper.saveStoreMapping */
        INSERT INTO TB_HQ_STORE_TYPE_STORE
                    (
                        HQ_OFFICE_CD,
                        STORE_TYPE_CD,
                        STORE_CD,
                        REMARK,
                        OPTION01,
                        USE_YN,
                        REG_DT,
                        REG_ID,
                        MOD_DT,
                        MOD_ID
                    )
                    VALUES
                    (
                        #{hqOfficeCd},
                        #{storeTypeCd},
                        #{storeCd},
                        #{remark},
                        #{option01},
                        #{useYn},
                        #{regDt},
                        #{regId},
                        #{modDt},
                        #{modId}
                    )
    </insert>

    <!-- 매장타입관리 - 메뉴그룹연결조회 -->
    <!--
        TABLE    : TB_HQ_STORE_TYPE_PROD_GROUP
        PARAM    : storeTypeVO
        COMMENTS : 메뉴그룹연결을 조회한다.
    -->
    <select id="getMenuGroupMapping" parameterType="storeTypeVO" resultType="DefaultMap">
        /* StoreTypeMapper.getMenuGroupMapping */
        SELECT thstpg.HQ_OFFICE_CD,
                thstpg.STORE_TYPE_CD,
                thstpg.STORE_GROUP_CD,
                thstpg.USE_YN,
                thspg.STORE_GROUP_NM
          FROM TB_HQ_STORE_TYPE_PROD_GROUP thstpg,
          		TB_HQ_STORE_PROD_GROUP thspg
         WHERE thstpg.HQ_OFFICE_CD = #{hqOfficeCd}
           AND thstpg.STORE_TYPE_CD = #{storeTypeCd}
           AND thstpg.USE_YN = 'Y'
           AND thspg.HQ_OFFICE_CD = thstpg.HQ_OFFICE_CD
           AND thspg.STORE_GROUP_CD = thstpg.STORE_GROUP_CD
        ORDER
           BY thstpg.STORE_GROUP_CD ASC
    </select>

    <!-- 매장타입관리 - 메뉴그룹연결삭제 -->
    <!--
        TABLE    : TB_HQ_STORE_TYPE_PROD_GROUP
        PARAM    : storeTypeVO
        COMMENTS : 메뉴그룹연결을 삭제한다.
    -->
    <delete id="deleteMenuGroupMapping" parameterType="storeTypeVO">
        /* StoreTypeMapper.deleteMenuGroupMapping */
        DELETE TB_HQ_STORE_TYPE_PROD_GROUP
         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
           AND STORE_TYPE_CD = #{storeTypeCd}
           AND STORE_GROUP_CD = #{storeGroupCd}
    </delete>

    <!-- 매장타입관리 - 메뉴그룹조회 -->
    <!--
        TABLE    : TB_HQ_STORE_PROD_GROUP
        PARAM    : storeTypeVO
        COMMENTS : 메뉴그룹을 조회한다.
    -->
    <select id="getMenuGroupList" parameterType="storeTypeVO" resultType="DefaultMap">
        /* StoreTypeMapper.getMenuGroupList */
        SELECT HQ_OFFICE_CD,
                STORE_GROUP_CD,
                STORE_GROUP_NM,
                USE_YN
         FROM TB_HQ_STORE_PROD_GROUP
        WHERE HQ_OFFICE_CD = #{hqOfficeCd}
        <if test="storeGroupCd != null and storeGroupCd != ''">
           AND STORE_GROUP_CD LIKE '%'||#{storeGroupCd}||'%' --메뉴그룹코드
        </if>
        <if test="storeGroupNm != null and storeGroupNm != ''">
           AND STORE_GROUP_NM LIKE '%'||#{storeGroupNm}||'%' --메뉴그룹명
        </if>
        <if test="useYn != null and useYn != ''">
           AND USE_YN = #{useYn}
        </if>
          AND STORE_GROUP_CD NOT IN (SELECT STORE_GROUP_CD FROM TB_HQ_STORE_TYPE_PROD_GROUP WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND STORE_TYPE_CD = #{storeTypeCd})
        ORDER
           BY STORE_GROUP_CD ASC
    </select>

    <!-- 매장타입관리 - 메뉴그룹연결등록 -->
    <!--
        TABLE    : TB_HQ_STORE_TYPE_PROD_GROUP
        PARAM    : storeTypeVO
        COMMENTS : 메뉴그룹을 등록한다.
    -->
    <insert id="saveMenuGroupMapping" parameterType="storeTypeVO">
        /* StoreTypeMapper.saveMenuGroupMapping */
        INSERT INTO TB_HQ_STORE_TYPE_PROD_GROUP
                    (
                        HQ_OFFICE_CD,
                        STORE_TYPE_CD,
                        STORE_GROUP_CD,
                        REMARK,
                        OPTION01,
                        USE_YN,
                        REG_DT,
                        REG_ID,
                        MOD_DT,
                        MOD_ID
                    )
                    VALUES
                    (
                        #{hqOfficeCd},
                        #{storeTypeCd},
                        #{storeGroupCd},
                        #{remark},
                        #{option01},
                        #{useYn},
                        #{regDt},
                        #{regId},
                        #{modDt},
                        #{modId}
                    )
    </insert>

    <!-- 메뉴그룹관리 - 메뉴그룹조회 -->
    <!--
        TABLE    : TB_HQ_STORE_PROD_GROUP
        PARAM    : storeTypeVO
        COMMENTS : 메뉴그룹을 조회한다.
    -->
    <select id="getMenuGroup" parameterType="storeTypeVO" resultType="DefaultMap">
        /* USE : StoreTypeMapper.getMenuGroup */
        SELECT HQ_OFFICE_CD,
                STORE_GROUP_CD,
                STORE_GROUP_NM,
                REMARK,
                USE_YN
        FROM TB_HQ_STORE_PROD_GROUP
        WHERE HQ_OFFICE_CD = #{hqOfficeCd}
        <if test="storeGroupNm != null and storeGroupNm != ''">
            AND STORE_GROUP_NM LIKE '%' || #{storeGroupNm} || '%'
        </if>
        <if test="useYn != null and useYn != ''">
            AND USE_YN = #{useYn}
        </if>
        ORDER
           BY STORE_GROUP_CD ASC
    </select>

    <!-- 메뉴그룹관리 - 메뉴그룹코드 생성 -->
    <!--
        TABLE    : TB_HQ_STORE_PROD_GROUP
        PARAM    : storeTypeVO
        COMMENTS : 새로운 메뉴그룹 생성시 메뉴그룹코드를 생성한다.
    -->
    <select id="getMenuGroupCode" parameterType="storeTypeVO" resultType="String">
        /* USE : StoreTypeMapper.getMenuGroupCode */
        SELECT LPAD(NVL(MAX(STORE_GROUP_CD), '0') + 1, 3, '0')
          FROM TB_HQ_STORE_PROD_GROUP
         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
    </select>

    <!-- 메뉴그룹관리 - 메뉴그룹생성 -->
    <!--
        TABLE    : TB_HQ_STORE_PROD_GROUP
        PARAM    : storeTypeVO
        COMMENTS : 새로운 메뉴그룹을 생성한다.
    -->
    <insert id="insertMenuGroup" parameterType="storeTypeVO">
        /* USE : StoreTypeMapper.insertMenuGroup */
        INSERT INTO TB_HQ_STORE_PROD_GROUP
                    (
                        HQ_OFFICE_CD,
                        STORE_GROUP_CD,
                        STORE_GROUP_NM,
                        REMARK,
                        OPTION01,
                        USE_YN,
                        REG_DT,
                        REG_ID,
                        MOD_DT,
                        MOD_ID
                    )
                    VALUES
                    (
                        #{hqOfficeCd},
                        #{storeGroupCd},
                        #{storeGroupNm},
                        #{remark},
                        #{option01},
                        #{useYn},
                        #{regDt},
                        #{regId},
                        #{modDt},
                        #{modId}
                    )
    </insert>

    <!-- 메뉴그룹관리 - 메뉴그룹수정 -->
    <!--
        TABLE    : TB_HQ_STORE_PROD_GROUP
        PARAM    : storeTypeVO
        COMMENTS : 메뉴그룹을 수정한다.
    -->
    <update id="updateMenuGroup" parameterType="storeTypeVO">
        /* USE : StoreTypeMapper.updateMenuGroup */
        UPDATE TB_HQ_STORE_PROD_GROUP
           SET STORE_GROUP_NM = #{storeGroupNm},
                REMARK = #{remark},
                USE_YN = #{useYn},
                MOD_DT = #{modDt},
                MOD_ID = #{modId}
         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
           AND STORE_GROUP_CD = #{storeGroupCd}
    </update>

    <!-- 메뉴그룹관리 - 상품연결조회 -->
    <!--
        TABLE    : TB_HQ_STORE_PROD_GROUP_DTL
        PARAM    : storeTypeVO
        COMMENTS : 상품연결을 조회한다.
    -->
    <select id="getProdMapping" parameterType="storeTypeVO" resultType="DefaultMap">
        /* StoreTypeMapper.getProdMapping */
        SELECT thspgd.HQ_OFFICE_CD,
                thspgd.STORE_GROUP_CD,
                thspgd.PROD_CD,
                thspgd.SALE_UPRC,
                thp.PROD_NM,
                thspgd.STIN_SALE_UPRC,
                thspgd.DLVR_SALE_UPRC,
                thspgd.PACK_SALE_UPRC
          FROM TB_HQ_STORE_PROD_GROUP_DTL thspgd,
          	    TB_HQ_PRODUCT thp
         WHERE thspgd.HQ_OFFICE_CD = #{hqOfficeCd}
           AND thspgd.STORE_GROUP_CD = #{storeGroupCd}
           AND thspgd.USE_YN = 'Y'
           AND thp.HQ_OFFICE_CD = thspgd.HQ_OFFICE_CD
           AND thp.PROD_CD = thspgd.PROD_CD
           AND (
                 ( ((SELECT COUNT(HQ_BRAND_CD) FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId}) != 0) AND (thp.HQ_BRAND_CD IN (SELECT HQ_BRAND_CD FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId})) )
                 OR
                  ( ((SELECT COUNT(HQ_BRAND_CD) FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId}) = 0) AND 1=1 )
               )
        ORDER
           BY thspgd.PROD_CD ASC
    </select>

    <!-- 메뉴그룹관리 - 상품연결삭제 -->
    <!--
        TABLE    : TB_HQ_STORE_PROD_GROUP_DTL
        PARAM    : storeTypeVO
        COMMENTS : 메뉴그룹에 연결된 상품을 삭제한다.
    -->
    <delete id="deleteProdMapping" parameterType="storeTypeVO">
        /* StoreTypeMapper.deleteProdMapping */
        DELETE TB_HQ_STORE_PROD_GROUP_DTL
         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
           AND STORE_GROUP_CD = #{storeGroupCd}
           AND PROD_CD = #{prodCd}
    </delete>

    <!-- 메뉴그룹관리 - 상품연결수정 -->
    <!--
        TABLE    : TB_HQ_STORE_PROD_GROUP_DTL
        PARAM    : storeTypeVO
        COMMENTS : 메뉴그룹에 연결된 상품정보를 수정한다.
    -->
    <update id="updateProdMapping" parameterType="storeTypeVO">
        /* USE : StoreTypeMapper.updateProdMapping */
        UPDATE TB_HQ_STORE_PROD_GROUP_DTL
            SET SALE_UPRC = #{saleUprc},
                 STIN_SALE_UPRC = NVL(#{stinSaleUprc}, #{saleUprc}),
                 DLVR_SALE_UPRC = NVL(#{dlvrSaleUprc}, #{saleUprc}),
                 PACK_SALE_UPRC = NVL(#{packSaleUprc}, #{saleUprc}),
                 MOD_DT = #{modDt},
                 MOD_ID = #{modId}
          WHERE HQ_OFFICE_CD = #{hqOfficeCd}
            AND STORE_GROUP_CD = #{storeGroupCd}
            AND PROD_CD = #{prodCd}
    </update>

    <!-- 메뉴그룹관리 - 상품조회 -->
    <!--
        TABLE    : TB_HQ_PRODUCT
        PARAM    : storeTypeVO
        COMMENTS : 상품을 조회한다.
    -->
    <select id="getProdList" parameterType="storeTypeVO" resultType="DefaultMap">
        /* StoreTypeMapper.getProdList */
        SELECT thp.PROD_CD,
                thp.PROD_NM,
                NVL(thpsp.SALE_UPRC, 0) AS SALE_UPRC, -- 판매단가
                thp.USE_YN,
                (CASE WHEN thspgd.PROD_CD IS NULL THEN 'N' ELSE 'Y' END) AS REG_YN,
                NVL(thpsp.STIN_SALE_UPRC, 0) AS STIN_SALE_UPRC, -- 내점가
                NVL(thpsp.DLVR_SALE_UPRC, 0) AS DLVR_SALE_UPRC, -- 배달가
                NVL(thpsp.PACK_SALE_UPRC, 0) AS PACK_SALE_UPRC  -- 포장가
          FROM TB_HQ_PRODUCT thp
          LEFT OUTER JOIN (
                                SELECT HQ_OFFICE_CD,
                                        PROD_CD,
                                        MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC,
                                        MIN(STIN_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS STIN_SALE_UPRC,
                                        MIN(DLVR_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS DLVR_SALE_UPRC,
                                        MIN(PACK_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS PACK_SALE_UPRC
                                  FROM TB_HQ_PRODUCT_SALE_PRICE
                                 WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                                  <![CDATA[
                                   AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                                   AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                                  ]]>
                                   AND SALE_PRC_FG = '1'
                                 GROUP
                                    BY HQ_OFFICE_CD, PROD_CD
                            ) thpsp ON thp.HQ_OFFICE_CD = thpsp.HQ_OFFICE_CD
                                   AND thp.PROD_CD = thpsp.PROD_CD
        INNER JOIN TB_HQ_OFFICE tho ON tho.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
        LEFT OUTER JOIN (
                                SELECT HQ_OFFICE_CD,
                                        PROD_CD
                                  FROM TB_HQ_STORE_PROD_GROUP_DTL
                                 WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                                   AND STORE_GROUP_CD = #{storeGroupCd}
                            ) thspgd ON thp.HQ_OFFICE_CD = thspgd.HQ_OFFICE_CD
                                  AND thp.PROD_CD = thspgd.PROD_CD
        WHERE thp.HQ_OFFICE_CD = #{hqOfficeCd}
          AND thp.PROD_CD NOT IN (SELECT PROD_CD FROM TB_HQ_STORE_PROD_GROUP_DTL WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND STORE_GROUP_CD = #{storeGroupCd})
        <if test="chkDt == false">
            <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
                <![CDATA[
                        AND thp.REG_DT BETWEEN #{startDate}||'000000' AND #{endDate}||'235959'
                        ]]>
            </if>
        </if>
        <if test="prodCd != null and prodCd != ''">
            AND thp.PROD_CD LIKE '%'||#{prodCd}||'%' --상품코드
        </if>
        <if test="prodNm != null and prodNm != ''">
            AND thp.PROD_NM LIKE '%'||#{prodNm}||'%' --상품명
        </if>
        <if test="prodClassCd != null and prodClassCd != ''">
            AND thp.PROD_CLASS_CD IN (
                                        SELECT PROD_CLASS_CD
                                          FROM TB_HQ_PRODUCT_CLASS
                                         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                                        START WITH PROD_CLASS_CD = #{prodClassCd} AND HQ_OFFICE_CD = #{hqOfficeCd}
                                        CONNECT BY PRIOR PROD_CLASS_CD = P_PROD_CLASS_CD AND HQ_OFFICE_CD = #{hqOfficeCd}
            ) --상품분류
        </if>
        <if test="barCd != null and barCd != ''">
            AND EXISTS (
                            SELECT 1
                              FROM TB_HQ_PRODUCT_BARCD
                             WHERE HQ_OFFICE_CD = thp.HQ_OFFICE_CD
                               AND PROD_CD = thp.PROD_CD
                               AND BARCD_CD = #{barCd}
            ) --바코드
        </if>
        <if test="hqBrandCd != null and hqBrandCd != ''">
            AND thp.HQ_BRAND_CD = #{hqBrandCd} --브랜드코드
        </if>
        <if test="useYn != null and useYn != ''">
            AND thp.USE_YN = #{useYn} --사용여부
        </if>
        <if test="prodTypeFg != null and prodTypeFg != ''">
            AND thp.PROD_TYPE_FG = #{prodTypeFg} --상품유형
        </if>
        <choose>
            <when test='regYn != null and regYn == "Y"'>
                AND thspgd.PROD_CD IS NOT NULL
            </when>
            <when test='regYn != null and regYn == "N"'>
                AND thspgd.PROD_CD IS NULL
            </when>
            <otherwise></otherwise>
        </choose>
        AND (
                ( ((SELECT COUNT(HQ_BRAND_CD) FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId}) != 0) AND (thp.HQ_BRAND_CD IN (SELECT HQ_BRAND_CD FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId})) )
                OR
                ( ((SELECT COUNT(HQ_BRAND_CD) FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId}) = 0) AND 1=1 )
            )
        ORDER
           BY thp.PROD_CD ASC
    </select>

    <!-- 메뉴그룹관리 - 상품연결등록 -->
    <!--
        TABLE    : TB_HQ_STORE_PROD_GROUP_DTL
        PARAM    : storeTypeVO
        COMMENTS : 메뉴그룹에 상품을 연결한다.
    -->
    <insert id="saveProdMapping" parameterType="storeTypeVO">
        /* StoreTypeMapper.saveProdMapping */
        INSERT INTO TB_HQ_STORE_PROD_GROUP_DTL
                    (
                        HQ_OFFICE_CD,
                        STORE_GROUP_CD,
                        PROD_CD,
                        SALE_UPRC,
                        REMARK,
                        OPTION01,
                        USE_YN,
                        REG_DT,
                        REG_ID,
                        MOD_DT,
                        MOD_ID,
                        STIN_SALE_UPRC,
                        DLVR_SALE_UPRC,
                        PACK_SALE_UPRC
                    )
                    VALUES
                    (
                        #{hqOfficeCd},
                        #{storeGroupCd},
                        #{prodCd},
                        #{saleUprc},
                        #{remark},
                        #{option01},
                        #{useYn},
                        #{regDt},
                        #{regId},
                        #{modDt},
                        #{modId},
                        NVL(#{stinSaleUprc}, #{saleUprc}),
                        NVL(#{dlvrSaleUprc}, #{saleUprc}),
                        NVL(#{packSaleUprc}, #{saleUprc})
                    )
    </insert>

    <!-- 메뉴그룹관리 - 브랜드조회(콤보박스용) -->
    <!--
        TABLE    : TB_HQ_BRAND
        PARAM    : storeTypeVO
        COMMENTS : 콤보박스에서 사용할 브랜드를 조회한다.
    -->
    <select id="getBrandList" parameterType="storeTypeVO" resultType="DefaultMap">
        /* StoreTypeMapper.getBrandList */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT '' AS VALUE,
                        '전체' AS NAME
                  FROM DUAL
                 UNION
                SELECT HQ_BRAND_CD AS VALUE,
                        HQ_BRAND_NM AS NAME
                  FROM TB_HQ_BRAND
                 WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                   AND USE_YN = 'Y'
                 ORDER
                    BY VALUE NULLS FIRST
            </when>
            <!-- 매장 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                SELECT '' AS VALUE,
                        '전체' AS NAME
                  FROM DUAL
                 UNION
                SELECT MS_BRAND_CD AS VALUE,
                        MS_BRAND_NM AS NAME
                FROM TB_MS_BRAND
                WHERE STORE_CD = #{storeCd}
                  AND USE_YN = 'Y'
                ORDER
                BY VALUE NULLS FIRST
            </when>
        </choose>
    </select>

    <!-- 매장타입관리 - 매장타입 매장적용 팝업 매장리스트 조회 -->
    <!--
          TABLE    : TB_MS_STORE
          PARAM    : storeTypeVO
          COMMENTS : 매장타입 매장적용 팝업의 매장리스트를 조회한다.
    -->
    <select id="getStoreTypeApplyStoreList" parameterType="storeTypeVO" resultType="DefaultMap">
        /* StoreTypeMapper.getStoreTypeApplyStoreList */
        SELECT C.STORE_TYPE_CD,
                C.STORE_TYPE_NM,
                C.STORE_NM,
                C.STORE_CD,
                C.SYS_STAT_FG,
                C.HQ_BRAND_CD,
                C.APPLY_DT,
                C.STORE_GROUP_NMS,
                C.STORE_GROUP_CDS
                FROM (
                            SELECT thsts.STORE_TYPE_CD,
                                    thsts.STORE_TYPE_NM,
                                    tms.STORE_NM,
                                    tms.STORE_CD,
                                    tms.SYS_STAT_FG,
                                    tms.HQ_BRAND_CD,
                                    TO_CHAR(TO_DATE(thsta.APPLY_DT, 'YYYYMMDDHH24MISS'), 'YYYY.MM.DD HH24:MI:SS') AS APPLY_DT,
                                    LISTAGG(thstpg.STORE_GROUP_NM || '(' || thstpg.STORE_GROUP_CD || ')', ', ') WITHIN GROUP (ORDER BY thstpg.STORE_GROUP_CD) AS STORE_GROUP_NMS,
                                    LISTAGG(thstpg.STORE_GROUP_CD, ', ') WITHIN GROUP (ORDER BY thstpg.STORE_GROUP_CD) AS STORE_GROUP_CDS
                              FROM TB_MS_STORE tms,
                                    (       SELECT thsts.HQ_OFFICE_CD,
                                                    thsts.STORE_TYPE_CD,
                                                    thst.STORE_TYPE_NM,
                                                    thsts.STORE_CD,
                                                    thsts.REMARK,
                                                    thsts.OPTION01,
                                                    thsts.USE_YN
                                              FROM TB_HQ_STORE_TYPE_STORE thsts,
                                                    TB_HQ_STORE_TYPE thst
                                             WHERE thsts.HQ_OFFICE_CD = #{hqOfficeCd}
                                               AND thst.HQ_OFFICE_CD (+)= thsts.HQ_OFFICE_CD
                                               AND thst.STORE_TYPE_CD (+)= thsts.STORE_TYPE_CD
                                     ) thsts,
                                    (
                                            SELECT A.HQ_OFFICE_CD,
                                                    A.STORE_TYPE_CD,
                                                    A.STORE_GROUP_CD,
                                                    B.STORE_GROUP_NM
                                              FROM TB_HQ_STORE_TYPE_PROD_GROUP A,
                                                    TB_HQ_STORE_PROD_GROUP B
                                             WHERE A.HQ_OFFICE_CD = #{hqOfficeCd}
                                               AND B.HQ_OFFICE_CD (+)= A.HQ_OFFICE_CD
                                               AND B.STORE_GROUP_CD (+)= A.STORE_GROUP_CD
                                    ) thstpg,
                                     TB_HQ_STORE_TYPE_APP thsta
                             WHERE tms.HQ_OFFICE_CD = #{hqOfficeCd}
                               AND thsts.HQ_OFFICE_CD (+)= tms.HQ_OFFICE_CD
                               AND thsts.STORE_CD (+)= tms.STORE_CD
                               AND thsta.HQ_OFFICE_CD (+)= tms.HQ_OFFICE_CD
                               AND thsta.STORE_CD (+)= tms.STORE_CD
                               AND thstpg.HQ_OFFICE_CD (+)= tms.HQ_OFFICE_CD
                               AND thstpg.STORE_TYPE_CD (+)= thsts.STORE_TYPE_CD
                            GROUP
                               BY thsts.STORE_TYPE_CD,
                                  thsts.STORE_TYPE_NM,
                                  tms.STORE_NM,
                                  tms.STORE_CD,
                                  tms.SYS_STAT_FG,
                                  tms.HQ_BRAND_CD,
                                  thsta.APPLY_DT
                    ) C
                 WHERE 1=1
                <if test="storeTypeCd != null and storeTypeCd != ''">
                    AND C.STORE_TYPE_CD = #{storeTypeCd}   --매장타입코드
                </if>
                <if test="storeGroupCd != null and storeGroupCd != ''">
                   AND C.STORE_GROUP_CDS LIKE '%' || #{storeGroupCd} || '%' --메뉴그룹
                </if>
                <if test="storeCd != null and storeCd != ''">
                    AND C.STORE_CD LIKE '%'||#{storeCd}||'%' --매장코드
                </if>
                <if test="storeNm != null and storeNm != ''">
                    AND C.STORE_NM LIKE '%'||#{storeNm}||'%' --매장명
                </if>
                <if test="sysStatFg != null and sysStatFg != ''">
                    AND C.SYS_STAT_FG = #{sysStatFg} --매장상태구분
                </if>
                <if test='storeHqBrandCd != null and storeHqBrandCd != ""'>
                    AND C.HQ_BRAND_CD = #{storeHqBrandCd} -- 선택한 매장브랜드가 있을 때
                </if>
                <if test='storeHqBrandCd == null or storeHqBrandCd == ""'>
                    <if test='userBrands != null and userBrands != ""'>
                        -- 선택한 매장브랜드가 없을 때('전체' 일때), 사용자 관리브랜드에 속한 정보만 조회
                        AND C.HQ_BRAND_CD IN
                        <foreach collection="userBrandList" item="item" open=" (" separator="," close=")" >
                            #{item}
                        </foreach>
                    </if>
                </if>
                ORDER
                   BY C.STORE_CD ASC
    </select>

    <!-- 매장타입관리 - 매장타입조회(콤보박스용) -->
    <!--
        TABLE    : TB_HQ_STORE_TYPE
        PARAM    : storeTypeVO
        COMMENTS : 콤보박스에서 사용할 매장타입을 조회한다.
    -->
    <select id="getStoreTypeCombo" parameterType="storeTypeVO" resultType="DefaultMap">
        /* StoreTypeMapper.getStoreTypeCombo */
        SELECT '' AS VALUE,
                '전체' AS NAME
          FROM DUAL
         UNION
        SELECT STORE_TYPE_CD AS VALUE,
                STORE_TYPE_NM AS NAME
          FROM TB_HQ_STORE_TYPE
         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
         ORDER
            BY VALUE NULLS FIRST
    </select>

    <!-- 매장타입관리 - 매장타입 매장적용 팝업 매장적용 -->
    <!--
        TABLE    : TB_HQ_STORE_TYPE_APP
        PARAM    : storeTypeVO
        COMMENTS : 매장타입 매장적용 시 매장타입적용 관리에 기록한다.
    -->
    <update id="saveStoreTypeApplyStore" parameterType="storeTypeVO">
        /* USE : StoreTypeMapper.saveStoreTypeApplyStore */
        MERGE INTO TB_HQ_STORE_TYPE_APP A
        USING (
              SELECT #{hqOfficeCd} AS HQ_OFFICE_CD,
                      #{storeCd} AS STORE_CD,
                      #{applyDt} AS APPLY_DT,
                      #{applyFg} AS APPLY_FG,
                      #{commentRemark} AS REMARK,
                      #{regDt} AS REG_DT,
                      #{regId} AS REG_ID,
                      #{modDt} AS MOD_DT,
                      #{modId} AS MOD_ID,
                      #{applyProcFg} AS APPLY_PROC_FG
                FROM DUAL
              ) ORG
           ON
            (
              ORG.HQ_OFFICE_CD = A.HQ_OFFICE_CD
              AND ORG.STORE_CD = A.STORE_CD
            )
         WHEN MATCHED THEN
              UPDATE SET
                     A.APPLY_DT = ORG.APPLY_DT,
                     A.APPLY_FG = ORG.APPLY_FG,
                     A.REMARK = ORG.REMARK,
                     A.MOD_DT = ORG.MOD_DT,
                     A.MOD_ID = ORG.MOD_ID,
                     A.APPLY_PROC_FG = ORG.APPLY_PROC_FG
         WHEN NOT MATCHED THEN
              INSERT
              (
                A.HQ_OFFICE_CD,
                A.STORE_CD,
                A.APPLY_DT,
                A.APPLY_FG,
                A.REMARK,
                A.REG_DT,
                A.REG_ID,
                A.MOD_DT,
                A.MOD_ID,
                A.APPLY_PROC_FG
              )
              VALUES
              (
                ORG.HQ_OFFICE_CD,
                ORG.STORE_CD,
                ORG.APPLY_DT,
                ORG.APPLY_FG,
                ORG.REMARK,
                ORG.REG_DT,
                ORG.REG_ID,
                ORG.MOD_DT,
                ORG.MOD_ID,
                ORG.APPLY_PROC_FG
              )
  </update>

    <!-- 매장타입관리 - 메뉴그룹연결 IUD 발생시 매장타입적용 관리에 기록  -->
    <!--
        TABLE    : TB_HQ_STORE_TYPE_STORE, TB_HQ_STORE_TYPE_APP
        PARAM    : storeTypeVO
        COMMENTS : 메뉴그룹 IUD 발생시 매장타입적용 관리에 기록한다.
    -->
    <update id="saveStoreTypeApplyStoreMenuGroup" parameterType="storeTypeVO">
    /* USE : StoreTypeMapper.saveStoreTypeApplyStoreMenuGroup */
        MERGE INTO TB_HQ_STORE_TYPE_APP A
        USING (
                SELECT HQ_OFFICE_CD,
                        STORE_CD,
                        #{regDt} AS APPLY_DT,
                        #{applyFg} AS APPLY_FG,
                        #{commentRemark} AS REMARK,
                        #{regDt} AS REG_DT,
                        #{regId} AS REG_ID,
                        #{modDt} AS MOD_DT,
                        #{modId} AS MOD_ID
                  FROM TB_HQ_STORE_TYPE_STORE
                 WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                    AND STORE_TYPE_CD = #{storeTypeCd}
              ) ORG
           ON
            (
              ORG.HQ_OFFICE_CD = A.HQ_OFFICE_CD
              AND ORG.STORE_CD = A.STORE_CD
            )
         WHEN MATCHED THEN
              UPDATE SET
                     A.APPLY_DT = ORG.APPLY_DT,
                     A.APPLY_FG = ORG.APPLY_FG,
                     A.REMARK = ORG.REMARK,
                     A.MOD_DT = ORG.MOD_DT,
                     A.MOD_ID = ORG.MOD_ID
         WHEN NOT MATCHED THEN
              INSERT
              (
                A.HQ_OFFICE_CD,
                A.STORE_CD,
                A.APPLY_DT,
                A.APPLY_FG,
                A.REMARK,
                A.REG_DT,
                A.REG_ID,
                A.MOD_DT,
                A.MOD_ID
              )
              VALUES
              (
                ORG.HQ_OFFICE_CD,
                ORG.STORE_CD,
                ORG.APPLY_DT,
                ORG.APPLY_FG,
                ORG.REMARK,
                ORG.REG_DT,
                ORG.REG_ID,
                ORG.MOD_DT,
                ORG.MOD_ID
              )
  </update>

    <!-- 매장타입관리 - 상품연결 IUD 발생시 매장타입적용 관리에 기록  -->
    <!--
        TABLE    : TB_HQ_STORE_TYPE_STORE, TB_HQ_STORE_TYPE_PROD_GROUP, TB_HQ_STORE_TYPE_APP
        PARAM    : storeTypeVO
        COMMENTS : 상품연결 IUD 발생시 매장타입적용 관리에 기록한다.
    -->
    <update id="saveStoreTypeApplyStoreProd" parameterType="storeTypeVO">
    /* USE : StoreTypeMapper.saveStoreTypeApplyStoreProd */
        MERGE INTO TB_HQ_STORE_TYPE_APP A
        USING (
                SELECT HQ_OFFICE_CD,
                        STORE_CD,
                        #{regDt} AS APPLY_DT,
                        #{applyFg} AS APPLY_FG,
                        #{commentRemark} AS REMARK,
                        #{regDt} AS REG_DT,
                        #{regId} AS REG_ID,
                        #{modDt} AS MOD_DT,
                        #{modId} AS MOD_ID
                  FROM TB_HQ_STORE_TYPE_STORE
                 WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                   AND STORE_TYPE_CD IN (  SELECT STORE_TYPE_CD
                                              FROM TB_HQ_STORE_TYPE_PROD_GROUP
                                             WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                                               AND STORE_GROUP_CD = #{storeGroupCd}
                                         )
              ) ORG
           ON
            (
              ORG.HQ_OFFICE_CD = A.HQ_OFFICE_CD
              AND ORG.STORE_CD = A.STORE_CD
            )
         WHEN MATCHED THEN
              UPDATE SET
                     A.APPLY_DT = ORG.APPLY_DT,
                     A.APPLY_FG = ORG.APPLY_FG,
                     A.REMARK = ORG.REMARK,
                     A.MOD_DT = ORG.MOD_DT,
                     A.MOD_ID = ORG.MOD_ID
         WHEN NOT MATCHED THEN
              INSERT
              (
                A.HQ_OFFICE_CD,
                A.STORE_CD,
                A.APPLY_DT,
                A.APPLY_FG,
                A.REMARK,
                A.REG_DT,
                A.REG_ID,
                A.MOD_DT,
                A.MOD_ID
              )
              VALUES
              (
                ORG.HQ_OFFICE_CD,
                ORG.STORE_CD,
                ORG.APPLY_DT,
                ORG.APPLY_FG,
                ORG.REMARK,
                ORG.REG_DT,
                ORG.REG_ID,
                ORG.MOD_DT,
                ORG.MOD_ID
              )
  </update>

    <!-- 매장타입관리 - 메뉴그룹조회(콤보박스용) -->
    <!--
        TABLE    : TB_HQ_STORE_PROD_GROUP
        PARAM    : storeTypeVO
        COMMENTS : 콤보박스에서 사용할 메뉴그룹을 조회한다.
    -->
    <select id="getStoreGroupCombo" parameterType="storeTypeVO" resultType="DefaultMap">
        /* StoreTypeMapper.getStoreGroupCombo */
        SELECT '' AS VALUE,
                '전체' AS NAME
          FROM DUAL
         UNION
        SELECT STORE_GROUP_CD AS VALUE,
                STORE_GROUP_NM AS NAME
          FROM TB_HQ_STORE_PROD_GROUP
         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
         ORDER
            BY VALUE NULLS FIRST
    </select>

    <!-- 매장타입관리 - 매장타입 매장적용 팝업 매장적용 시 본사상품 > 매장등록 PKG 호출   -->
    <!--
        PARAM    : storeTypeVO
        COMMENTS : 매장타입 매장적용 시 본사상품 > 매장등록 PKG를 호출한다.
    -->
    <select id="insertHqProductToStore" statementType="CALLABLE"  parameterType="storeTypeVO" resultType="String">
        /* USE : StoreTypeMapper.insertHqProductToStore   */
        {
            CALL PKG_HQ_STORE_TYPE_APP.SP_HQ_STORE_TYPE_APP_IU
          (
            #{hqOfficeCd},
            #{storeCd},
            #{applyFg},
            #{regId},
            #{result, mode=OUT, jdbcType=VARCHAR}
          )
        }
    </select>

    <!-- 매장타입관리 - 매장타입 매장적용 팝업 매장적용 시 본사 상품 > 매장 등록 > 가격 처리 PKG 호출   -->
    <!--
        PARAM    : storeTypeVO
        COMMENTS : 매장타입 매장적용 시 본사 상품 > 매장 등록 > 가격 처리 PKG를 호출한다.
    -->
    <select id="insertHqProductSalePriceToStore" statementType="CALLABLE"  parameterType="storeTypeVO" resultType="String">
        /* USE : StoreTypeMapper.insertHqProductSalePriceToStore   */
        {
            CALL PKG_HQ_STORE_TYPE_APP.SP_HQ_STORE_TYPE_APP_SALE_PRICE_IU
          (
            #{hqOfficeCd},
            #{storeCd},
            #{regId},
            #{result, mode=OUT, jdbcType=VARCHAR}
          )
        }
    </select>

    <!-- 매장타입관리 - 매장타입적용관리 테이블 조회하여 본사상품 > 매장등록 PKG 호출 (스케쥴러에서 사용, PKG_HQ_STORE_TYPE_APP_ALL -> PKG_HQ_STORE_TYPE_APP 호출) -->
    <!--
        PARAM    : storeTypeVO
        COMMENTS : 매장타입적용관리 테이블을 조회하여 본사상품 > 조회된 매장에 등록한다.
    -->
    <select id="insertHqProductToStoreAll" statementType="CALLABLE"  parameterType="storeTypeVO" resultType="String">
        /* USE : StoreTypeMapper.insertHqProductToStoreAll   */
        {
            CALL PKG_HQ_STORE_TYPE_APP_ALL.SP_HQ_STORE_TYPE_APP_ALL_IU
          (
            #{result, mode=OUT, jdbcType=VARCHAR}
          )
        }
    </select>

    <!-- 매장타입관리 - 매장타입적용관리 테이블 조회하여 본사상품 > 매장등록 PKG 호출 (즉시처리, PKG_HQ_STORE_TYPE_APP_ALL2 -> PKG_HQ_STORE_TYPE_APP 호출) -->
    <!--
        PARAM    : storeTypeVO
        COMMENTS : 매장타입적용관리 테이블을 조회하여 본사상품 > 조회된 매장에 등록한다.(즉시처리)
    -->
    <select id="insertHqProductToStoreAll2" statementType="CALLABLE"  parameterType="storeTypeVO" resultType="String">
        /* USE : StoreTypeMapper.insertHqProductToStoreAll2   */
        {
            CALL PKG_HQ_STORE_TYPE_APP_ALL2.SP_HQ_STORE_TYPE_APP_ALL_IU
          (
            #{result, mode=OUT, jdbcType=VARCHAR}
          )
        }
    </select>

    <!-- 매장타입관리 - 매장타입변경이력조회 -->
    <!--
        TABLE    : TB_LG_HQ_STORE_TYPE_LOG
        PARAM    : storeTypeVO
        COMMENTS : 매장타입변경이력을 조회한다.
    -->
    <select id="getStoreTypeChgHist" parameterType="storeTypeVO" resultType="DefaultMap">
        /* StoreTypeMapper.getStoreTypeChgHist */
        SELECT TO_CHAR(TO_DATE(A.PROC_DT ,'YYYYMMDDhh24miss'), 'YYYY/MM/DD hh24:mi:ss') AS PROC_DT,
                A.PROC_FG,
                A.STORE_TYPE_CD,
                A.STORE_TYPE_NM,
                A.B_STORE_TYPE_NM,
                A.REMARK,
                A.B_REMARK,
                A.OPTION01,
                A.B_OPTION01,
                A.USE_YN,
                A.B_USE_YN,
                A.REG_DT,
                A.B_REG_DT,
                A.REG_ID,
                A.B_REG_ID,
                A.MOD_DT,
                A.B_MOD_DT,
                A.MOD_ID,
                A.B_MOD_ID
          FROM TB_LG_HQ_STORE_TYPE_LOG A
         WHERE A.HQ_OFFICE_CD = #{hqOfficeCd}
           AND A.PROC_DT BETWEEN #{startDate} || '000000' AND #{endDate} || '999999'
        <if test="storeTypeCd != null and storeTypeCd != ''">
           AND A.STORE_TYPE_CD LIKE '%' || #{storeTypeCd} || '%'
        </if>
        <if test="storeTypeNm != null and storeTypeNm != ''">
           AND A.STORE_TYPE_NM LIKE '%' || #{storeTypeNm} || '%'
        </if>
        <if test="procFg != null and procFg != ''">
           AND A.PROC_FG = #{procFg}
        </if>
         ORDER
            BY A.PROC_DT DESC
    </select>

    <!-- 매장타입관리 - 메뉴그룹변경이력조회 -->
    <!--
        TABLE    :
        PARAM    : storeTypeVO
        COMMENTS : 메뉴그룹변경이력조회 조회한다.
    -->
    <select id="getMenuGroupChgHist" parameterType="storeTypeVO" resultType="DefaultMap">
        /* StoreTypeMapper.getMenuGroupChgHist */
        SELECT TO_CHAR(TO_DATE(A.PROC_DT ,'YYYYMMDDhh24miss'), 'YYYY/MM/DD hh24:mi:ss') AS PROC_DT,
                A.PROC_FG,
                A.STORE_GROUP_CD,
                B.STORE_GROUP_NM,
                A.REMARK,
                A.B_REMARK,
                A.OPTION01,
                A.B_OPTION01,
                A.USE_YN,
                A.B_USE_YN,
                A.REG_DT,
                A.B_REG_DT,
                A.REG_ID,
                A.B_REG_ID,
                A.MOD_DT,
                A.B_MOD_DT,
                A.MOD_ID,
                A.B_MOD_ID
          FROM TB_LG_HQ_STORE_PROD_GROUP_LOG A,
                TB_HQ_STORE_PROD_GROUP B
         WHERE A.HQ_OFFICE_CD = #{hqOfficeCd}
           AND A.PROC_DT BETWEEN #{startDate} || '000000' AND #{endDate} || '999999'
           AND A.HQ_OFFICE_CD = B.HQ_OFFICE_CD
           AND A.STORE_GROUP_CD = B.STORE_GROUP_CD
        <if test="storeGroupCd != null and storeGroupCd != ''">
            AND A.STORE_GROUP_CD LIKE '%' || #{storeGroupCd} || '%'
        </if>
        <if test="storeGroupNm != null and storeGroupNm != ''">
            AND B.STORE_GROUP_NM LIKE '%' || #{storeGroupNm} || '%'
        </if>
        <if test="procFg != null and procFg != ''">
            AND A.PROC_FG = #{procFg}
        </if>
        ORDER
            BY A.PROC_DT DESC
    </select>

    <!-- 매장적용이력 탭 - 조회 -->
    <!--
        TABLE    :
        COMMENTS :
    -->
    <select id="getStoreApplyChgHistList" parameterType="storeTypeVO" resultType="DefaultMap">
        /* StoreTypeMapper.getStoreApplyChgHistList */
        <include refid="CmmSQL.PagingTemplateHeader"/>
        SELECT
        A.STORE_TYPE_CD,
        (SELECT STORE_TYPE_NM FROM TB_HQ_STORE_TYPE WHERE HQ_OFFICE_CD = A.HQ_OFFICE_CD AND STORE_TYPE_CD = A.STORE_TYPE_CD) AS STORE_TYPE_NM,
        A.STORE_GROUP_CD,
        C.STORE_GROUP_NM,
        A.STORE_CD,
        (SELECT STORE_NM FROM TB_MS_STORE WHERE HQ_OFFICE_CD = A.HQ_OFFICE_CD AND STORE_CD = A.STORE_CD) AS STORE_NM,
        A.PROC_DT,
        TO_CHAR(TO_DATE(A.PROC_DT ,'YYYYMMDDhh24miss'), 'YYYY/MM/DD hh24:mi:ss') AS CHG_PROC_DT,
        A.MOD_ID,
        A.APPLY_PROC_FG,
        (CASE WHEN A.APPLY_PROC_FG IN ('1', '2', '3')
                    THEN (CASE A.B_APPLY_PROC_FG WHEN '0' THEN '매장적용요청(예약)' WHEN '1' THEN '적용완료' WHEN '2' THEN '적용오류' WHEN '3' THEN '적용취소' WHEN '5' THEN '매장적용요청(즉시)' ELSE '' END)
                    || ' -> ' || (CASE A.APPLY_PROC_FG WHEN '0' THEN '매장적용요청(예약)' WHEN '1' THEN '적용완료' WHEN '2' THEN '적용오류' WHEN '3' THEN '적용취소' WHEN '5' THEN '매장적용요청(즉시)' ELSE '' END)
                ELSE '' END
        ) AS APPLY_INFO,
        (SELECT NVL2(MAX(STORE_CD), 'Y', 'N') FROM TB_HQ_STORE_TYPE_APP WHERE HQ_OFFICE_CD = A.HQ_OFFICE_CD AND STORE_CD = A.STORE_CD AND MOD_DT = A.MOD_DT AND APPLY_PROC_FG = '0') AS APPLY_PROC_FG_YN
        <include refid="CmmSQL.PagingTemplateCount"/>
        FROM TB_LG_HQ_STORE_TYPE_APP_LOG A,
        TB_MS_STORE tms,
        (
            SELECT
            AB.HQ_OFFICE_CD, AB.STORE_CD, AB.PROC_DT, AB.STORE_TYPE_CD,
            LISTAGG(AB.STORE_GROUP_CD, ',') WITHIN GROUP (ORDER BY AB.STORE_GROUP_CD) AS STORE_GROUP_CD,
            LISTAGG(AB.STORE_GROUP_NM, ',') WITHIN GROUP (ORDER BY AB.STORE_GROUP_NM) AS STORE_GROUP_NM
            FROM
            (
                SELECT A.HQ_OFFICE_CD, A.STORE_GROUP_CD, A.STORE_GROUP_NM, B.STORE_CD, B.PROC_DT, B.STORE_TYPE_CD
                FROM
                (
                    SELECT HQ_OFFICE_CD, STORE_GROUP_CD, STORE_GROUP_NM
                    FROM TB_HQ_STORE_PROD_GROUP
                    WHERE 1=1
                    AND HQ_OFFICE_CD = #{hqOfficeCd}
                ) A
                INNER JOIN
                (
                    SELECT
                    HQ_OFFICE_CD,
                    STORE_GROUP_CD AS STORE_GROUP_CD_LIST,
                    STORE_CD,
                    PROC_DT,
                    STORE_TYPE_CD
                    FROM TB_LG_HQ_STORE_TYPE_APP_LOG
                    WHERE 1=1
                    AND HQ_OFFICE_CD = #{hqOfficeCd}
                    <if test='storeCds != null and storeCds != ""'>
                        AND
                        <foreach collection="storeCdList" item="item" open="(" separator="OR" close=")" >
                            STORE_CD = #{item}
                        </foreach>
                    </if>
                    AND PROC_DT BETWEEN #{startDate} || '000000' AND #{endDate} || '999999'
                    <if test='storeTypeCd != null and storeTypeCd != ""'>
                        AND STORE_TYPE_CD = #{storeTypeCd}
                    </if>
                    <if test='storeGroupCd != null and storeGroupCd != ""'>
                        AND STORE_GROUP_CD = #{storeGroupCd}
                    </if>
                ) B
                ON A.HQ_OFFICE_CD = B.HQ_OFFICE_CD
                WHERE 1=1
                AND A.STORE_GROUP_CD IN (
                                            SELECT TRIM(REGEXP_SUBSTR(B.STORE_GROUP_CD_LIST,'[^,]+',1,LEVEL)) AS  LIST_TO_ROW
                                            FROM DUAL
                                            CONNECT BY INSTR(B.STORE_GROUP_CD_LIST, ',', 1, LEVEL-1 ) > 0
                                        )
            ) AB
            GROUP BY AB.HQ_OFFICE_CD, AB.STORE_CD, AB.PROC_DT, AB.STORE_TYPE_CD
        ) C
        WHERE 1=1
        AND A.HQ_OFFICE_CD = #{hqOfficeCd}
        <if test='storeCds != null and storeCds != ""'>
            AND
            <foreach collection="storeCdList" item="item" open="(" separator="OR" close=")" >
                A.STORE_CD = #{item}
            </foreach>
        </if>
        AND A.PROC_DT BETWEEN #{startDate} || '000000' AND #{endDate} || '999999'
        <if test='storeTypeCd != null and storeTypeCd != ""'>
            AND A.STORE_TYPE_CD = #{storeTypeCd}
        </if>
        <if test='storeGroupCd != null and storeGroupCd != ""'>
            AND A.STORE_GROUP_CD = #{storeGroupCd}
        </if>
        <if test='storeHqBrandCd != null and storeHqBrandCd != ""'>
            AND tms.HQ_BRAND_CD = #{storeHqBrandCd} -- 선택한 매장브랜드가 있을 때
        </if>
        <if test='storeHqBrandCd == null or storeHqBrandCd == ""'>
            <if test='userBrands != null and userBrands != ""'>
                -- 선택한 매장브랜드가 없을 때('전체' 일때), 사용자 관리브랜드에 속한 정보만 조회
                AND tms.HQ_BRAND_CD IN
                <foreach collection="userBrandList" item="item" open=" (" separator="," close=")" >
                    #{item}
                </foreach>
            </if>
        </if>
        AND C.HQ_OFFICE_CD (+)= A.HQ_OFFICE_CD
        AND C.STORE_CD (+)= A.STORE_CD
        AND C.PROC_DT (+)= A.PROC_DT
        AND C.STORE_TYPE_CD (+)= A.STORE_TYPE_CD
        AND tms.HQ_OFFICE_CD = A.HQ_OFFICE_CD
        AND tms.STORE_CD = A.STORE_CD
        ORDER BY A.PROC_DT DESC
        <include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <!-- 매장적용이력 탭 - 취소 update -->
    <!--
        TABLE    :
        COMMENTS :
    -->
    <update id="getStoreApplyChgHistSaveUpdate" parameterType="storeTypeVO">
        /* StoreTypeMapper.getStoreApplyChgHistSaveUpdate */
        UPDATE
        TB_HQ_STORE_TYPE_APP
        SET
        APPLY_PROC_FG = '3',
        APPLY_PROC_REMARK = '적용취소',
        MOD_DT = #{modDt},
        MOD_ID = #{modId}
        WHERE 1=1
        AND HQ_OFFICE_CD = #{hqOfficeCd}
        AND STORE_CD = #{storeCd}
    </update>

    <!-- 매장적용이력 상세 팝업 - 조회 -->
    <!--
        TABLE    :
        COMMENTS :
    -->
    <select id="getStoreApplyChgHistDtlList" parameterType="storeTypeVO" resultType="DefaultMap">
        /* StoreTypeMapper.getStoreApplyChgHistDtlList */
        SELECT
        A.STORE_TYPE_CD,
        (SELECT STORE_TYPE_NM FROM TB_HQ_STORE_TYPE WHERE HQ_OFFICE_CD = A.HQ_OFFICE_CD AND STORE_TYPE_CD = A.STORE_TYPE_CD) AS STORE_TYPE_NM,
        A.STORE_GROUP_CD,
        C.STORE_GROUP_NM,
        B.PROD_CD,
        B.PROD_NM,
        B.SALE_UPRC,
        B.STIN_SALE_UPRC,
        B.DLVR_SALE_UPRC,
        B.PACK_SALE_UPRC,
        A.PROC_DT,
        TO_CHAR(TO_DATE(A.PROC_DT ,'YYYYMMDDhh24miss'), 'YYYY/MM/DD hh24:mi:ss') AS CHG_PROC_DT,
        A.MOD_ID,
        A.APPLY_PROC_FG
        FROM TB_LG_HQ_STORE_TYPE_APP_LOG A,
        (
            SELECT
            thspgd.HQ_OFFICE_CD,
            thspgd.STORE_GROUP_CD,
            thspgd.PROD_CD,
            thp.PROD_NM,
            thspgd.SALE_UPRC,
            thspgd.STIN_SALE_UPRC,
            thspgd.DLVR_SALE_UPRC,
            thspgd.PACK_SALE_UPRC
            FROM TB_HQ_STORE_PROD_GROUP_DTL thspgd,
            TB_HQ_PRODUCT thp
            WHERE thspgd.HQ_OFFICE_CD = #{hqOfficeCd}
            AND thspgd.USE_YN = 'Y'
            AND thp.HQ_OFFICE_CD = thspgd.HQ_OFFICE_CD
            AND thp.PROD_CD = thspgd.PROD_CD
            AND (
                    ( ((SELECT COUNT(HQ_BRAND_CD) FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId}) != 0) AND (thp.HQ_BRAND_CD IN (SELECT HQ_BRAND_CD FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId})) )
                    OR
                    ( ((SELECT COUNT(HQ_BRAND_CD) FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId}) = 0) AND 1=1 )
                )
            ORDER BY thspgd.PROD_CD ASC
        ) B,
        (
            SELECT
            AB.HQ_OFFICE_CD, AB.STORE_CD, AB.PROC_DT, AB.STORE_TYPE_CD,
            LISTAGG(AB.STORE_GROUP_CD, ',') WITHIN GROUP (ORDER BY AB.STORE_GROUP_CD) AS STORE_GROUP_CD,
            LISTAGG(AB.STORE_GROUP_NM, ',') WITHIN GROUP (ORDER BY AB.STORE_GROUP_NM) AS STORE_GROUP_NM
            FROM
            (
                SELECT A.HQ_OFFICE_CD, A.STORE_GROUP_CD, A.STORE_GROUP_NM, B.STORE_CD, B.PROC_DT, B.STORE_TYPE_CD
                FROM
                (
                    SELECT HQ_OFFICE_CD, STORE_GROUP_CD, STORE_GROUP_NM
                    FROM TB_HQ_STORE_PROD_GROUP
                    WHERE 1=1
                    AND HQ_OFFICE_CD = #{hqOfficeCd}
                ) A
                INNER JOIN
                (
                    SELECT
                    HQ_OFFICE_CD,
                    STORE_GROUP_CD AS STORE_GROUP_CD_LIST,
                    STORE_CD,
                    PROC_DT,
                    STORE_TYPE_CD
                    FROM TB_LG_HQ_STORE_TYPE_APP_LOG
                    WHERE 1=1
                    AND HQ_OFFICE_CD = #{hqOfficeCd}
                    AND STORE_CD = #{storeCd}
                    AND PROC_DT = #{procDt}
                    AND STORE_TYPE_CD = #{storeTypeCd}
                ) B
                ON A.HQ_OFFICE_CD = B.HQ_OFFICE_CD
                WHERE 1=1
                AND A.STORE_GROUP_CD IN (
                                            SELECT TRIM(REGEXP_SUBSTR(B.STORE_GROUP_CD_LIST,'[^,]+',1,LEVEL)) AS  LIST_TO_ROW
                                            FROM DUAL
                                            CONNECT BY INSTR(B.STORE_GROUP_CD_LIST, ',', 1, LEVEL-1 ) > 0
                                        )
            ) AB
            GROUP BY AB.HQ_OFFICE_CD, AB.STORE_CD, AB.PROC_DT, AB.STORE_TYPE_CD
        ) C
        WHERE 1=1
        AND A.HQ_OFFICE_CD = #{hqOfficeCd}
        AND A.STORE_CD = #{storeCd}
        AND A.PROC_DT = #{procDt}
        AND A.STORE_TYPE_CD = #{storeTypeCd}
        AND B.HQ_OFFICE_CD (+)= A.HQ_OFFICE_CD
        AND B.STORE_GROUP_CD (+)= A.STORE_GROUP_CD
        AND C.HQ_OFFICE_CD (+)= A.HQ_OFFICE_CD
        AND C.STORE_CD (+)= A.STORE_CD
        AND C.PROC_DT (+)= A.PROC_DT
        AND C.STORE_TYPE_CD (+)= A.STORE_TYPE_CD
        ORDER BY A.PROC_DT DESC
    </select>

</mapper>