<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.solbipos.iostock.order.storeOrder.service.impl.StoreOrderMapper">

    <!-- 주문등록 HD 리스트 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : storeOrderVO
        COMMENTS : 주문등록 HD 리스트를 조회한다.
    -->
    <select id="getStoreOrderList" parameterType="storeOrderVO" resultType="DefaultMap">
        /* USE : storeOrderMapper.getStoreOrderList */
        <![CDATA[
        SELECT   tphso.REQ_DATE, tphso.STORE_CD
        ,        tphso.DTL_CNT, tphso.PROC_FG, tphso.REMARK
        ,        tphso.SLIP_FG, tphso.MOD_DT
        ,        tphso.ORDER_TOT_QTY*tphso.SLIP_FG AS ORDER_TOT_QTY
        ,        tphso.ORDER_AMT*tphso.SLIP_FG     AS ORDER_AMT
        ,        tphso.ORDER_VAT*tphso.SLIP_FG     AS ORDER_VAT
        ,        tphso.ORDER_TOT*tphso.SLIP_FG     AS ORDER_TOT
        ,        tphso.MD_TOT_QTY*tphso.SLIP_FG    AS MD_TOT_QTY
        ,        tphso.MD_AMT*tphso.SLIP_FG        AS MD_AMT
        ,        tphso.MD_VAT*tphso.SLIP_FG        AS MD_VAT
        ,        tphso.MD_TOT*tphso.SLIP_FG        AS MD_TOT
        FROM     TB_PO_HQ_STORE_ORDER tphso
        WHERE    tphso.STORE_CD   =   #{storeCd}
        ]]>
        <if test='dateFg == "req"'>
          AND tphso.REQ_DATE BETWEEN #{startDate} AND #{endDate}
        </if>
        <if test='dateFg == "reg"'>
            AND tphso.REG_DT BETWEEN #{startDate}||'000000' AND #{endDate}||'235959'
        </if>
        <if test='dateFg == "mod"'>
            AND tphso.MOD_DT BETWEEN #{startDate}||'000000' AND #{endDate}||'235959'
        </if>
        <if test='slipFg != null and slipFg != ""'>
            AND tphso.SLIP_FG = #{slipFg}
        </if>
        <if test='procFg != null and procFg != ""'>
            AND tphso.PROC_FG = #{procFg}
        </if>
        ORDER BY tphso.REQ_DATE DESC
    </select>

    <!-- 주문등록 DT 리스트 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL, TB_MS_PRODUCT, TB_HQ_ENVST
        PARAM    : storeOrderDtlVO
        COMMENTS : 주문등록 DT 리스트를 조회한다.
    -->
    <select id="getStoreOrderDtlList" parameterType="storeOrderDtlVO" resultType="DefaultMap">
        /* USE : storeOrderMapper.getStoreOrderDtlList */
        <![CDATA[
        SELECT  tphso.PROD_CD, tmp.PROD_NM, tphso.PO_UNIT_FG, tphso.PO_UNIT_QTY, tmp.PO_UNIT_ALLOW_FG
        ,       tphso.SLIP_FG, tphso.REMARK, tphso.ORDER_SPLY_UPRC, tmp.PO_MIN_QTY
        ,       TO_NUMBER(DECODE(tphso.ORDER_TOT_QTY , 0, NULL, tphso.ORDER_TOT_QTY *tphso.SLIP_FG)) AS PREV_ORDER_TOT_QTY
        ,       TO_NUMBER(DECODE(tphso.ORDER_UNIT_QTY, 0, NULL, tphso.ORDER_UNIT_QTY*tphso.SLIP_FG)) AS ORDER_UNIT_QTY
        ,       TO_NUMBER(DECODE(tphso.ORDER_ETC_QTY , 0, NULL, tphso.ORDER_ETC_QTY *tphso.SLIP_FG)) AS ORDER_ETC_QTY
        ,       TO_NUMBER(DECODE(tphso.ORDER_TOT_QTY , 0, NULL, tphso.ORDER_TOT_QTY *tphso.SLIP_FG)) AS ORDER_TOT_QTY
        ,       tphso.ORDER_AMT*tphso.SLIP_FG AS ORDER_AMT
        ,       tphso.ORDER_VAT*tphso.SLIP_FG AS ORDER_VAT
        ,       tphso.ORDER_TOT*tphso.SLIP_FG AS ORDER_TOT
        ,       tphso.ORDER_TOT*tphso.SLIP_FG AS PREV_ORDER_TOT
        ,       DECODE(tmp.VAT_FG, '1', 1, 0) AS VAT_FG01
        ,       the.ENVST_VAL AS ENVST0011
        FROM    TB_PO_HQ_STORE_ORDER_DTL tphso
        ,       TB_MS_PRODUCT tmp
        ,       TB_HQ_ENVST the
        WHERE   tphso.REQ_DATE      =   #{reqDate}
        AND     tphso.STORE_CD      =   #{storeCd}
        AND     tphso.SLIP_FG       =   #{slipFg}
        AND     tmp.STORE_CD        =   tphso.STORE_CD
        AND     tmp.PROD_CD         =   tphso.PROD_CD
        AND     the.HQ_OFFICE_CD    =   #{hqOfficeCd}
        AND     the.ENVST_CD        =   '0011'
        ORDER
        BY      tphso.PROD_CD
        ]]>
    </select>

    <!-- 주문등록 상품추가 리스트 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL, TB_MS_PRODUCT, TB_HQ_ENVST
        PARAM    : storeOrderDtlVO
        COMMENTS : 주문등록 상품추가 리스트를 조회한다.
    -->
    <select id="getStoreOrderRegistList" parameterType="storeOrderDtlVO" resultType="DefaultMap">
        /* USE : storeOrderMapper.getStoreOrderRegistList */
        <include refid="CmmSQL.PagingTemplateHeader"/>
        <![CDATA[
        SELECT  tmp.PROD_CD
        ,       tmp.PROD_NM
        ,       DECODE(tmp.VAT_FG, '1', 1, 0) AS VAT_FG01
        ,       TRUNC(DECODE(SIGN(tshsc.CURR_QTY),-1,0,tshsc.CURR_QTY) / tmp.PO_UNIT_QTY) AS HD_CUR_UNIT_QTY
        ,       MOD  (DECODE(SIGN(tshsc.CURR_QTY),-1,0,tshsc.CURR_QTY) , tmp.PO_UNIT_QTY) AS HD_CUR_ETC_QTY
        ,       TRUNC(NVL(tsssc.CURR_QTY,0)                            / tmp.PO_UNIT_QTY) AS STORE_CUR_UNIT_QTY
        ,       MOD  (NVL(tsssc.CURR_QTY,0)                            , tmp.PO_UNIT_QTY) AS STORE_CUR_ETC_QTY
        ,		NVL((SELECT MAX(SALE_UPRC) KEEP(DENSE_RANK FIRST ORDER BY REG_DT DESC)
                              FROM TB_MS_PRODUCT_SALE_PRICE
                             WHERE STORE_CD = tmp.STORE_CD
                               AND PROD_CD = tmp.PROD_CD
                               AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN START_DATE AND END_DATE
                            ), 0) AS SALE_UPRC
        , 		tmp.SPLY_UPRC AS ORDER_SPLY_UPRC
        ,       tmp.PO_MIN_QTY
        ,       tmp.PO_UNIT_ALLOW_FG
        ,       tmp.PO_PROD_FG
        ,       tmp.USE_YN
        ,       tmp.PO_UNIT_FG
        ,       tmp.PO_UNIT_QTY
        ,       the.ENVST_VAL AS ENVST0011
        ,       tmp.SAFE_STOCK_QTY
        ,       TRUNC(DECODE(SIGN(tmp.SAFE_STOCK_QTY),-1,0,tmp.SAFE_STOCK_QTY) / tmp.PO_UNIT_QTY) AS SAFE_STOCK_UNIT_QTY
        ,       MOD  (DECODE(SIGN(tmp.SAFE_STOCK_QTY),-1,0,tmp.SAFE_STOCK_QTY) , tmp.PO_UNIT_QTY) AS SAFE_STOCK_ETC_QTY
        ,       TO_NUMBER(DECODE(tphso.ORDER_UNIT_QTY, 0, NULL, tphso.ORDER_UNIT_QTY*tphso.SLIP_FG)) AS PREV_ORDER_UNIT_QTY
        ,       TO_NUMBER(DECODE(tphso.ORDER_ETC_QTY,  0, NULL, tphso.ORDER_ETC_QTY*tphso.SLIP_FG )) AS PREV_ORDER_ETC_QTY
        ,       TO_NUMBER(DECODE(tphso.ORDER_TOT_QTY,  0, NULL, tphso.ORDER_TOT_QTY*tphso.SLIP_FG )) AS PREV_ORDER_TOT_QTY
        ,       TO_NUMBER(DECODE(tphso.ORDER_AMT    ,  0, NULL, tphso.ORDER_AMT*tphso.SLIP_FG     )) AS ORDER_AMT
        ,       TO_NUMBER(DECODE(tphso.ORDER_VAT    ,  0, NULL, tphso.ORDER_VAT*tphso.SLIP_FG     )) AS ORDER_VAT
        ,       TO_NUMBER(DECODE(tphso.ORDER_TOT    ,  0, NULL, tphso.ORDER_TOT*tphso.SLIP_FG     )) AS ORDER_TOT
        ,       TO_NUMBER(DECODE(tphso.ORDER_TOT    ,  0, NULL, tphso.ORDER_TOT*tphso.SLIP_FG     )) AS PREV_ORDER_TOT
        ]]>
        <if test='option2 != null and option2 != ""'>
            , SF_ZERO_TO_NULL(optionTb.ORDER_UNIT_QTY) AS ORDER_UNIT_QTY
            , SF_ZERO_TO_NULL(optionTb.ORDER_ETC_QTY) AS ORDER_ETC_QTY
            , SF_ZERO_TO_NULL(optionTb.ORDER_TOT_QTY) AS ORDER_TOT_QTY
        </if>
        <include refid="CmmSQL.PagingTemplateCount"/>

        FROM    TB_MS_PRODUCT tmp
        ,       TB_ST_STORE_STOCK_CUR tsssc
        ,       (   SELECT  PROD_CD, CURR_QTY
                    FROM    TB_ST_HQ_STOCK_CUR
                    WHERE   HQ_OFFICE_CD  =   #{hqOfficeCd}
                    AND     STORAGE_CD    =   '999'
                )   tshsc
        ,       TB_PO_HQ_STORE_ORDER_DTL tphso
        ,       TB_HQ_ENVST the

        <if test='option2 == "ORD"'>
            ,   (   SELECT  tphsod.PROD_CD
                    ,       TRUNC(SUM(tphsod.ORDER_TOT_QTY) / tphsod.PO_UNIT_QTY) AS ORDER_UNIT_QTY
                    ,       MOD  (SUM(tphsod.ORDER_TOT_QTY) , tphsod.PO_UNIT_QTY) AS ORDER_ETC_QTY
                    ,       SUM(tphsod.ORDER_TOT_QTY) AS ORDER_TOT_QTY
                    FROM    TB_PO_HQ_STORE_ORDER_DTL tphsod
                    WHERE   tphsod.STORE_CD = #{storeCd}
                    AND     tphsod.REQ_DATE BETWEEN #{startDate} AND #{endDate}
                    GROUP
                    BY      tphsod.PROD_CD, tphsod.PO_UNIT_QTY
                ) optionTb
        </if>
        <if test='option2 == "OUT"'>
            ,   (   SELECT  tphsod.PROD_CD
                    ,       TRUNC(SUM(tphsod.ORDER_TOT_QTY) / tphsod.PO_UNIT_QTY) AS ORDER_UNIT_QTY
                    ,       MOD  (SUM(tphsod.ORDER_TOT_QTY) , tphsod.PO_UNIT_QTY) AS ORDER_ETC_QTY
                    ,       SUM(tphsod.ORDER_TOT_QTY) AS ORDER_TOT_QTY
                    FROM    TB_PO_HQ_STORE_OUTSTOCK tphso
                    ,       TB_PO_HQ_STORE_OUTSTOCK_DTL tphsod
                    WHERE   tphso.STORE_CD = #{storeCd}
                    AND     tphso.OUT_DATE      BETWEEN #{startDate} AND #{endDate}
                    AND     tphso.PROC_FG       IN ('20', '30')
                    AND     tphsod.HQ_OFFICE_CD = tphso.HQ_OFFICE_CD
                    AND     tphsod.SLIP_NO      = tphso.SLIP_NO
                    GROUP
                    BY      tphsod.PROD_CD, tphsod.PO_UNIT_QTY
                ) optionTb
        </if>
        <if test='option2 == "SALE"'>
            ,   (   SELECT  tsdp.PROD_CD
                    ,       TRUNC(SUM(tsdp.TOT_SALE_QTY) / tmp.PO_UNIT_QTY) AS ORDER_UNIT_QTY
                    ,       MOD  (SUM(tsdp.TOT_SALE_QTY) , tmp.PO_UNIT_QTY) AS ORDER_ETC_QTY
                    ,       SUM(tsdp.TOT_SALE_QTY) AS ORDER_TOT_QTY
                    FROM    TB_SL_DAILY_PROD tsdp
                    ,       TB_MS_PRODUCT tmp
                    WHERE   tsdp.STORE_CD   = #{storeCd}
                    AND     tsdp.SALE_DATE  BETWEEN #{startDate} AND #{endDate}
                    AND     tmp.PROD_CD  = tsdp.PROD_CD
                    GROUP
                    BY      tsdp.PROD_CD, tmp.PO_UNIT_QTY
                ) optionTb
        </if>
        WHERE   tmp.STORE_CD          =   #{storeCd}
        AND     tmp.USE_YN            =   'Y'
        AND     tmp.PO_PROD_FG        IN  ('1','3')			<!-- 발주상품구분 092 - 1:발주 및 판매상품, 2:발주전용상품, 3:판매전용상품, 4:사입전용상품, 9:발주 및 판매불가 -->
        AND     tsssc.STORE_CD    (+) =   tmp.STORE_CD
        AND     tsssc.PROD_CD     (+) =   tmp.PROD_CD
        AND     tsssc.STORAGE_CD  (+) =   '999'				<!-- 000:매대, 001:대표창고, 999:전체 재고용 창고  -->
        AND     tshsc.PROD_CD     (+) =   tmp.PROD_CD
        AND     tphso.REQ_DATE    (+) =   #{reqDate}
        AND     tphso.STORE_CD    (+) =   tmp.STORE_CD
        AND     tphso.PROD_CD     (+) =   tmp.PROD_CD
        AND     tphso.SLIP_FG     (+) =   #{slipFg}
        AND     the.HQ_OFFICE_CD      =   #{hqOfficeCd}
        AND     the.ENVST_CD          =   '0011'
        AND     TMP.PROD_CD NOT IN  (SELECT PROD_CD FROM TB_PO_HQ_STORE_DISTRIBUTE WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND REQ_DATE = #{reqDate} AND PROC_FG IN ('20','30') AND SLIP_FG = 1)
        <if test='prodCd != null and prodCd != ""'>
            AND tmp.PROD_CD = #{prodCd}
        </if>
        <if test='prodNm != null and prodNm != ""'>
            AND tmp.PROD_NM LIKE '%'||#{prodNm}||'%'
        </if>
        <if test="barcdCd != null and barcdCd != ''">
            AND tmp.PROD_CD IN  ( SELECT  tmpb.PROD_CD
                                  FROM    TB_MS_PRODUCT_BARCD tmpb
                                  WHERE   tmpb.STORE_CD  = #{storeCd}
                                  AND     tmpb.BARCD_CD  = #{barcdCd}
                                )
        </if>
        <if test="prodClassCd != null and prodClassCd != ''">
        <!--
            AND tmp.PROD_CLASS_CD IN  ( SELECT  #{prodClassCd} AS PROD_CLASS_CD
                                        FROM    DUAL
                                        UNION
                                        SELECT  tmpc.PROD_CLASS_CD
                                        FROM    TB_MS_PRODUCT_CLASS tmpc
                                        WHERE   tmpc.STORE_CD = #{storeCd}
                                        START WITH  tmpc.P_PROD_CLASS_CD = #{prodClassCd}
                                        AND         tmpc.STORE_CD = #{storeCd}
                                        CONNECT BY  tmpc.P_PROD_CLASS_CD = PRIOR tmpc.PROD_CLASS_CD
                                        AND         tmpc.STORE_CD = #{storeCd}
                                      )
		-->
					AND	tmp.PROD_CLASS_CD in (SELECT
									      PROD_CLASS_CD
									  FROM
									      TB_MS_PRODUCT_CLASS tmpc
									  WHERE
									      tmpc.STORE_CD = #{storeCd}
									  START WITH
									      tmpc.PROD_CLASS_CD = #{prodClassCd}   AND tmpc.STORE_CD = #{storeCd}
									  CONNECT BY
									      PRIOR tmpc.PROD_CLASS_CD = tmpc.P_PROD_CLASS_CD  AND tmpc.STORE_CD = #{storeCd}
			)


        </if>
        <if test='option1 == "S"'>
            <![CDATA[
            AND NVL(tsssc.CURR_QTY, 0) < NVL(tmp.SAFE_STOCK_QTY, 0)
            AND NVL(tmp.SAFE_STOCK_QTY,0) > 0
            ]]>
        </if>
        <if test='option2 != null and option2 != ""'>
            AND optionTb.PROD_CD  = tmp.PROD_CD
        </if>
        ORDER BY tmp.PROD_CD
        <include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <!-- 주문등록 요청일의 상품건수 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : storeOrderDtlVO
        COMMENTS : 주문등록 요청일의 상품건수 조회한다.
    -->
    <select id="getDtlCnt" parameterType="storeOrderVO" resultType="Integer">
        /* USE : storeOrderMapper.getDtlCnt */
        <![CDATA[
        SELECT  COUNT(tphsod.PROD_CD) AS DTL_CNT
        FROM    TB_PO_HQ_STORE_ORDER_DTL tphsod
        WHERE   tphsod.REQ_DATE    = #{reqDate}
        AND     tphsod.STORE_CD    = #{storeCd}
        AND     tphsod.SLIP_FG     = #{slipFg}
        ]]>
    </select>

    <!-- 주문등록 요청일의 HD 내용이 존재하는지 여부 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : storeOrderDtlVO
        COMMENTS : 주문등록 요청일의 HD 내용이 존재하는지 여부 조회한다.
    -->
    <select id="getHdExist" parameterType="storeOrderVO" resultType="String">
        /* USE : storeOrderMapper.getHdExist */
        <![CDATA[
        SELECT  DECODE(COUNT(*), 0, 'N', 'Y') AS IS_EXIST
        FROM    TB_PO_HQ_STORE_ORDER tphso
        WHERE   tphso.REQ_DATE    = #{reqDate}
        AND     tphso.STORE_CD    = #{storeCd}
        AND     tphso.SLIP_FG     = #{slipFg}
        ]]>
    </select>

    <!-- 주문등록 출고요청가능일인지 여부 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_SPECIFIC, TB_PO_HQ_STORE_ORDER_DAYS
        PARAM    : storeOrderVO
        COMMENTS : 주문등록 출고요청가능일인지 여부를 조회한다.
    -->
    <select id="getStoreOrderDateCheck" parameterType="storeOrderVO" resultType="DefaultMap">
        /* USE : storeOrderMapper.getStoreOrderDateCheck */
        <![CDATA[
        SELECT  SUM(ORDER_FG) AS ORDER_FG
        FROM    (   SELECT  DECODE(NVL(tphsos.OUTSTOCK_REQ_YN, 'N'), 'Y', 1, 0) AS ORDER_FG
                    FROM    TB_PO_HQ_STORE_ORDER_SPECIFIC tphsos
                    WHERE   tphsos.HQ_OFFICE_CD     = #{hqOfficeCd}
                    AND     tphsos.STORE_CD         = #{storeCd}
                    AND     tphsos.SPECIFIC_DATE    = #{reqDate}
                    UNION
                    SELECT  COUNT(STORE_CD) AS ORDER_FG
                    FROM    TB_PO_HQ_STORE_ORDER_DAYS tphsod
                    WHERE   tphsod.HQ_OFFICE_CD = #{hqOfficeCd}
                    AND     tphsod.STORE_CD     = #{storeCd}
                    AND     tphsod.REQ_NO_DAY   LIKE    '%'||(SELECT TO_CHAR(TO_DATE(#{reqDate}, 'YYYYMMDD'), 'D') FROM DUAL)||'%'
                )
        ]]>
    </select>

    <!-- 주문등록 매장마감 여부 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_CLOSE
        PARAM    : storeOrderVO
        COMMENTS : 주문등록 매장마감 여부를 조회한다.
    -->
    <select id="getStoreCloseCheck" parameterType="storeOrderVO" resultType="DefaultMap">
        /* USE : storeOrderMapper.getStoreCloseCheck */
        <![CDATA[
        SELECT  tphsc.ORDER_CLOSE_FG
        FROM    TB_PO_HQ_STORE_CLOSE tphsc
        WHERE   tphsc.HQ_OFFICE_CD  = #{hqOfficeCd}
        AND     tphsc.CLOSE_DATE    = #{reqDate}
        ]]>
    </select>

    <!-- 주문등록 주문진행구분 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : storeOrderVO
        COMMENTS : 주문등록 주문진행구분을 조회한다.
    -->
    <select id="getOrderProcFgCheck" parameterType="storeOrderVO" resultType="DefaultMap">
        /* USE : storeOrderMapper.getOrderProcFgCheck */
        <![CDATA[
        SELECT  PROC_FG, REMARK
        FROM    TB_PO_HQ_STORE_ORDER tphso
        WHERE   tphso.REQ_DATE    = #{reqDate}
        AND     tphso.STORE_CD    = #{storeCd}
        AND     tphso.SLIP_FG     = #{slipFg}
        ]]>
    </select>

    <!-- 매장여신 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_LOAN
        PARAM    : storeOrderVO
        COMMENTS : 매장여신을 내역을 조회한다.
    -->
    <select id="getStoreLoan" parameterType="storeOrderVO" resultType="DefaultMap">
        /* USE : storeOrderMapper.getStoreLoan */
        SELECT  NVL(tphso.PREV_ORDER_TOT, 0) AS PREV_ORDER_TOT,
				tphsl.LIMIT_LOAN_AMT,
        		tphsl.CURR_LOAN_AMT,
        		tphsl.MAX_ORDER_AMT,
                (tphsl.LIMIT_LOAN_AMT - tphso2.OUT_TOT - tphso.PREV_ORDER_TOT + tphsm.MONEY_AMT) AS AVAILABLE_ORDER_AMT,
				tphsl.NO_OUTSTOCK_AMT_FG,
				tphsl.ORDER_CLOSE_YN
        FROM    (   SELECT  NVL(SUM(tphso.ORDER_TOT), 0) AS PREV_ORDER_TOT
                    FROM    TB_PO_HQ_STORE_ORDER tphso
                    WHERE   STORE_CD  =   #{storeCd}
                    AND     REQ_DATE  !=  #{reqDate}
                    AND     PROC_FG   IN  ('00','10')								<!-- 00:등록, 10:등록완료, 20:분배완료 (화면: 등록, 분배중, 분배완료) -->
                ) tphso
        ,       (   SELECT  NVL(tphsl.LIMIT_LOAN_AMT,       0) AS LIMIT_LOAN_AMT,
        					tphsl.CURR_LOAN_AMT,
							NVL(tphsl.MAX_ORDER_AMT,        0) AS MAX_ORDER_AMT,
                    		NVL(tphsl.NO_OUTSTOCK_AMT_FG, 'N') AS NO_OUTSTOCK_AMT_FG,
                    		NVL(tphsl.ORDER_CLOSE_YN,     'N') AS ORDER_CLOSE_YN
                    		<!--
							DECODE(tphsl.ORDER_FG
                                  ,'1'
                                  ,DECODE(SIGN(tphsl.CURR_LOAN_AMT)
                                         ,1
                                         ,DECODE(tphsl.MAX_ORDER_AMT
                                                ,NULL
                                                ,tphsl.CURR_LOAN_AMT
                                                ,DECODE(SIGN(tphsl.CURR_LOAN_AMT-tphsl.MAX_ORDER_AMT)
                                                       ,1
                                                       ,tphsl.MAX_ORDER_AMT
                                                       ,tphsl.CURR_LOAN_AMT
                                                       )
                                                )
                                         ,0
                                         )
                                  ,'2'
                                  ,DECODE(SIGN(tphsl.CURR_LOAN_AMT)
                                         ,1
                                         ,DECODE(tphsl.MAX_ORDER_AMT
                                                ,NULL
                                                ,tphsl.LIMIT_LOAN_AMT+tphsl.CURR_LOAN_AMT
                                                ,DECODE(SIGN(tphsl.LIMIT_LOAN_AMT+tphsl.CURR_LOAN_AMT-tphsl.MAX_ORDER_AMT)
                                                       ,1
                                                       ,tphsl.MAX_ORDER_AMT
                                                       ,tphsl.LIMIT_LOAN_AMT+tphsl.CURR_LOAN_AMT
                                                       )
                                                )
                                         ,0
                                         )
                                  ,'3'
                                  ,DECODE(SIGN(tphsl.CURR_LOAN_AMT)
                                         ,1
                                         ,tphsl.MAX_ORDER_AMT
                                         ,0
                                         )
                                  ) AS AVAILABLE_ORDER_AMT
							-->
							<!--
							DECODE(tphsl.ORDER_FG   ,'1', DECODE(SIGN(tphsl.CURR_LOAN_AMT), 1, DECODE(  tphsl.MAX_ORDER_AMT,
                                                                                                        NULL,
                                                                                                        tphsl.CURR_LOAN_AMT,
                                                                                                        DECODE( SIGN(tphsl.CURR_LOAN_AMT - tphsl.MAX_ORDER_AMT                       ),1, tphsl.MAX_ORDER_AMT, tphsl.CURR_LOAN_AMT                          )), 0)
                                                    ,'2', DECODE(SIGN(tphsl.CURR_LOAN_AMT), 1, DECODE(  tphsl.MAX_ORDER_AMT,
                                                                                                        NULL,
                                                                                                        tphsl.LIMIT_LOAN_AMT + tphsl.CURR_LOAN_AMT,
                                                                                                        DECODE( SIGN(tphsl.LIMIT_LOAN_AMT + tphsl.CURR_LOAN_AMT - tphsl.MAX_ORDER_AMT),1, tphsl.MAX_ORDER_AMT, tphsl.LIMIT_LOAN_AMT + tphsl.CURR_LOAN_AMT   )), 0)
                                                    ,'3', DECODE(SIGN(tphsl.CURR_LOAN_AMT), 1, tphsl.MAX_ORDER_AMT, 0)
                            ) AS AVAILABLE_ORDER_AMT
							-->
							<!--
					                    방식1 : 여신잔액과 1회 주문한도액 중 작은 금액                                                          (1회 주문한도액 미입력시 여신잔액)
					                    방식2 : 여신잔액이 0보다 큰 경우, 여신한도액 + 여신잔액과 1회 주문한도액 중 작은금액 (1회 주문한도액 미입력시 여신한도액 + 여신잔액)
					                    방식3 : 여신잔액이 0보다 큰 경우, 주문가능                                                              (1회 주문한도액 미입력시 주문가능액은 무한대)
							-->
			                <!-- DECODE	(tphsl.ORDER_FG,'1', DECODE( SIGN(NVL(tphsl.MAX_ORDER_AMT,0)),   0, tphsl.CURR_LOAN_AMT,                   		LEAST(tphsl.CURR_LOAN_AMT, tphsl.MAX_ORDER_AMT)																		),
			                                 		'2', DECODE( SIGN(NVL(tphsl.MAX_ORDER_AMT,0)),   0, tphsl.CURR_LOAN_AMT + tphsl.LIMIT_LOAN_AMT,	DECODE(SIGN(tphsl.CURR_LOAN_AMT), 1,LEAST(tphsl.CURR_LOAN_AMT + tphsl.LIMIT_LOAN_AMT, tphsl.MAX_ORDER_AMT), 0	)   ),
			                                 		'3', DECODE( SIGN(NVL(tphsl.MAX_ORDER_AMT,0)),   0, 999999999,									DECODE(SIGN(tphsl.CURR_LOAN_AMT), 1,999999999,                                           					0   )   )	/* 9자리이기에 999999999 */
									)	AS AVAILABLE_ORDER_AMT -->
                    FROM    TB_PO_HQ_STORE_LOAN tphsl
                    WHERE   tphsl.HQ_OFFICE_CD  =   #{hqOfficeCd}
                    AND     tphsl.STORE_CD      =   #{storeCd}
                ) tphsl
        ,       (
                    SELECT NVL(SUM(tphso2.OUT_TOT), 0) AS OUT_TOT
                    FROM TB_PO_HQ_STORE_OUTSTOCK tphso2
                    WHERE tphso2.HQ_OFFICE_CD = #{hqOfficeCd}
                    AND tphso2.STORE_CD = #{storeCd}
                    AND tphso2.PROC_FG = '20'
                ) tphso2
        ,       (
                    SELECT NVL(SUM(tphsm.MONEY_AMT), 0) AS MONEY_AMT
                    FROM TB_PO_HQ_STORE_MONEY tphsm
                    WHERE tphsm.HQ_OFFICE_CD = #{hqOfficeCd}
                    AND tphsm.STORE_CD = #{storeCd}
                ) tphsm
    </select>

    <!-- 주문등록 출고요청가능일 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DAYS, TB_PO_HQ_STORE_ORDER_SPECIFIC, TB_PO_HQ_STORE_CLOSE
        PARAM    : storeOrderVO
        COMMENTS : 주문등록 출고요청가능일 조회한다.
    -->
    <select id="getReqDate" parameterType="storeOrderVO" resultType="String">
        /* USE : storeOrderMapper.getReqDate */
        <![CDATA[
        SELECT	*
        FROM	(	SELECT  A.DAY AS ORDER_DATE
                    FROM    (   SELECT  TO_CHAR(SYSDATE + LEVEL - 1,'YYYYMMDD') AS DAY
						        ,       TO_CHAR(SYSDATE + LEVEL - 1,'D')    	AS WEEK
                                FROM    DUAL
                                CONNECT
                                BY      LEVEL <= 30
                            )   A
                    ,       TB_PO_HQ_STORE_ORDER_DAYS tphsod
                    WHERE   tphsod.STORE_CD    (+) =       #{storeCd}
                    AND     tphsod.REQ_NO_DAY  (+) LIKE    '%'||A.WEEK||'%'
                    AND     tphsod.REQ_NO_DAY      IS      NULL
                    AND     A.DAY                   NOT IN  (   SELECT  SPECIFIC_DATE
                                                                FROM    TB_PO_HQ_STORE_ORDER_SPECIFIC tphsos
                                                                WHERE   STORE_CD        =   #{storeCd}
                                                                AND     OUTSTOCK_REQ_YN =   'N'
                                                            )
                    UNION
                    SELECT  SPECIFIC_DATE    ORDER_DATE
                    FROM    TB_PO_HQ_STORE_ORDER_SPECIFIC tphsos
                    WHERE   STORE_CD          =   #{storeCd}
                    AND     SPECIFIC_DATE     >=  TO_CHAR(SYSDATE,'YYYYMMDD')
                    AND     OUTSTOCK_REQ_YN   =   'Y'
                    MINUS
                    SELECT  tphsc.CLOSE_DATE  ORDER_DATE
                    FROM    TB_PO_HQ_STORE_CLOSE tphsc
                    WHERE   HQ_OFFICE_CD    =   #{hqOfficeCd}
                    AND     CLOSE_DATE      >=  TO_CHAR(SYSDATE,'YYYYMMDD')
                    AND     ORDER_CLOSE_FG  =   '1'
                    ORDER
                    BY      ORDER_DATE
                )
        WHERE	ROWNUM	=	1
        ]]>
    </select>

    <!-- 주문등록 주문상품 DTL 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : storeOrderDtlVO
        COMMENTS : 주문등록 주문상품 DTL을 등록한다.
    -->
    <insert id="insertStoreOrderDtl" parameterType="storeOrderDtlVO">
        /* USE : storeOrderMapper.insertStoreOrderDtl */
        INSERT INTO TB_PO_HQ_STORE_ORDER_DTL
        (
            REQ_DATE,
            STORE_CD,
            SLIP_FG,
            HQ_BRAND_CD,
            PROD_CD,
            PO_UNIT_FG,
            PO_UNIT_QTY,
            ORDER_SPLY_UPRC,
            ORDER_UNIT_QTY,
            ORDER_ETC_QTY,
            ORDER_TOT_QTY,
            ORDER_AMT,
            ORDER_VAT,
            ORDER_TOT,
            REMARK,
            REG_DT,
            REG_ID,
            MOD_DT,
            MOD_ID
        )
        VALUES
        (
            #{reqDate},
            #{storeCd},
            #{slipFg},
            #{hqBrandCd},
            #{prodCd},
            #{poUnitFg},
            #{poUnitQty},
            #{orderSplyUprc},
            #{orderUnitQty},
            #{orderEtcQty},
            #{orderTotQty},
            #{orderAmt},
            #{orderVat},
            #{orderTot},
            #{remark},
            #{regDt},
            #{regId},
            #{modDt},
            #{modId}
        )
    </insert>

    <!-- 주문등록 주문상품 DTL 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : storeOrderDtlVO
        COMMENTS : 주문등록 주문상품 DTL을 수정한다.
    -->
    <update id="updateStoreOrderDtl" parameterType="storeOrderDtlVO">
        /* USE : storeOrderMapper.updateStoreOrderDtl */
        UPDATE  TB_PO_HQ_STORE_ORDER_DTL
        SET     PO_UNIT_FG         = #{poUnitFg},
                PO_UNIT_QTY        = #{poUnitQty},
                ORDER_SPLY_UPRC    = #{orderSplyUprc},
                ORDER_UNIT_QTY     = #{orderUnitQty},
                ORDER_ETC_QTY      = #{orderEtcQty},
                ORDER_TOT_QTY      = #{orderTotQty},
                ORDER_AMT          = #{orderAmt},
                ORDER_VAT          = #{orderVat},
                ORDER_TOT          = #{orderTot},
                REMARK             = #{remark},
                MOD_DT             = #{modDt},
                MOD_ID             = #{modId}
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = #{slipFg}
        AND     PROD_CD     = #{prodCd}
    </update>

    <!-- 주문등록 주문상품 DTL 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : storeOrderDtlVO
        COMMENTS : 주문등록 주문상품 DTL을 삭제한다.
    -->
    <delete id="deleteStoreOrderDtl" parameterType="storeOrderDtlVO">
        /* USE : storeOrderMapper.deleteStoreOrderDtl */
        DELETE  TB_PO_HQ_STORE_ORDER_DTL
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = #{slipFg}
        AND     PROD_CD     = #{prodCd}
    </delete>

    <!-- 주문등록 주문상품 HD 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : storeOrderVO
        COMMENTS : 주문등록 주문상품 HD를 등록한다.
    -->
    <insert id="insertStoreOrder" parameterType="storeOrderVO">
        /* USE : storeOrderMapper.insertStoreOrder */
        INSERT INTO TB_PO_HQ_STORE_ORDER
        (
            REQ_DATE,
            STORE_CD,
            EMP_NO,
            SLIP_FG,
            ORDER_UNIT_QTY,
            ORDER_ETC_QTY,
            ORDER_TOT_QTY,
            ORDER_AMT,
            ORDER_VAT,
            ORDER_TOT,
            DTL_CNT,
            PROC_FG,
            MD_UNIT_QTY,
            MD_ETC_QTY,
            MD_TOT_QTY,
            MD_AMT,
            MD_VAT,
            MD_TOT,
            REMARK,
            REG_DT,
            REG_ID,
            MOD_DT,
            MOD_ID
        )
        SELECT  tphsod.REQ_DATE
        ,       tphsod.STORE_CD
        ,       #{empNo}
        ,       tphsod.SLIP_FG
        ,       SUM(tphsod.ORDER_UNIT_QTY)
        ,       SUM(tphsod.ORDER_ETC_QTY)
        ,       SUM(tphsod.ORDER_TOT_QTY)
        ,       SUM(tphsod.ORDER_AMT)
        ,       SUM(tphsod.ORDER_VAT)
        ,       SUM(tphsod.ORDER_TOT)
        ,       COUNT(tphsod.PROD_CD)
        ,       #{procFg}
        ,       0
        ,       0
        ,       0
        ,       0
        ,       0
        ,       0
        ,       #{remark}
        ,       #{regDt}
        ,       #{regId}
        ,       #{modDt}
        ,       #{modId}
        FROM    TB_PO_HQ_STORE_ORDER_DTL tphsod
        WHERE   tphsod.REQ_DATE  = #{reqDate}
        AND     tphsod.STORE_CD  = #{storeCd}
        AND     tphsod.SLIP_FG   = #{slipFg}
        GROUP
        BY      tphsod.REQ_DATE
        ,       tphsod.STORE_CD
        ,       tphsod.SLIP_FG
    </insert>

    <!-- 주문등록 주문상품 HD 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : storeOrderVO
        COMMENTS : 주문등록 주문상품 HD를 수정한다.
    -->
    <update id="updateStoreOrder" parameterType="storeOrderVO">
        /* USE : storeOrderMapper.updateStoreOrder */
        UPDATE  TB_PO_HQ_STORE_ORDER
        SET     ( ORDER_UNIT_QTY, ORDER_ETC_QTY, ORDER_TOT_QTY
                , ORDER_AMT, ORDER_VAT, ORDER_TOT
                , MD_UNIT_QTY, MD_ETC_QTY, MD_TOT_QTY
                , MD_AMT, MD_VAT, MD_TOT
                , DTL_CNT)
            =   ( SELECT  NVL(SUM(tphsod.ORDER_UNIT_QTY), 0), NVL(SUM(tphsod.ORDER_ETC_QTY), 0), NVL(SUM(tphsod.ORDER_TOT_QTY), 0)
                  ,       NVL(SUM(tphsod.ORDER_AMT), 0)     , NVL(SUM(tphsod.ORDER_VAT), 0)    , NVL(SUM(tphsod.ORDER_TOT), 0)
                  ,       NVL(SUM(tphsod.MD_UNIT_QTY), 0)   , NVL(SUM(tphsod.MD_ETC_QTY), 0)   , NVL(SUM(tphsod.MD_TOT_QTY), 0)
                  ,       NVL(SUM(tphsod.MD_AMT), 0)        , NVL(SUM(tphsod.MD_VAT), 0)       , NVL(SUM(tphsod.MD_TOT), 0)
                  ,       COUNT(tphsod.PROD_CD)
                  FROM    TB_PO_HQ_STORE_ORDER_DTL tphsod
                  WHERE   tphsod.REQ_DATE  = #{reqDate}
                  AND     tphsod.STORE_CD  = #{storeCd}
                  AND     tphsod.SLIP_FG   = #{slipFg}
                )
        ,       PROC_FG = #{procFg}
        ,       REMARK  = #{remark}
        ,       MOD_DT  = #{modDt}
        ,       MOD_ID  = #{modId}
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = #{slipFg}
    </update>

    <!-- 주문등록 주문상품 HD 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : storeOrderVO
        COMMENTS : 주문등록 주문상품 HD를 삭제한다.
    -->
    <delete id="deleteStoreOrder" parameterType="storeOrderVO">
        /* USE : storeOrderMapper.deleteStoreOrder */
        DELETE  TB_PO_HQ_STORE_ORDER
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = #{slipFg}
    </delete>

    <!-- 매장 주문마감 및 발주중지 여부 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_CLOSE, TB_PO_HQ_STORE_LOAN
        PARAM    : storeOrderVO
        COMMENTS : 매장 주문마감 및 발주중지 여부를 조회한다.
    -->
<!--<select id="getOrderCloseCheck" parameterType="storeOrderVO" resultType="DefaultMap">-->
    <select id="getOrderCloseCheck" parameterType="storeOrderVO" resultType="String">
        /* USE : storeOrderMapper.getOrderCloseCheck */
        <![CDATA[
        SELECT	DECODE(SUM(ORDER_CLOSE_FG), 0, 'N', 'Y') AS ORDER_CLOSE_FG
        FROM	(	SELECT  DECODE(tphsc.ORDER_CLOSE_FG, 'N', 0, 1) AS ORDER_CLOSE_FG
                    FROM    TB_PO_HQ_STORE_CLOSE tphsc
                    WHERE   tphsc.HQ_OFFICE_CD  = #{hqOfficeCd}
                    AND     tphsc.CLOSE_DATE    = #{reqDate}
                    UNION
                    SELECT  DECODE(tphsl.ORDER_CLOSE_YN, 'N', 0, 1) AS ORDER_CLOSE_FG
                    FROM	TB_PO_HQ_STORE_LOAN tphsl
                    WHERE   tphsl.HQ_OFFICE_CD  = #{hqOfficeCd}
                    AND     tphsl.STORE_CD		= #{storeCd}
                )
        ]]>
    </select>

    <!-- 주문등록 확정 - 주문수량을 MD수량으로 수정 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : storeOrderVO
        COMMENTS : 주문등록 확정 - 주문수량을 MD수량으로 수정한다.
    -->
    <update id="updateOrderQtyMdQty" parameterType="storeOrderVO">
        /* USE : storeOrderMapper.updateOrderQtyMdQty */
        UPDATE  TB_PO_HQ_STORE_ORDER_DTL
        SET     MD_SPLY_UPRC    =   ORDER_SPLY_UPRC
        ,       MD_UNIT_QTY     =   ORDER_UNIT_QTY
        ,       MD_ETC_QTY      =   ORDER_ETC_QTY
        ,       MD_TOT_QTY      =   ORDER_TOT_QTY
        ,       MD_AMT          =   ORDER_AMT
        ,       MD_VAT          =   ORDER_VAT
        ,       MD_TOT          =   ORDER_TOT
        ,       MOD_DT          =   #{modDt}
        ,       MOD_ID          =   #{modId}
        WHERE   REQ_DATE  = #{reqDate}
        AND     STORE_CD  = #{storeCd}
        AND     SLIP_FG   = #{slipFg}
    </update>

    <!--  주문등록 확정 - 분배자료 생성 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_DISTRIBUTE
        PARAM    : dstbReqVO
        COMMENTS : 주문등록 확정 - 주문등록 정보를 바탕으로 분배자료를 생성한다.
    -->
    <insert id="insertDstbRegist" parameterType="dstbReqVO">
        /* USE : storeOrderMapper.insertDstbRegist */
        <selectKey resultType="int" keyProperty="seq" order="BEFORE">
            SELECT  NVL(MAX(tphsd.SEQ), 0) AS SEQ
            FROM    TB_PO_HQ_STORE_DISTRIBUTE tphsd
            WHERE   HQ_OFFICE_CD  = #{hqOfficeCd}
            AND     REQ_DATE      = #{reqDate}
        </selectKey>
        INSERT INTO TB_PO_HQ_STORE_DISTRIBUTE
        (
        HQ_OFFICE_CD,
        REQ_DATE,
        SEQ,
        STORE_CD,
        EMP_NO,
        SLIP_FG,
        DSTB_FG,
        STORAGE_CD,
        HQ_BRAND_CD,
        PROD_CD,
        PO_UNIT_FG,
        PO_UNIT_QTY,
        ORDER_SPLY_UPRC,
        ORDER_UNIT_QTY,
        ORDER_ETC_QTY,
        ORDER_TOT_QTY,
        ORDER_AMT,
        ORDER_VAT,
        ORDER_TOT,
        MD_SPLY_UPRC,
        MD_UNIT_QTY,
        MD_ETC_QTY,
        MD_TOT_QTY,
        MD_AMT,
        MD_VAT,
        MD_TOT,
        MGR_SPLY_UPRC,
        MGR_UNIT_QTY,
        MGR_ETC_QTY,
        MGR_TOT_QTY,
        MGR_AMT,
        MGR_VAT,
        MGR_TOT,
        MGR_DT,
        MGR_ID,
        PROC_FG,
        REMARK,
        REG_DT,
        REG_ID,
        MOD_DT,
        MOD_ID
        )
        SELECT  #{hqOfficeCd}
        ,       #{reqDate}
        ,       #{seq}+ROWNUM
        ,       #{storeCd}
        ,       #{empNo}
        ,       #{slipFg}
        ,       #{dstbFg}
        ,       #{storageCd}
        ,       #{hqBrandCd}
        ,       PROD_CD
        ,       PO_UNIT_FG
        ,       PO_UNIT_QTY
        ,       ORDER_SPLY_UPRC
        ,       ORDER_UNIT_QTY
        ,       ORDER_ETC_QTY
        ,       ORDER_TOT_QTY
        ,       ORDER_AMT
        ,       ORDER_VAT
        ,       ORDER_TOT
        ,       MD_SPLY_UPRC
        ,       MD_UNIT_QTY
        ,       MD_ETC_QTY
        ,       MD_TOT_QTY
        ,       MD_AMT
        ,       MD_VAT
        ,       MD_TOT
        ,       MD_SPLY_UPRC
        ,       MD_UNIT_QTY
        ,       MD_ETC_QTY
        ,       MD_TOT_QTY
        ,       MD_AMT
        ,       MD_VAT
        ,       MD_TOT
        ,       #{modDt}
        ,       #{modId}
        ,       #{procFg}
        ,       REMARK
        ,       #{regDt}
        ,       #{regId}
        ,       #{modDt}
        ,       #{modId}
        FROM    (   SELECT  PROD_CD         ,   PO_UNIT_FG     ,   PO_UNIT_QTY
                    ,       REMARK
                    ,       ORDER_SPLY_UPRC ,   ORDER_UNIT_QTY ,   ORDER_ETC_QTY      ,   ORDER_TOT_QTY       ,   ORDER_AMT       ,   ORDER_VAT       ,   ORDER_TOT
                    ,       MD_SPLY_UPRC    ,   MD_UNIT_QTY    ,   MD_ETC_QTY         ,   MD_TOT_QTY          ,   MD_AMT          ,   MD_VAT          ,   MD_TOT
                    FROM    TB_PO_HQ_STORE_ORDER_DTL
                    WHERE   REQ_DATE    =   #{reqDate}
                    AND     STORE_CD    =   #{storeCd}
                    AND     SLIP_FG     =   #{slipFg}
                    ORDER
                    BY      PROD_CD
                )
    </insert>

    <!-- 주문등록 확정 - 분배자료 진행구분 변경 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_DISTRIBUTE
        PARAM    : dstbCloseStoreVO
        COMMENTS : 주문등록 확정 - 분배자료 진행구분을 변경한다.
    -->
    <update id="updateDstbProcFg" parameterType="dstbCloseStoreVO">
        /* USE : storeOrderMapper.updateDstbProcFg */
        UPDATE  TB_PO_HQ_STORE_DISTRIBUTE
        SET     PROC_FG         = #{updateProcFg},
                MGR_DT          = #{modDt},
                MGR_ID          = #{modId}
        WHERE   HQ_OFFICE_CD  = #{hqOfficeCd}
        AND     REQ_DATE      = #{reqDate}
        AND     SLIP_FG       = #{slipFg}
        AND     STORE_CD      = #{storeCd}
        AND     PROC_FG       = #{procFg}
    </update>


    <!--                엑셀업로드 시작                 -->
    <!--  주문등록 엑셀업로드 - 엑셀업로드 수량추가 -->
    <!--
        TABLE    : TB_PO_TEMP_EXCEL, TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : excelUploadMPSVO
        COMMENTS : 주문등록 엑셀업로드 - 엑셀업로드 수량추가인 경우 기존에 등록된 내역을 TEMP 테이블에 입력한다.
    -->
    <insert id="insertExcelUploadAddQty" parameterType="excelUploadMPSVO">
        /* USE : storeOrderMapper.insertExcelUploadAddQty */
        INSERT INTO TB_PO_TEMP_EXCEL
        (
            SESSION_ID,
            HQ_OFFICE_CD,
            STORE_CD,
            PROD_CD,
            UNIT_QTY,
            ETC_QTY,
            QTY,
            REG_DT,
            REG_ID,
            MOD_DT,
            MOD_ID
        )
        SELECT  #{sessionId}
        ,       #{hqOfficeCd}
        ,       #{storeCd}
        ,       PROD_CD
        ,       ORDER_UNIT_QTY
        ,       ORDER_ETC_QTY
        ,       0
        ,       #{regDt}
        ,       #{regId}
        ,       #{modDt}
        ,       #{modId}
        FROM    TB_PO_HQ_STORE_ORDER_DTL
        WHERE   REQ_DATE    =  #{date}
        AND     STORE_CD    =  #{storeCd}
        AND     SLIP_FG     =  #{slipFg}
        AND     PROD_CD     IN (  SELECT  PROD_CD
                                  FROM    TB_PO_TEMP_EXCEL
                                  WHERE   SESSION_ID  = #{sessionId}
                                  AND     PROD_CD     IS NOT  NULL
                                  AND     PROD_CD     IN (  SELECT  PROD_CD
                                                            FROM    TB_MS_PRODUCT
                                                            WHERE   STORE_CD  = #{storeCd}
                                                            AND     PO_PROD_FG  IN ('1','3')
                                                            AND     USE_YN    = 'Y'
                                                         )

                                )
    </insert>


    <!--  주문등록 엑셀업로드 - 기존 데이터중 엑셀업로드 한 데이터와 같은 상품 삭제 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL, TB_PO_TEMP_EXCEL
        PARAM    : excelUploadMPSVO
        COMMENTS : 주문등록 엑셀업로드 - 기존 데이터중 엑셀업로드 한 데이터와 같은 상품은 삭제한다.
    -->
    <delete id="deleteStoreOrderToExcelUploadData" parameterType="excelUploadMPSVO">
        /* USE : storeOrderMapper.deleteStoreOrderToExcelUploadData */
        DELETE  TB_PO_HQ_STORE_ORDER_DTL
        WHERE   REQ_DATE      = #{date}
        AND     STORE_CD      = #{storeCd}
        AND     SLIP_FG       = #{slipFg}
        AND     PROD_CD       IN  ( SELECT  PROD_CD
                                    FROM    TB_PO_TEMP_EXCEL
                                    WHERE   SESSION_ID  = #{sessionId}
                                    AND     PROD_CD     IS NOT NULL
                                  )
    </delete>


    <!-- 주문등록 엑셀업로드 - 여신조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : storeOrderVO
        COMMENTS : 주문등록 엑셀업로드 - 여신을 조회한다.
    -->
    <select id="storeLoanCheck" parameterType="excelUploadMPSVO" resultType="DefaultMap">
        /* USE : storeOrderMapper.storeLoanCheck */
        <![CDATA[
        SELECT  NVL(tphsod.ORDER_TOT, 0) + NVL(tpte.ORDER_TOT, 0) AS ORDER_TOT
        FROM    (
                    SELECT  NVL(SUM(ORDER_TOT), 0) ORDER_TOT
                    FROM    TB_PO_HQ_STORE_ORDER_DTL
                    WHERE   REQ_DATE  = #{date}
                    AND     STORE_CD  = #{storeCd}
                    AND     SLIP_FG   = ${slipFg}
                ) tphsod
        ,       (
                    SELECT  NVL(SUM((ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)
                                   - ROUND(ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)*DECODE(tmp.VAT_FG, '1', 1, 0)*NVL(tmse.ENVST_VAL,0)/11)
                                   + ROUND(ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)*DECODE(tmp.VAT_FG, '1', 1, 0)/(10+NVL(tmse.ENVST_VAL,0)))) * ${slipFg}
                                   ), 0) AS ORDER_TOT
                    FROM    (   SELECT  tpte.STORE_CD
                                ,       tpte.PROD_CD
                                ,       TRUNC(SUM(NVL(tpte.UNIT_QTY, 0)*tmp.PO_UNIT_QTY+NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0))/tmp.PO_UNIT_QTY) AS UNIT_QTY
                                ,       (
                                          MOD   (SUM(NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0)),tmp.PO_UNIT_QTY)
                                        * DECODE(${slipFg}, 1, DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 1, 1), 'B', 0, 1), DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 2, 1), 'B', 0, 1))
                                        ) AS ETC_QTY
                                ,       (SUM (NVL(tpte.UNIT_QTY, 0)*tmp.PO_UNIT_QTY+NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0))
                                          - DECODE(${slipFg}, 1, DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 1, 1), 'B', MOD(SUM(NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0)),tmp.PO_UNIT_QTY), 0)
                                                  , DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 2, 1), 'B', MOD(SUM(NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0)),tmp.PO_UNIT_QTY), 0)
                                                  )
                                        ) AS QTY
                                ,       MAX(tpte.REMARK) AS REMARK
                                FROM    TB_PO_TEMP_EXCEL tpte
                                ,       TB_MS_PRODUCT tmp
                                WHERE   tpte.SESSION_ID =   #{sessionId}
                                AND     tpte.PROD_CD    IS  NOT NULL
                                AND     tmp.STORE_CD    =   tpte.STORE_CD
                                AND     tmp.PROD_CD     =   tpte.PROD_CD
                                AND     tmp.STORE_CD    =   #{storeCd}
                                AND     tmp.PO_PROD_FG  IN  ('1','3')
                                AND     tmp.USE_YN      =   'Y'
                                GROUP
                                BY      tpte.STORE_CD
                                ,       tpte.PROD_CD
                                ,       tmp.PO_UNIT_QTY
                                ,       tmp.PO_UNIT_ALLOW_FG
                            ) tpte
                    ,       TB_MS_PRODUCT tmp
                    ,       TB_MS_STORE_ENVST tmse
                    WHERE   tmp.STORE_CD       =   #{storeCd}
                    AND     tmp.STORE_CD       =   tpte.STORE_CD
                    AND     tmp.PROD_CD        =   tpte.PROD_CD
                    AND     tmse.STORE_CD      =   tmp.STORE_CD
                    AND     tmse.ENVST_CD      =   '0011'
                ) tpte
        ]]>
    </select>


    <!--  주문등록 엑셀업로드 - 엑셀업로드 한 수량을 주문수량으로 입력 -->
    <!--
        TABLE    : TB_PO_TEMP_EXCEL, TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : excelUploadMPSVO
        COMMENTS : 주문등록 엑셀업로드 - 엑셀업로드 한 수량을 주문수량으로 입력한다.
    -->
    <insert id="insertStoreOrderToExcelUploadData" parameterType="excelUploadMPSVO">
        /* USE : storeOrderMapper.insertStoreOrderToExcelUploadData */
        INSERT INTO TB_PO_HQ_STORE_ORDER_DTL
        (   REQ_DATE            ,   STORE_CD        ,   SLIP_FG
        ,   HQ_BRAND_CD         ,   PROD_CD         ,   PO_UNIT_FG     ,   PO_UNIT_QTY
        ,   ORDER_SPLY_UPRC
        ,   ORDER_UNIT_QTY
        ,   ORDER_ETC_QTY
        ,   ORDER_TOT_QTY
        ,   ORDER_AMT
        ,   ORDER_VAT
        ,   ORDER_TOT
        ,   REMARK
        ,   REG_DT
        ,   REG_ID
        ,   MOD_DT
        ,   MOD_ID
        )
        SELECT  #{date}         ,   #{storeCd}      ,   #{slipFg}
        ,       '00'            ,   tmp.PROD_CD     ,   tmp.PO_UNIT_FG  ,   tmp.PO_UNIT_QTY
        ,       tmp.SPLY_UPRC
        ,       tpte.UNIT_QTY * ${slipFg} AS ORDER_UNIT_QTY
        ,       tpte.ETC_QTY * ${slipFg} AS ORDER_ETC_QTY
        ,       tpte.QTY * ${slipFg} AS ORDER_TOT_QTY
        ,       (ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)
              - ROUND(ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)*DECODE(tmp.VAT_FG, '1', 1, 0)*NVL(tmse.ENVST_VAL,0)/11)) * ${slipFg} AS ORDER_AMT
        ,       (ROUND(ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)*DECODE(tmp.VAT_FG, '1', 1, 0)/(10+NVL(tmse.ENVST_VAL,0)))) * ${slipFg} AS ORDER_VAT
        ,       (ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)
              - ROUND(ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)*DECODE(tmp.VAT_FG, '1', 1, 0)*NVL(tmse.ENVST_VAL,0)/11)
              + ROUND(ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)*DECODE(tmp.VAT_FG, '1', 1, 0)/(10+NVL(tmse.ENVST_VAL,0)))) * ${slipFg} AS ORDER_TOT
        ,       tpte.REMARK
        ,       #{regDt}
        ,       #{regId}
        ,       #{modDt}
        ,       #{modId}
        FROM    (   SELECT  tpte.STORE_CD
                    ,       tpte.PROD_CD
                    ,       TRUNC(SUM(NVL(tpte.UNIT_QTY, 0)*tmp.PO_UNIT_QTY+NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0))/tmp.PO_UNIT_QTY) AS UNIT_QTY
                    ,       ( MOD   (SUM(NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0)),tmp.PO_UNIT_QTY)
                            * DECODE(${slipFg}, 1, DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 1, 1), 'B', 0, 1), DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 2, 1), 'B', 0, 1))
                            ) AS ETC_QTY
                    ,       (SUM (NVL(tpte.UNIT_QTY, 0)*tmp.PO_UNIT_QTY+NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0))
                                - DECODE(${slipFg}, 1, DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 1, 1), 'B', MOD(SUM(NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0)),tmp.PO_UNIT_QTY), 0)
                                , DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 2, 1), 'B', MOD(SUM(NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0)),tmp.PO_UNIT_QTY), 0)
                              )
                            ) AS QTY
                    ,       MAX(tpte.REMARK) AS REMARK
                    FROM    TB_PO_TEMP_EXCEL tpte
                    ,       TB_MS_PRODUCT tmp
                    WHERE   tpte.SESSION_ID =   #{sessionId}
                    AND     tpte.PROD_CD    IS  NOT NULL
                    AND     tmp.STORE_CD    =   tpte.STORE_CD
                    AND     tmp.PROD_CD     =   tpte.PROD_CD
                    AND     tmp.STORE_CD    =   #{storeCd}
                    AND     tmp.PO_PROD_FG  IN  ('1','3')
                    AND     tmp.USE_YN      =   'Y'
                    GROUP
                    BY      tpte.STORE_CD
                    ,       tpte.PROD_CD
                    ,       tmp.PO_UNIT_QTY
                    ,       tmp.PO_UNIT_ALLOW_FG
                ) tpte
        ,       TB_MS_PRODUCT tmp
        ,       TB_MS_STORE_ENVST tmse
        WHERE   tmp.STORE_CD       =   #{storeCd}
        AND     tmp.STORE_CD       =   tpte.STORE_CD
        AND     tmp.PROD_CD        =   tpte.PROD_CD
        AND     tmse.STORE_CD      =   tmp.STORE_CD
        AND     tmse.ENVST_CD      =   '0011'
        AND     NVL(tpte.QTY,0)    >   0
    </insert>


    <!--  주문등록 엑셀업로드 - 주문수량으로 정상 입력된 데이터 TEMP 테이블에서 삭제 -->
    <!--
        TABLE    : TB_PO_TEMP_EXCEL
        PARAM    : excelUploadMPSVO
        COMMENTS : 주문등록 엑셀업로드 - 주문수량으로 정상 입력된 데이터 TEMP 테이블에서 삭제한다.
    -->
    <delete id="deleteExcelUploadCompleteData" parameterType="excelUploadMPSVO">
        /* USE : storeOrderMapper.deleteExcelUploadCompleteData */
        DELETE  TB_PO_TEMP_EXCEL
        WHERE   SESSION_ID  = #{sessionId}
        AND     PROD_CD     IS NOT NULL
        AND     PROD_CD     IN  ( SELECT  PROD_CD
                                  FROM    ( SELECT  tpte.PROD_CD
                                            ,       (SUM (NVL(tpte.UNIT_QTY, 0)*tmp.PO_UNIT_QTY+NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0))
                                                      - DECODE(${slipFg}, 1, DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 1, 1), 'B', MOD(SUM(NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0)),tmp.PO_UNIT_QTY), 0)
                                                              , DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 2, 1), 'B', MOD(SUM(NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0)),tmp.PO_UNIT_QTY), 0)
                                                              )
                                                    ) AS QTY
                                            FROM    TB_PO_TEMP_EXCEL tpte
                                            ,       TB_MS_PRODUCT tmp
                                            WHERE   tpte.SESSION_ID =   #{sessionId}
                                            AND     tpte.PROD_CD    IS  NOT NULL
                                            AND     tmp.STORE_CD    =   tpte.STORE_CD
                                            AND     tmp.PROD_CD     =   tpte.PROD_CD
                                            AND     tmp.STORE_CD    =   #{storeCd}
                                            AND     tmp.PO_PROD_FG  IN  ('1','3')
                                            AND     tmp.USE_YN      =   'Y'
                                            GROUP
                                            BY      tpte.PROD_CD
                                            ,       tmp.PO_UNIT_QTY
                                            ,       tmp.PO_UNIT_ALLOW_FG
                                          ) tpte
                                  WHERE   NVL(tpte.QTY,0) > 0
                                )
    </delete>
    <!--                엑셀업로드 끝                 -->

    <!-- 주문등록 출고요청일자에 등록한 주문 총 합계 금액 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : storeOrderVO
        COMMENTS : 출고요청일자에 등록한 주문 총 합계 금액을 조회한다.
    -->
    <select id="getOrderTotAmt" parameterType="storeOrderVO" resultType="String">
        /* USE : StoreOrderMapper.getOrderTotAmt */
        SELECT NVL(MAX(ORDER_TOT*SLIP_FG), 0) AS ORDER_TOT
          FROM TB_PO_HQ_STORE_ORDER
         WHERE STORE_CD = #{storeCd}
           AND REQ_DATE = #{reqDate}
           AND SLIP_FG = 1
    </select>

</mapper>
