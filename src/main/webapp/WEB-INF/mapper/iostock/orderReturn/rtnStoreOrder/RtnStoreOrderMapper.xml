<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.solbipos.iostock.orderReturn.rtnStoreOrder.service.impl.RtnStoreOrderMapper">

    <!-- 반품등록 HD 리스트 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : rtnStoreOrderVO
        COMMENTS : 반품등록 HD 리스트를 조회한다.
    -->
    <select id="getRtnStoreOrderList" parameterType="rtnStoreOrderVO" resultType="DefaultMap">
        /* USE : RtnStoreOrderMapper.getRtnStoreOrderList */
        <![CDATA[
        SELECT   tphso.REQ_DATE, tphso.STORE_CD
        ,        tphso.DTL_CNT, tphso.PROC_FG, tphso.REMARK
        ,        tphso.SLIP_FG, tphso.MOD_DT
        ,        tphso.ORDER_TOT_QTY*tphso.SLIP_FG AS ORDER_TOT_QTY
        ,        tphso.ORDER_AMT*tphso.SLIP_FG     AS ORDER_AMT
        ,        tphso.ORDER_VAT*tphso.SLIP_FG     AS ORDER_VAT
        ,        tphso.ORDER_TOT*tphso.SLIP_FG     AS ORDER_TOT
        ,        tphso.MD_TOT_QTY*tphso.SLIP_FG    AS MD_TOT_QTY
        ,        tphso.MD_AMT*tphso.SLIP_FG        AS MD_AMT
        ,        tphso.MD_VAT*tphso.SLIP_FG        AS MD_VAT
        ,        tphso.MD_TOT*tphso.SLIP_FG        AS MD_TOT
        FROM     TB_PO_HQ_STORE_ORDER tphso
        WHERE    tphso.STORE_CD   =   #{storeCd}
        ]]>
        <if test='dateFg == "req"'>
            AND tphso.REQ_DATE BETWEEN #{startDate} AND #{endDate}
        </if>
        <if test='dateFg == "reg"'>
            AND tphso.REG_DT BETWEEN #{startDate}||'000000' AND #{endDate}||'235959'
        </if>
        <if test='dateFg == "mod"'>
            AND tphso.MOD_DT BETWEEN #{startDate}||'000000' AND #{endDate}||'235959'
        </if>
        <if test='slipFg != null and slipFg != ""'>
            AND tphso.SLIP_FG = #{slipFg}
        </if>
        <if test='procFg != null and procFg != ""'>
            AND tphso.PROC_FG = #{procFg}
        </if>
        ORDER BY tphso.REQ_DATE DESC
    </select>

    <!-- 반품등록 DT 리스트 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL, TB_MS_PRODUCT, TB_HQ_ENVST
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 DT 리스트를 조회한다.
    -->
    <select id="getRtnStoreOrderDtlList" parameterType="rtnStoreOrderDtlVO" resultType="DefaultMap">
        /* USE : RtnStoreOrderMapper.getRtnStoreOrderDtlList */
        <![CDATA[
        SELECT   A.PROD_CD
	      ,      A.PROD_NM
	      ,      A.REQ_DATE
	      ,      A.STORE_CD
	      ,      A.SLIP_FG
	      , 	 A.REMARK
	      ,      A.VAT_FG01
	      ,      A.ORDER_SPLY_UPRC
	      ,      A.PO_MIN_QTY
	      ,      A.PO_UNIT_ALLOW_FG
	      ,      A.PO_UNIT_FG
	      ,      A.PO_UNIT_QTY
	      ,      A.ENVST0011
	      ,      A.PREV_ORDER_TOT_QTY
	      ,      A.ORDER_AMT
	      ,      A.ORDER_VAT
	      ,      A.ORDER_TOT
	      ,      A.ORDER_UNIT_QTY
          ,      A.ORDER_ETC_QTY
          ,      A.ORDER_TOT_QTY
	      ,      LISTAGG(                                     A.A_STORAGE_CD,                  '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_STORAGE_CD
	      ,      LISTAGG(                                     A.A_STORAGE_NM,                  '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_STORAGE_NM
	      ,      LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_UNIT_QTY    ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_UNIT_QTY
	      ,      LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_ETC_QTY     ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_ETC_QTY
	      ,      LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_TOT_QTY     ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_TOT_QTY
	      ,      LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_AMT         ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_AMT
	      ,      LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_VAT         ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_VAT
	      ,      LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_TOT         ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_TOT
	      FROM    (
	              SELECT  A.PROD_CD
	               ,      A.PROD_NM
	               ,      A.REQ_DATE
	               ,      A.STORE_CD
	               ,      A.SLIP_FG
	               , 	  A.REMARK
	               ,      A.VAT_FG01
	               ,      A.ORDER_SPLY_UPRC
	               ,      A.PO_MIN_QTY
	               ,      A.PO_UNIT_ALLOW_FG
	               ,      A.PO_UNIT_FG
	               ,      A.PO_UNIT_QTY
	               ,      A.ENVST0011
	               ,      A.PREV_ORDER_TOT_QTY
	               ,      A.ORDER_UNIT_QTY
          		   ,      A.ORDER_ETC_QTY
          	   	   ,      A.ORDER_TOT_QTY
	               ,      A.ORDER_AMT
	               ,      A.ORDER_VAT
	               ,      A.ORDER_TOT
	               ,      B.PROD_CD       AS  A_PROD_CD
	               ,      B.STORAGE_CD    AS  A_STORAGE_CD
	               ,      B.STORAGE_NM    AS  A_STORAGE_NM
	               ,      B.ORDER_UNIT_QTY   AS  A_ORDER_UNIT_QTY
	               ,      B.ORDER_ETC_QTY    AS  A_ORDER_ETC_QTY
	               ,      B.ORDER_TOT_QTY    AS  A_ORDER_TOT_QTY
	               ,      B.ORDER_AMT        AS  A_ORDER_AMT
	               ,      B.ORDER_VAT        AS  A_ORDER_VAT
	               ,      B.ORDER_TOT        AS  A_ORDER_TOT
	                FROM    (
	                        SELECT  NVL(tphso.REQ_DATE, #{reqDate})  AS    REQ_DATE
	                        ,       NVL(tphso.STORE_CD, #{storeCd})   AS   STORE_CD            
	                        ,       tphso.PROD_CD, tmp.PROD_NM, tphso.PO_UNIT_FG, tphso.PO_UNIT_QTY, tmp.PO_UNIT_ALLOW_FG
	                        ,       tphso.SLIP_FG, tphso.REMARK, tphso.ORDER_SPLY_UPRC, tmp.PO_MIN_QTY
	                        ,       TO_NUMBER(DECODE(tphso.ORDER_TOT_QTY , 0, NULL, tphso.ORDER_TOT_QTY *tphso.SLIP_FG)) AS PREV_ORDER_TOT_QTY
	                        ,       TO_NUMBER(DECODE(tphso.ORDER_UNIT_QTY, 0, NULL, tphso.ORDER_UNIT_QTY*tphso.SLIP_FG)) AS ORDER_UNIT_QTY
	                        ,       TO_NUMBER(DECODE(tphso.ORDER_ETC_QTY , 0, NULL, tphso.ORDER_ETC_QTY *tphso.SLIP_FG)) AS ORDER_ETC_QTY
	                        ,       TO_NUMBER(DECODE(tphso.ORDER_TOT_QTY , 0, NULL, tphso.ORDER_TOT_QTY *tphso.SLIP_FG)) AS ORDER_TOT_QTY
	                        ,       tphso.ORDER_AMT*tphso.SLIP_FG AS ORDER_AMT
	                        ,       tphso.ORDER_VAT*tphso.SLIP_FG AS ORDER_VAT
	                        ,       tphso.ORDER_TOT*tphso.SLIP_FG AS ORDER_TOT
	                        ,       DECODE(tmp.VAT_FG, '1', 1, 0) AS VAT_FG01
	                        ,       the.ENVST_VAL AS ENVST0011
	                        FROM    TB_PO_HQ_STORE_ORDER_DTL tphso
	                        ,       TB_MS_PRODUCT tmp
	                        ,       TB_HQ_ENVST the
	                        WHERE   tphso.REQ_DATE      =   #{reqDate}
	                        AND     tphso.STORE_CD      =   #{storeCd}
	                        AND     tphso.SLIP_FG       =   -1
	                        AND     tmp.STORE_CD        =   tphso.STORE_CD
	                        AND     tmp.PROD_CD         =   tphso.PROD_CD
	                        AND     the.HQ_OFFICE_CD    =   #{hqOfficeCd}
	                        AND     the.ENVST_CD        =   '0011'                        
	                        )   A
	                        LEFT OUTER JOIN
	                        (
	                             SELECT  X.STORE_CD,
	                                     X.STORAGE_CD,
	                                     X.STORAGE_NM,
	                                     Y.PROD_CD,
	                                     #{hqOfficeCd}               AS   HQ_OFFICE_CD,
	                                     NVL(Y.REQ_DATE, #{reqDate})      AS   REQ_DATE,
	                                     NVL(Y.SLIP_FG, 1)               AS   SLIP_FG,                                                     
	                                     NVL(Y.ORDER_UNIT_QTY,   0)      AS   ORDER_UNIT_QTY,
	                                     NVL(Y.ORDER_ETC_QTY,   0)      AS   ORDER_ETC_QTY,
	                                     NVL(Y.ORDER_TOT_QTY,   0)      AS   ORDER_TOT_QTY,
	                                     NVL(Y.ORDER_AMT,   0)         AS   ORDER_AMT,
	                                     NVL(Y.ORDER_VAT,   0)         AS   ORDER_VAT,
	                                     NVL(Y.ORDER_TOT,   0)         AS   ORDER_TOT
	                              FROM   TB_MS_STORAGE                     X
	                             LEFT
	                             OUTER
	                             JOIN    TB_PO_HQ_STORE_ORDER_PROD  Y
	                              ON      X.STORE_CD      =   Y.STORE_CD
	                              AND     X.STORAGE_CD    =   Y.STORAGE_CD
	                              AND     Y.REQ_DATE     =    #{reqDate}
	                              AND     Y.STORE_CD     =    #{storeCd}
	                              WHERE   X.STORE_CD     =    #{storeCd}
	                              AND     X.USE_YN    = 'Y'
	                         )   B
	                         ON      A.REQ_DATE      =   B.REQ_DATE
	                         AND      A.STORE_CD     =   B.STORE_CD
	                         AND     A.PROD_CD       =   (CASE NVL(B.PROD_CD,'X') WHEN 'X' THEN A.PROD_CD ELSE B.PROD_CD END)
	              )   A
		GROUP   
		BY      A.PROD_CD
		      ,      A.PROD_NM
		      ,      A.REQ_DATE
		      ,      A.STORE_CD
		      ,      A.SLIP_FG
		      , 	 A.REMARK
		      ,      A.VAT_FG01
		      ,      A.ORDER_SPLY_UPRC
		      ,      A.PO_MIN_QTY
		      ,      A.PO_UNIT_ALLOW_FG
		      ,      A.PO_UNIT_FG
		      ,      A.PO_UNIT_QTY
		      ,      A.ENVST0011
		      ,      A.PREV_ORDER_TOT_QTY
		      ,      A.ORDER_AMT
		      ,      A.ORDER_VAT
		      ,      A.ORDER_TOT
		      ,      A.ORDER_UNIT_QTY
          	  ,      A.ORDER_ETC_QTY
          	  ,      A.ORDER_TOT_QTY
		ORDER
		BY      A.PROD_CD     
        ]]>
    </select>

    <!-- 반품등록 상품추가 리스트 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL, TB_MS_PRODUCT, TB_HQ_ENVST
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 상품추가 리스트를 조회한다.
    -->
    <select id="getRtnStoreOrderRegistList" parameterType="rtnStoreOrderDtlVO" resultType="DefaultMap">
        /* USE : RtnStoreOrderMapper.getRtnStoreOrderRegistList */
        <include refid="CmmSQL.PagingTemplateHeader"/>
		SELECT   A.PROD_CD
	      ,      A.PROD_NM
	      ,      A.REQ_DATE
	      ,      A.STORE_CD
	      ,      A.SLIP_FG
	      ,      A.VAT_FG01
	      ,      A.HD_CUR_UNIT_QTY
	      ,      A.HD_CUR_ETC_QTY
	      ,      A.STORE_CUR_UNIT_QTY
	      ,      A.STORE_CUR_ETC_QTY
	      ,      A.SALE_UPRC
	      ,      A.ORDER_SPLY_UPRC
	      ,      A.PO_MIN_QTY
	      ,      A.PO_UNIT_ALLOW_FG
	      ,      A.PO_PROD_FG
	      ,      A.USE_YN
	      ,      A.PO_UNIT_FG
	      ,      A.PO_UNIT_QTY
	      ,      A.ENVST0011
	      ,      A.SAFE_STOCK_QTY
	      ,      A.SAFE_STOCK_UNIT_QTY
	      ,      A.SAFE_STOCK_ETC_QTY
	      ,      A.PREV_ORDER_UNIT_QTY
	      ,      A.PREV_ORDER_ETC_QTY
	      ,      A.PREV_ORDER_TOT_QTY
	      ,      A.ORDER_AMT
	      ,      A.ORDER_VAT
	      ,      A.ORDER_TOT
	      ,      LISTAGG(                                     A.A_STORAGE_CD,                  '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_STORAGE_CD
	      ,      LISTAGG(                                     A.A_STORAGE_NM,                  '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_STORAGE_NM
	      ,      LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_UNIT_QTY    ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_UNIT_QTY
	      ,      LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_ETC_QTY     ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_ETC_QTY
	      ,      LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_TOT_QTY     ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_TOT_QTY
	      ,      LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_AMT         ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_AMT
	      ,      LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_VAT         ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_VAT
	      ,      LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_TOT         ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_TOT
		<include refid="CmmSQL.PagingTemplateCount"/>
		FROM(
              SELECT  A.PROD_CD
               ,      A.PROD_NM
               ,      A.REQ_DATE
               ,      A.STORE_CD
               ,      A.SLIP_FG
               ,      A.VAT_FG01
               ,      A.HD_CUR_UNIT_QTY
               ,      A.HD_CUR_ETC_QTY
               ,      A.STORE_CUR_UNIT_QTY
               ,      A.STORE_CUR_ETC_QTY
               ,      A.SALE_UPRC
               ,      A.ORDER_SPLY_UPRC
               ,      A.PO_MIN_QTY
               ,      A.PO_UNIT_ALLOW_FG
               ,      A.PO_PROD_FG
               ,      A.USE_YN
               ,      A.PO_UNIT_FG
               ,      A.PO_UNIT_QTY
               ,      A.ENVST0011
               ,      A.SAFE_STOCK_QTY
               ,      A.SAFE_STOCK_UNIT_QTY
               ,      A.SAFE_STOCK_ETC_QTY
               ,      A.PREV_ORDER_UNIT_QTY
               ,      A.PREV_ORDER_ETC_QTY
               ,      A.PREV_ORDER_TOT_QTY
               ,      A.ORDER_AMT
               ,      A.ORDER_VAT
               ,      A.ORDER_TOT
         		<if test='option2 != null and option2 != ""'>
		         , 		A.ORDER_UNIT_QTY
		         ,	 	A.ORDER_ETC_QTY
		         , 		A.ORDER_TOT_QTY
		        </if>
               ,      B.PROD_CD       AS  A_PROD_CD
               ,      B.STORAGE_CD    AS  A_STORAGE_CD
               ,      B.STORAGE_NM    AS  A_STORAGE_NM
               ,      B.ORDER_UNIT_QTY   AS  A_ORDER_UNIT_QTY
               ,      B.ORDER_ETC_QTY    AS  A_ORDER_ETC_QTY
               ,      B.ORDER_TOT_QTY    AS  A_ORDER_TOT_QTY
               ,      B.ORDER_AMT        AS  A_ORDER_AMT
               ,      B.ORDER_VAT        AS  A_ORDER_VAT
               ,      B.ORDER_TOT        AS  A_ORDER_TOT
				FROM(
				        SELECT  tmp.PROD_CD
				        ,       tmp.PROD_NM
				        ,       NVL(tphso.REQ_DATE, #{reqDate})  AS    REQ_DATE
                    	,       NVL(tphso.STORE_CD, #{storeCd})   AS   STORE_CD
                    	,       NVL(tphso.SLIP_FG,   1)         AS   SLIP_FG
				        ,       DECODE(tmp.VAT_FG, '1', 1, 0) AS VAT_FG01
				        ,       TRUNC(DECODE(SIGN(tshsc.CURR_QTY),-1,0,tshsc.CURR_QTY) / tmp.PO_UNIT_QTY) AS HD_CUR_UNIT_QTY
				        ,       MOD  (DECODE(SIGN(tshsc.CURR_QTY),-1,0,tshsc.CURR_QTY) , tmp.PO_UNIT_QTY) AS HD_CUR_ETC_QTY
				        ,       TRUNC(NVL(tsssc.CURR_QTY,0)                            / tmp.PO_UNIT_QTY) AS STORE_CUR_UNIT_QTY
				        ,       MOD  (NVL(tsssc.CURR_QTY,0)                            , tmp.PO_UNIT_QTY) AS STORE_CUR_ETC_QTY
				        ,		NVL((SELECT MAX(SALE_UPRC) KEEP(DENSE_RANK FIRST ORDER BY REG_DT DESC)
				                              FROM TB_MS_PRODUCT_SALE_PRICE
				                             WHERE STORE_CD = tmp.STORE_CD
				                               AND PROD_CD = tmp.PROD_CD
				                               AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN START_DATE AND END_DATE
				                            ), 0) AS SALE_UPRC
				        , 		tmp.SPLY_UPRC AS ORDER_SPLY_UPRC
				        ,       tmp.PO_MIN_QTY
				        ,       tmp.PO_UNIT_ALLOW_FG
				        ,       tmp.PO_PROD_FG
				        ,       tmp.USE_YN
				        ,       tmp.PO_UNIT_FG
				        ,       tmp.PO_UNIT_QTY
				        ,       the.ENVST_VAL AS ENVST0011
				        ,       tmp.SAFE_STOCK_QTY
				        ,       TRUNC(DECODE(SIGN(tmp.SAFE_STOCK_QTY),-1,0,tmp.SAFE_STOCK_QTY) / tmp.PO_UNIT_QTY) AS SAFE_STOCK_UNIT_QTY
				        ,       MOD  (DECODE(SIGN(tmp.SAFE_STOCK_QTY),-1,0,tmp.SAFE_STOCK_QTY) , tmp.PO_UNIT_QTY) AS SAFE_STOCK_ETC_QTY
				        ,       TO_NUMBER(DECODE(tphsod.ORDER_UNIT_QTY, 0, NULL, tphsod.ORDER_UNIT_QTY*tphsod.SLIP_FG)) AS PREV_ORDER_UNIT_QTY
				        ,       TO_NUMBER(DECODE(tphsod.ORDER_ETC_QTY,  0, NULL, tphsod.ORDER_ETC_QTY*tphsod.SLIP_FG )) AS PREV_ORDER_ETC_QTY
				        ,       TO_NUMBER(DECODE(tphsod.ORDER_TOT_QTY,  0, NULL, tphsod.ORDER_TOT_QTY*tphsod.SLIP_FG )) AS PREV_ORDER_TOT_QTY
				        ,       TO_NUMBER(DECODE(tphso.ORDER_AMT    ,  0, NULL, tphso.ORDER_AMT*tphso.SLIP_FG     )) AS ORDER_AMT
				        ,       TO_NUMBER(DECODE(tphso.ORDER_VAT    ,  0, NULL, tphso.ORDER_VAT*tphso.SLIP_FG     )) AS ORDER_VAT
				        ,       TO_NUMBER(DECODE(tphso.ORDER_TOT    ,  0, NULL, tphso.ORDER_TOT*tphso.SLIP_FG     )) AS ORDER_TOT
				        <if test='option2 != null and option2 != ""'>
				        , 		optionTb.ORDER_UNIT_QTY
				        , 		optionTb.ORDER_ETC_QTY
				        , 		optionTb.ORDER_TOT_QTY
				        </if>				        
				        <![CDATA[
				        FROM    TB_MS_PRODUCT tmp
				        ,       TB_ST_STORE_STOCK_CUR tsssc
				        ,       (   SELECT  PROD_CD, CURR_QTY
				                    FROM    TB_ST_HQ_STOCK_CUR
				                    WHERE   HQ_OFFICE_CD  =   #{hqOfficeCd}
				                    AND     STORAGE_CD      =   '999'	
				                )   tshsc
				        ,       TB_PO_HQ_STORE_ORDER_DTL tphso
				        ,       TB_PO_HQ_STORE_ORDER_DTL tphsod
				        ,       TB_HQ_ENVST the
				        ]]>
				        <if test='option2 == "ORD"'>
				            ,   (   SELECT  tphsod.PROD_CD
				            ,       TRUNC(SUM(tphsod.ORDER_TOT_QTY) / tphsod.PO_UNIT_QTY) AS ORDER_UNIT_QTY
				            ,       MOD  (SUM(tphsod.ORDER_TOT_QTY) , tphsod.PO_UNIT_QTY) AS ORDER_ETC_QTY
				            ,       SUM(tphsod.ORDER_TOT_QTY) AS ORDER_TOT_QTY
				            FROM    TB_PO_HQ_STORE_ORDER_DTL tphsod
				            WHERE   tphsod.STORE_CD = #{storeCd}
				            AND     tphsod.REQ_DATE BETWEEN #{startDate} AND #{endDate}
				            GROUP
				            BY      tphsod.PROD_CD, tphsod.PO_UNIT_QTY
				            ) optionTb
				        </if>
				        <if test='option2 == "OUT"'>
				            ,   (   SELECT  tphsod.PROD_CD
				            ,       TRUNC(SUM(tphsod.ORDER_TOT_QTY) / tphsod.PO_UNIT_QTY) AS ORDER_UNIT_QTY
				            ,       MOD  (SUM(tphsod.ORDER_TOT_QTY) , tphsod.PO_UNIT_QTY) AS ORDER_ETC_QTY
				            ,       SUM(tphsod.ORDER_TOT_QTY) AS ORDER_TOT_QTY
				            FROM    TB_PO_HQ_STORE_OUTSTOCK tphso
				            ,       TB_PO_HQ_STORE_OUTSTOCK_DTL tphsod
				            WHERE   tphso.STORE_CD = #{storeCd}
				            AND     tphso.OUT_DATE      BETWEEN #{startDate} AND #{endDate}
				            AND     tphso.PROC_FG       IN ('20', '30')
				            AND     tphsod.HQ_OFFICE_CD = tphso.HQ_OFFICE_CD
				            AND     tphsod.SLIP_NO      = tphso.SLIP_NO
				            GROUP
				            BY      tphsod.PROD_CD, tphsod.PO_UNIT_QTY
				            ) optionTb
				        </if>
				        <if test='option2 == "SALE"'>
				            ,   (   SELECT  tsdp.PROD_CD
				            ,       TRUNC(SUM(tsdp.TOT_SALE_QTY) / tmp.PO_UNIT_QTY) AS ORDER_UNIT_QTY
				            ,       MOD  (SUM(tsdp.TOT_SALE_QTY) , tmp.PO_UNIT_QTY) AS ORDER_ETC_QTY
				            ,       SUM(tsdp.TOT_SALE_QTY) AS ORDER_TOT_QTY
				            FROM    TB_SL_DAILY_PROD tsdp
				            ,       TB_MS_PRODUCT tmp
				            WHERE   tsdp.STORE_CD   = #{storeCd}
				            AND     tsdp.SALE_DATE  BETWEEN #{startDate} AND #{endDate}
				            AND     tmp.PROD_CD  = tsdp.PROD_CD
				            GROUP
				            BY      tsdp.PROD_CD, tmp.PO_UNIT_QTY
				            ) optionTb
				        </if>
				        <![CDATA[
				        WHERE   tmp.STORE_CD          =   #{storeCd}
				        AND     tmp.USE_YN            =   'Y'
				        AND     tsssc.STORE_CD        =   #{storeCd}
				        AND     tsssc.STORAGE_CD      =   '999'	
	                    AND     tsssc.STORE_CD    (+) =   tmp.STORE_CD
	                    AND     tsssc.PROD_CD     (+) =   tmp.PROD_CD
	                    AND     tshsc.PROD_CD     (+) =   tmp.PROD_CD
				        AND     tphso.REQ_DATE    (+) =   #{reqDate}
				        AND     tphsod.REQ_DATE   (+) =   #{reqDate}
				        			
				        AND     tphso.STORE_CD    (+) =   tmp.STORE_CD
				        AND     tphso.PROD_CD     (+) =   tmp.PROD_CD
				        AND     tphso.SLIP_FG     (+) =   1
				        AND     tphsod.STORE_CD   (+) =   tmp.STORE_CD
                   		AND     tphsod.PROD_CD    (+) =   tmp.PROD_CD
                    	AND     tphsod.SLIP_FG    (+) =   -1
				        AND     the.HQ_OFFICE_CD      =   #{hqOfficeCd}
				        AND     the.ENVST_CD          =   '0011'
				        AND     TMP.PROD_CD NOT IN  (SELECT PROD_CD FROM TB_PO_HQ_STORE_DISTRIBUTE WHERE REQ_DATE = #{reqDate} AND PROC_FG IN ('20','30') AND SLIP_FG = -1)
				        ]]>
				        <if test='prodCd != null and prodCd != ""'>
				            AND tmp.PROD_CD = #{prodCd}
				        </if>
				        <if test='prodNm != null and prodNm != ""'>
				            AND tmp.PROD_NM LIKE '%'||#{prodNm}||'%'
				        </if>
				        <if test="barcdCd != null and barcdCd != ''">
				            AND tmp.PROD_CD IN  ( SELECT  tmpb.PROD_CD
				                                  FROM    TB_MS_PRODUCT_BARCD tmpb
				                                  WHERE   tmpb.STORE_CD  = #{storeCd}
				                                  AND     tmpb.BARCD_CD  = #{barcdCd}
				                                )
				        </if>
				        <if test="prodClassCd != null and prodClassCd != ''">
				            AND tmp.PROD_CLASS_CD IN  ( SELECT  #{prodClassCd} AS PROD_CLASS_CD
				                                        FROM    DUAL
				                                        UNION
				                                        SELECT  tmpc.PROD_CLASS_CD
				                                        FROM    TB_MS_PRODUCT_CLASS tmpc
				                                        WHERE   tmpc.STORE_CD = #{storeCd}
				                                        START WITH  tmpc.P_PROD_CLASS_CD = #{prodClassCd}
				                                        CONNECT BY  tmpc.P_PROD_CLASS_CD = PRIOR tmpc.PROD_CLASS_CD
				                                      )
				        </if>
				        <if test='option1 == "S"'>
				            <![CDATA[
				            AND NVL(tsssc.CURR_QTY, 0) < NVL(tmp.SAFE_STOCK_QTY, 0)
				            AND NVL(tmp.SAFE_STOCK_QTY,0) > 0
				            ]]>
				        </if>
				        <if test='option2 != null and option2 != ""'>
				            AND optionTb.PROD_CD  = tmp.PROD_CD
				        </if>
		        )A
		        LEFT OUTER JOIN
		         (
		             SELECT  X.STORE_CD,
		                     X.STORAGE_CD,
		                     X.STORAGE_NM,
		                     Y.PROD_CD,
		                     #{hqOfficeCd}					AS   HQ_OFFICE_CD,
		                     NVL(Y.REQ_DATE, #{reqDate})   	AS   REQ_DATE,
                             NVL(Y.SLIP_FG, 1)         		AS   SLIP_FG,	                     
		                     NVL(Y.ORDER_UNIT_QTY,   0)   	AS   ORDER_UNIT_QTY,
                             NVL(Y.ORDER_ETC_QTY,   0)   	AS   ORDER_ETC_QTY,
                             NVL(Y.ORDER_TOT_QTY,   0)   	AS   ORDER_TOT_QTY,
                             NVL(Y.ORDER_AMT,   0)      	AS   ORDER_AMT,
                             NVL(Y.ORDER_VAT,   0)      	AS   ORDER_VAT,
                             NVL(Y.ORDER_TOT,   0)      	AS   ORDER_TOT
		              FROM   TB_MS_STORAGE                     X
		             LEFT
                     OUTER
                     JOIN    (
                                SELECT  X.STORE_CD
                                ,       X.PROD_CD                               
                                ,       NVL(Y.REQ_DATE, #{reqDate})      AS   REQ_DATE
                                ,       NVL(Y.STORAGE_CD, X.STORAGE_CD) AS STORAGE_CD
                                ,       NVL(Y.SLIP_FG, 1)               AS   SLIP_FG
                              ,       NVL(Y.ORDER_UNIT_QTY,   0)      AS   ORDER_UNIT_QTY
                                ,       NVL(Y.ORDER_ETC_QTY,   0)      AS   ORDER_ETC_QTY
                                ,       NVL(Y.ORDER_TOT_QTY,   0)      AS   ORDER_TOT_QTY
                                ,       NVL(Y.ORDER_AMT,   0)         AS   ORDER_AMT
                                ,       NVL(Y.ORDER_VAT,   0)         AS   ORDER_VAT
                                ,       NVL(Y.ORDER_TOT,   0)         AS   ORDER_TOT
                                FROM    TB_ST_STORE_STOCK_CUR    X                                
                                ,       TB_PO_HQ_STORE_ORDER_PROD       Y
                                WHERE   Y.STORE_CD (+) 		=   X.STORE_CD
                                AND     Y.PROD_CD  (+)  	= X.PROD_CD
                                AND     Y.STORAGE_CD  (+)  	= X.STORAGE_CD
                                AND     Y.REQ_DATE  (+) 	=    #{reqDate}
                                AND     Y.STORE_CD (+) 		=    #{storeCd}                              
                                AND     X.STORE_CD  		=   #{storeCd}   
                                AND     X.STORAGE_CD   		>=    '001'
                                AND     X.STORAGE_CD   		<![CDATA[ < ]]>   '999'
                     )  Y
		               ON      X.STORE_CD      =   Y.STORE_CD
                      AND     X.STORAGE_CD    =    Y.STORAGE_CD
                      AND     Y.REQ_DATE     =    #{reqDate}
                      AND     Y.STORE_CD     =    #{storeCd}
                      WHERE   X.STORE_CD     =    #{storeCd}
                      AND     X.USE_YN    = 'Y'
		         )   B
				 ON       A.REQ_DATE      =   B.REQ_DATE
                 AND      A.STORE_CD     =   B.STORE_CD
                 AND      A.SLIP_FG      =   B.SLIP_FG
                 AND      A.PROD_CD       =   (CASE NVL(B.PROD_CD,'X') WHEN 'X' THEN A.PROD_CD ELSE B.PROD_CD END)
        ) A
      GROUP
      BY      A.PROD_CD
      ,      A.PROD_NM
      ,      A.REQ_DATE
      ,      A.STORE_CD
      ,      A.SLIP_FG
      ,      A.VAT_FG01
      ,      A.HD_CUR_UNIT_QTY
      ,      A.HD_CUR_ETC_QTY
      ,      A.STORE_CUR_UNIT_QTY
      ,      A.STORE_CUR_ETC_QTY
      ,      A.SALE_UPRC
      ,      A.ORDER_SPLY_UPRC
      ,      A.PO_MIN_QTY
      ,      A.PO_UNIT_ALLOW_FG
      ,      A.PO_PROD_FG
      ,      A.USE_YN
      ,      A.PO_UNIT_FG
      ,      A.PO_UNIT_QTY
      ,      A.ENVST0011
      ,      A.SAFE_STOCK_QTY
      ,      A.SAFE_STOCK_UNIT_QTY
      ,      A.SAFE_STOCK_ETC_QTY
      ,      A.PREV_ORDER_UNIT_QTY
      ,      A.PREV_ORDER_ETC_QTY
      ,      A.PREV_ORDER_TOT_QTY
      ,      A.ORDER_AMT
      ,      A.ORDER_VAT
      ,      A.ORDER_TOT
      ORDER
      BY      A.PROD_CD
        <include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <!-- 반품등록 요청일의 상품건수 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 요청일의 상품건수 조회한다.
    -->
    <select id="getDtlCnt" parameterType="rtnStoreOrderVO" resultType="Integer">
        /* USE : RtnStoreOrderMapper.getDtlCnt */
        <![CDATA[
        SELECT  COUNT(tphsod.PROD_CD) AS DTL_CNT
        FROM    TB_PO_HQ_STORE_ORDER_DTL tphsod
        WHERE   tphsod.REQ_DATE    = #{reqDate}
        AND     tphsod.STORE_CD    = #{storeCd}
        AND     tphsod.SLIP_FG     = #{slipFg}
        ]]>
    </select>

    <!-- 반품등록 요청일의 HD 내용이 존재하는지 여부 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 요청일의 HD 내용이 존재하는지 여부 조회한다.
    -->
    <select id="getHdExist" parameterType="rtnStoreOrderVO" resultType="String">
        /* USE : RtnStoreOrderMapper.getHdExist */
        <![CDATA[
        SELECT  DECODE(COUNT(*), 0, 'N', 'Y') AS IS_EXIST
        FROM    TB_PO_HQ_STORE_ORDER tphso
        WHERE   tphso.REQ_DATE    = #{reqDate}
        AND     tphso.STORE_CD    = #{storeCd}
        AND     tphso.SLIP_FG     = #{slipFg}
        ]]>
    </select>

    <!-- 반품등록 반품진행구분 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : rtnStoreOrderVO
        COMMENTS : 반품등록 반품진행구분을 조회한다.
    -->
    <select id="getOrderProcFgCheck" parameterType="rtnStoreOrderVO" resultType="DefaultMap">
        /* USE : RtnStoreOrderMapper.getOrderProcFgCheck */
        <![CDATA[
        SELECT  PROC_FG, REMARK
        FROM    TB_PO_HQ_STORE_ORDER tphso
        WHERE   tphso.REQ_DATE    = #{reqDate}
        AND     tphso.STORE_CD    = #{storeCd}
        AND     tphso.SLIP_FG     = #{slipFg}
        ]]>
    </select>

    <!-- 반품등록 출고요청가능일 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DAYS, TB_PO_HQ_STORE_ORDER_SPECIFIC, TB_PO_HQ_STORE_CLOSE
        PARAM    : rtnStoreOrderVO
        COMMENTS : 반품등록 출고요청가능일 조회한다.
    -->
    <select id="getReqDate" parameterType="rtnStoreOrderVO" resultType="String">
        /* USE : RtnStoreOrderMapper.getReqDate */
        <![CDATA[
        SELECT	*
        FROM	(	SELECT  A.DAY AS ORDER_DATE
                    FROM    (   SELECT  TO_CHAR(SYSDATE + LEVEL - 1,'YYYYMMDD') AS DAY
						        ,       TO_CHAR(SYSDATE + LEVEL - 1,'D')    	AS WEEK
                                FROM    DUAL
                                CONNECT
                                BY      LEVEL <= 30
                            )   A
                    ,       TB_PO_HQ_STORE_ORDER_DAYS tphsod
                    WHERE   tphsod.STORE_CD    (+) =       #{storeCd}
                    AND     tphsod.REQ_NO_DAY  (+) LIKE    '%'||A.WEEK||'%'
                    AND     tphsod.REQ_NO_DAY      IS      NULL
                    AND     A.DAY                   NOT IN  (   SELECT  SPECIFIC_DATE
                                                                FROM    TB_PO_HQ_STORE_ORDER_SPECIFIC tphsos
                                                                WHERE   STORE_CD        =   #{storeCd}
                                                                AND     OUTSTOCK_REQ_YN =   'N'
                                                            )
                    UNION
                    SELECT  SPECIFIC_DATE    ORDER_DATE
                    FROM    TB_PO_HQ_STORE_ORDER_SPECIFIC tphsos
                    WHERE   STORE_CD          =   #{storeCd}
                    AND     SPECIFIC_DATE     >=  TO_CHAR(SYSDATE,'YYYYMMDD')
                    AND     OUTSTOCK_REQ_YN   =   'Y'
                    MINUS
                    SELECT  tphsc.CLOSE_DATE  ORDER_DATE
                    FROM    TB_PO_HQ_STORE_CLOSE tphsc
                    WHERE   HQ_OFFICE_CD    =   #{hqOfficeCd}
                    AND     CLOSE_DATE      >=  TO_CHAR(SYSDATE,'YYYYMMDD')
                    AND     ORDER_CLOSE_FG  =   '1'
                    ORDER
                    BY      ORDER_DATE
                )
        WHERE	ROWNUM	=	1
        ]]>
    </select>

    <!-- 반품등록 반품상품 DTL 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 반품상품 DTL을 등록한다.
    -->
    <insert id="insertRtnStoreOrderDtl" parameterType="rtnStoreOrderDtlVO">
        /* USE : RtnStoreOrderMapper.insertRtnStoreOrderDtl */
        INSERT INTO TB_PO_HQ_STORE_ORDER_DTL
        (
            REQ_DATE,
            STORE_CD,
            SLIP_FG,
            HQ_BRAND_CD,
            PROD_CD,
            PO_UNIT_FG,
            PO_UNIT_QTY,
            ORDER_SPLY_UPRC,
            ORDER_UNIT_QTY,
            ORDER_ETC_QTY,
            ORDER_TOT_QTY,
            ORDER_AMT,
            ORDER_VAT,
            ORDER_TOT,
            REMARK,
            REG_DT,
            REG_ID,
            MOD_DT,
            MOD_ID
        )
        VALUES
        (
            #{reqDate},
            #{storeCd},
            #{slipFg},
            #{hqBrandCd},
            #{prodCd},
            #{poUnitFg},
            #{poUnitQty},
            #{orderSplyUprc},
            #{orderUnitQty},
            #{orderEtcQty},
            #{orderTotQty},
            #{orderAmt},
            #{orderVat},
            #{orderTot},
            #{remark},
            #{regDt},
            #{regId},
            #{modDt},
            #{modId}
        )
    </insert>
      
    <!-- 반품등록 반품상품 수정 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_PROD
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 반품상품 PROD를 수정한다.
    -->	
	<update id="updateRtnStoreOrderProd" parameterType="rtnStoreOrderDtlVO">
		/* USE : RtnStoreOrderMapper.updateRtnStoreOrderProd */
	    UPDATE  TB_PO_HQ_STORE_ORDER_PROD 
        SET     (  	
              		 PO_UNIT_QTY 
              		,ORDER_UNIT_QTY	
              		,ORDER_ETC_QTY	
              		,ORDER_TOT_QTY	
              		,ORDER_AMT		
              		,ORDER_VAT		
              		,ORDER_TOT			
				 )
            =   ( SELECT  (PO_UNIT_QTY)+#{poUnitQty}
            			, (ORDER_UNIT_QTY)+#{orderUnitQty}
            			, (ORDER_ETC_QTY)+#{orderEtcQty}
            			, (ORDER_TOT_QTY)+#{orderTotQty}
                        , (ORDER_AMT)+#{orderAmt}
            			, (ORDER_VAT)+#{orderVat}
            			, (ORDER_TOT)+#{orderTot}
            	  FROM TB_PO_HQ_STORE_ORDER_PROD
				  WHERE REQ_DATE = #{reqDate} 
				  AND STORE_CD = #{storeCd} 
				  AND SLIP_FG = #{slipFg} 
				  AND PROD_CD = #{prodCd} 
				  AND STORAGE_CD = #{storageCd}
                )
        ,       MOD_DT  = #{modDt}
        ,       MOD_ID  = #{modId}
		WHERE REQ_DATE = #{reqDate} 
		AND STORE_CD = #{storeCd} 
		AND SLIP_FG = #{slipFg} 
		AND PROD_CD = #{prodCd} 
		AND STORAGE_CD = #{storageCd}
	</update>	
	
	<!-- 반품등록 반품상품 PROD 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_PROD
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 반품상품 PROD를 등록한다.
    -->
    <insert id="savetRtnStoreOrderProd" parameterType="rtnStoreOrderDtlVO">
        /* USE : RtnStoreOrderMapper.savetRtnStoreOrderProd */
       MERGE INTO TB_PO_HQ_STORE_ORDER_PROD TPHSOP
        USING DUAL
           ON (TPHSOP.REQ_DATE = #{reqDate} AND TPHSOP.STORE_CD = #{storeCd} AND TPHSOP.SLIP_FG = #{slipFg} AND TPHSOP.PROD_CD = #{prodCd} AND TPHSOP.STORAGE_CD = #{storageCd})
         WHEN MATCHED THEN
       UPDATE
          SET TPHSOP.PO_UNIT_FG 	= #{poUnitFg},
              TPHSOP.PO_UNIT_QTY 	= #{poUnitQty},
              TPHSOP.ORDER_SPLY_UPRC= #{orderSplyUprc},
              TPHSOP.ORDER_UNIT_QTY	= #{orderUnitQty},
              TPHSOP.ORDER_ETC_QTY	= #{orderEtcQty},
              TPHSOP.ORDER_TOT_QTY	= #{orderTotQty},
              TPHSOP.ORDER_AMT		= #{orderAmt},
              TPHSOP.ORDER_VAT		= #{orderVat},
              TPHSOP.ORDER_TOT		= #{orderTot},
              TPHSOP.MOD_DT 		= #{modDt},
              TPHSOP.MOD_ID 		= #{modId}
         WHEN NOT MATCHED THEN
         INSERT
         (
         	 TPHSOP.STORAGE_CD,
         	 TPHSOP.PROD_CD,
         	 TPHSOP.SLIP_FG,
         	 TPHSOP.REQ_DATE,
         	 TPHSOP.STORE_CD,
             TPHSOP.PO_UNIT_FG , 
             TPHSOP.PO_UNIT_QTY, 	
             TPHSOP.ORDER_SPLY_UPRC, 
             TPHSOP.ORDER_UNIT_QTY,	
             TPHSOP.ORDER_ETC_QTY,	
             TPHSOP.ORDER_TOT_QTY,	
             TPHSOP.ORDER_AMT,		
             TPHSOP.ORDER_VAT,		
             TPHSOP.ORDER_TOT,		
             TPHSOP.REG_DT,
             TPHSOP.REG_ID,
             TPHSOP.MOD_DT,
             TPHSOP.MOD_ID
         )
         VALUES
         (	 
         	 #{storageCd},
         	 #{prodCd},
         	 '1',        	 
         	 #{reqDate},
         	 #{storeCd},
             #{poUnitFg},
             #{poUnitQty},
             #{orderSplyUprc},
             #{orderUnitQty},
             #{orderEtcQty},
             #{orderTotQty},
             #{orderAmt},
             #{orderVat},
             #{orderTot},
             #{regDt},
             #{regId},
             #{modDt},
             #{modId}
         )
    </insert>
	
	<!-- 반품등록 반품상품 엑셀업로드 PROD 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_PROD
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 반품상품 엑셀업로드 PROD를 등록한다.
    -->
    <insert id="insertExlRtnStoreOrderProd" parameterType="excelUploadVO">
        /* USE : RtnStoreOrderMapper.savetExlRtnStoreOrderProd */         
		INSERT INTO TB_PO_HQ_STORE_ORDER_PROD
        (   
        	 STORAGE_CD,
         	 PROD_CD,
         	 SLIP_FG,
         	 REQ_DATE,
         	 STORE_CD,
             PO_UNIT_FG , 
             PO_UNIT_QTY, 	
             ORDER_SPLY_UPRC, 
             ORDER_UNIT_QTY,	
             ORDER_ETC_QTY,	
             ORDER_TOT_QTY,	
             ORDER_AMT,		
             ORDER_VAT,		
             ORDER_TOT,		
             REG_DT,
             REG_ID,
             MOD_DT,
             MOD_ID
        )
        SELECT  '001'         
        ,       tmp.PROD_CD    
        ,       '1'
        ,   	#{date}
        ,   	#{storeCd}
        ,       tmp.PO_UNIT_FG  
        ,       tmp.PO_UNIT_QTY
        ,       tmp.SPLY_UPRC
        ,       tpte.UNIT_QTY  
        ,       tpte.ETC_QTY  
        ,       tpte.QTY 
        ,       (ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)
              - ROUND(ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)*DECODE(tmp.VAT_FG, '1', 1, 0)*NVL(tmse.ENVST_VAL,0)/11))  AS ORDER_AMT
        ,       (ROUND(ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)*DECODE(tmp.VAT_FG, '1', 1, 0)/(10+NVL(tmse.ENVST_VAL,0))))  AS ORDER_VAT
        ,       (ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)
              - ROUND(ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)*DECODE(tmp.VAT_FG, '1', 1, 0)*NVL(tmse.ENVST_VAL,0)/11)
              + ROUND(ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)*DECODE(tmp.VAT_FG, '1', 1, 0)/(10+NVL(tmse.ENVST_VAL,0))))  AS ORDER_TOT
        ,       #{regDt}
        ,       #{regId}
        ,       #{modDt}
        ,       #{modId}
        FROM    (   SELECT  tpte.STORE_CD
                    ,       tpte.PROD_CD
                    ,       TRUNC(SUM(NVL(tpte.UNIT_QTY, 0)*tmp.PO_UNIT_QTY+NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0))/tmp.PO_UNIT_QTY) AS UNIT_QTY
                    ,       ( MOD   (SUM(NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0)),tmp.PO_UNIT_QTY)
                            * DECODE(-1, 1, DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 1, 1), 'B', 0, 1), DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 2, 1), 'B', 0, 1))
                            ) AS ETC_QTY
                    ,       (SUM (NVL(tpte.UNIT_QTY, 0)*tmp.PO_UNIT_QTY+NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0))
                                - DECODE(-1, 1, DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 1, 1), 'B', MOD(SUM(NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0)),tmp.PO_UNIT_QTY), 0)
                                , DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 2, 1), 'B', MOD(SUM(NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0)),tmp.PO_UNIT_QTY), 0)
                              )
                            ) AS QTY
                    ,       MAX(tpte.REMARK) AS REMARK
                    FROM    TB_PO_TEMP_EXCEL tpte
                    ,       TB_MS_PRODUCT tmp
                    WHERE   tpte.SESSION_ID =   #{sessionId}
                    AND     tpte.PROD_CD    IS  NOT NULL
                    AND     tmp.STORE_CD    =   tpte.STORE_CD
                    AND     tmp.PROD_CD     =   tpte.PROD_CD
                    AND     tmp.STORE_CD    =   #{storeCd}
                    AND     tmp.PO_PROD_FG  IN  ('1','3')
                    AND     tmp.USE_YN      =   'Y'
                    GROUP
                    BY      tpte.STORE_CD
                    ,       tpte.PROD_CD
                    ,       tmp.PO_UNIT_QTY
                    ,       tmp.PO_UNIT_ALLOW_FG
                ) tpte
        ,       TB_MS_PRODUCT tmp
        ,       TB_MS_STORE_ENVST tmse        
        WHERE   tmp.STORE_CD       =   #{storeCd}
        AND     tmp.STORE_CD       =   tpte.STORE_CD
        AND     tmp.PROD_CD        =   tpte.PROD_CD
        AND     tmse.STORE_CD      =   tmp.STORE_CD
        AND     tmse.ENVST_CD      =   '0011'
        AND     NVL(tpte.QTY,0)    >   0          
    </insert>
	
    <!-- 반품등록 반품상품 DTL 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 반품상품 DTL을 수정한다.
    -->
    <update id="updateRtnStoreOrderDtl" parameterType="rtnStoreOrderDtlVO">
        /* USE : RtnStoreOrderMapper.updateRtnStoreOrderDtl */
        UPDATE  TB_PO_HQ_STORE_ORDER_DTL
        SET     PO_UNIT_FG         = #{poUnitFg},
                PO_UNIT_QTY        = #{poUnitQty},
                ORDER_SPLY_UPRC    = #{orderSplyUprc},
                ORDER_UNIT_QTY     = #{orderUnitQty},
                ORDER_ETC_QTY      = #{orderEtcQty},
                ORDER_TOT_QTY      = #{orderTotQty},
                ORDER_AMT          = #{orderAmt},
                ORDER_VAT          = #{orderVat},
                ORDER_TOT          = #{orderTot},
                REMARK             = #{remark},
                MOD_DT             = #{modDt},
                MOD_ID             = #{modId}
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = #{slipFg}
        AND     PROD_CD     = #{prodCd}
    </update>

    <!-- 반품등록 반품상품 DTL 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 반품상품 DTL을 삭제한다.
    -->
    <delete id="deleteRtnStoreOrderDtl" parameterType="rtnStoreOrderDtlVO">
        /* USE : RtnStoreOrderMapper.deleteRtnStoreOrderDtl */
        DELETE  TB_PO_HQ_STORE_ORDER_DTL
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = #{slipFg}
        AND     PROD_CD     = #{prodCd}
    </delete>
	
	<!-- 반품등록 반품상품 PROD 삭제 -->
    <!--
        TABLE    : deleteRtnStoreOrderProd
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 반품상품 PROD를 삭제한다.
    -->
    <delete id="deleteRtnStoreOrderProd" parameterType="rtnStoreOrderDtlVO">
        /* USE : RtnStoreOrderMapper.deleteRtnStoreOrderProd */
        DELETE  TB_PO_HQ_STORE_ORDER_PROD
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = '1'
        AND     PROD_CD     = #{prodCd}
    </delete>
	
    <!-- 반품등록 반품상품 HD 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : rtnStoreOrderVO
        COMMENTS : 반품등록 반품상품 HD를 등록한다.
    -->
    <insert id="insertRtnStoreOrder" parameterType="rtnStoreOrderVO">
        /* USE : RtnStoreOrderMapper.insertRtnStoreOrder */
        INSERT INTO TB_PO_HQ_STORE_ORDER
        (
            REQ_DATE,
            STORE_CD,
            EMP_NO,
            SLIP_FG,
            ORDER_UNIT_QTY,
            ORDER_ETC_QTY,
            ORDER_TOT_QTY,
            ORDER_AMT,
            ORDER_VAT,
            ORDER_TOT,
            DTL_CNT,
            PROC_FG,
            MD_UNIT_QTY,
            MD_ETC_QTY,
            MD_TOT_QTY,
            MD_AMT,
            MD_VAT,
            MD_TOT,
            REMARK,
            REG_DT,
            REG_ID,
            MOD_DT,
            MOD_ID
        )
        SELECT  tphsod.REQ_DATE
        ,       tphsod.STORE_CD
        ,       #{empNo}
        ,       tphsod.SLIP_FG
        ,       SUM(tphsod.ORDER_UNIT_QTY)
        ,       SUM(tphsod.ORDER_ETC_QTY)
        ,       SUM(tphsod.ORDER_TOT_QTY)
        ,       SUM(tphsod.ORDER_AMT)
        ,       SUM(tphsod.ORDER_VAT)
        ,       SUM(tphsod.ORDER_TOT)
        ,       COUNT(tphsod.PROD_CD)
        ,       #{procFg}
        ,       0
        ,       0
        ,       0
        ,       0
        ,       0
        ,       0
        ,       #{remark}
        ,       #{regDt}
        ,       #{regId}
        ,       #{modDt}
        ,       #{modId}
        FROM    TB_PO_HQ_STORE_ORDER_DTL tphsod
        WHERE   tphsod.REQ_DATE  = #{reqDate}
        AND     tphsod.STORE_CD  = #{storeCd}
        AND     tphsod.SLIP_FG   = #{slipFg}
        GROUP
        BY      tphsod.REQ_DATE
        ,       tphsod.STORE_CD
        ,       tphsod.SLIP_FG
    </insert>

    <!-- 반품등록 반품상품 HD 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : rtnStoreOrderVO
        COMMENTS : 반품등록 반품상품 HD를 수정한다.
    -->
    <update id="updateRtnStoreOrder" parameterType="rtnStoreOrderVO">
        /* USE : RtnStoreOrderMapper.updateRtnStoreOrder */
        UPDATE  TB_PO_HQ_STORE_ORDER
        SET     ( ORDER_UNIT_QTY, ORDER_ETC_QTY, ORDER_TOT_QTY
                , ORDER_AMT, ORDER_VAT, ORDER_TOT
                , MD_UNIT_QTY, MD_ETC_QTY, MD_TOT_QTY
                , MD_AMT, MD_VAT, MD_TOT
                , DTL_CNT)
            =   ( SELECT  NVL(SUM(tphsod.ORDER_UNIT_QTY), 0), NVL(SUM(tphsod.ORDER_ETC_QTY), 0), NVL(SUM(tphsod.ORDER_TOT_QTY), 0)
                  ,       NVL(SUM(tphsod.ORDER_AMT), 0)     , NVL(SUM(tphsod.ORDER_VAT), 0)    , NVL(SUM(tphsod.ORDER_TOT), 0)
                  ,       NVL(SUM(tphsod.MD_UNIT_QTY), 0)   , NVL(SUM(tphsod.MD_ETC_QTY), 0)   , NVL(SUM(tphsod.MD_TOT_QTY), 0)
                  ,       NVL(SUM(tphsod.MD_AMT), 0)        , NVL(SUM(tphsod.MD_VAT), 0)       , NVL(SUM(tphsod.MD_TOT), 0)
                  ,       COUNT(tphsod.PROD_CD)
                  FROM    TB_PO_HQ_STORE_ORDER_DTL tphsod
                  WHERE   tphsod.REQ_DATE  = #{reqDate}
                  AND     tphsod.STORE_CD  = #{storeCd}
                  AND     tphsod.SLIP_FG   = #{slipFg}
                )
        ,       PROC_FG = #{procFg}
        ,       REMARK  = #{remark}
        ,       MOD_DT  = #{modDt}
        ,       MOD_ID  = #{modId}
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = #{slipFg}
    </update>

    <!-- 반품등록 반품상품 HD 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : rtnStoreOrderVO
        COMMENTS : 반품등록 반품상품 HD를 삭제한다.
    -->
    <delete id="deleteRtnStoreOrder" parameterType="rtnStoreOrderVO">
        /* USE : RtnStoreOrderMapper.deleteRtnStoreOrder */
        DELETE  TB_PO_HQ_STORE_ORDER
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = #{slipFg}
    </delete>

    <!-- 반품등록 확정 - 반품수량을 MD수량으로 수정 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : rtnStoreOrderVO
        COMMENTS : 반품등록 확정 - 반품수량을 MD수량으로 수정한다.
    -->
    <update id="updateOrderQtyMdQty" parameterType="rtnStoreOrderVO">
        /* USE : RtnStoreOrderMapper.updateOrderQtyMdQty */
        UPDATE  TB_PO_HQ_STORE_ORDER_DTL
        SET     MD_SPLY_UPRC    =   ORDER_SPLY_UPRC
        ,       MD_UNIT_QTY     =   ORDER_UNIT_QTY
        ,       MD_ETC_QTY      =   ORDER_ETC_QTY
        ,       MD_TOT_QTY      =   ORDER_TOT_QTY
        ,       MD_AMT          =   ORDER_AMT
        ,       MD_VAT          =   ORDER_VAT
        ,       MD_TOT          =   ORDER_TOT
        ,       MOD_DT          =   #{modDt}
        ,       MOD_ID          =   #{modId}
        WHERE   REQ_DATE  = #{reqDate}
        AND     STORE_CD  = #{storeCd}
        AND     SLIP_FG   = #{slipFg}
    </update>

    <!--  반품등록 확정 - 분배자료 생성 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_DISTRIBUTE
        PARAM    : dstbReqVO
        COMMENTS : 반품등록 확정 - 반품등록 정보를 바탕으로 분배자료를 생성한다.
    -->
    <insert id="insertDstbRegist" parameterType="dstbReqVO">
        /* USE : RtnStoreOrderMapper.insertDstbRegist */
        <selectKey resultType="int" keyProperty="seq" order="BEFORE">
            SELECT  NVL(MAX(tphsd.SEQ), 0) AS SEQ
            FROM    TB_PO_HQ_STORE_DISTRIBUTE tphsd
            WHERE   HQ_OFFICE_CD  = #{hqOfficeCd}
            AND     REQ_DATE      = #{reqDate}
        </selectKey>
        INSERT INTO TB_PO_HQ_STORE_DISTRIBUTE
        (
        HQ_OFFICE_CD,
        REQ_DATE,
        SEQ,
        STORE_CD,
        EMP_NO,
        SLIP_FG,
        DSTB_FG,
        STORAGE_CD,
        HQ_BRAND_CD,
        PROD_CD,
        PO_UNIT_FG,
        PO_UNIT_QTY,
        ORDER_SPLY_UPRC,
        ORDER_UNIT_QTY,
        ORDER_ETC_QTY,
        ORDER_TOT_QTY,
        ORDER_AMT,
        ORDER_VAT,
        ORDER_TOT,
        MD_SPLY_UPRC,
        MD_UNIT_QTY,
        MD_ETC_QTY,
        MD_TOT_QTY,
        MD_AMT,
        MD_VAT,
        MD_TOT,
        MGR_SPLY_UPRC,
        MGR_UNIT_QTY,
        MGR_ETC_QTY,
        MGR_TOT_QTY,
        MGR_AMT,
        MGR_VAT,
        MGR_TOT,
        MGR_DT,
        MGR_ID,
        PROC_FG,
        REMARK,
        REG_DT,
        REG_ID,
        MOD_DT,
        MOD_ID
        )
        SELECT  #{hqOfficeCd}
        ,       #{reqDate}
        ,       #{seq}+ROWNUM
        ,       #{storeCd}
        ,       #{empNo}
        ,       #{slipFg}
        ,       #{dstbFg}
        ,       #{storageCd}
        ,       #{hqBrandCd}
        ,       PROD_CD
        ,       PO_UNIT_FG
        ,       PO_UNIT_QTY
        ,       ORDER_SPLY_UPRC
        ,       ORDER_UNIT_QTY
        ,       ORDER_ETC_QTY
        ,       ORDER_TOT_QTY
        ,       ORDER_AMT
        ,       ORDER_VAT
        ,       ORDER_TOT
        ,       MD_SPLY_UPRC
        ,       MD_UNIT_QTY
        ,       MD_ETC_QTY
        ,       MD_TOT_QTY
        ,       MD_AMT
        ,       MD_VAT
        ,       MD_TOT
        ,       MD_SPLY_UPRC
        ,       MD_UNIT_QTY
        ,       MD_ETC_QTY
        ,       MD_TOT_QTY
        ,       MD_AMT
        ,       MD_VAT
        ,       MD_TOT
        ,       #{modDt}
        ,       #{modId}
        ,       #{procFg}
        ,       REMARK
        ,       #{regDt}
        ,       #{regId}
        ,       #{modDt}
        ,       #{modId}
        FROM    (   SELECT  PROD_CD         ,   PO_UNIT_FG     ,   PO_UNIT_QTY
        ,       REMARK
        ,       ORDER_SPLY_UPRC ,   ORDER_UNIT_QTY ,   ORDER_ETC_QTY      ,   ORDER_TOT_QTY       ,   ORDER_AMT       ,   ORDER_VAT       ,   ORDER_TOT
        ,       MD_SPLY_UPRC    ,   MD_UNIT_QTY    ,   MD_ETC_QTY         ,   MD_TOT_QTY          ,   MD_AMT          ,   MD_VAT          ,   MD_TOT
        FROM    TB_PO_HQ_STORE_ORDER_DTL
        WHERE   REQ_DATE    =   #{reqDate}
        AND     STORE_CD    =   #{storeCd}
        AND     SLIP_FG     =   #{slipFg}
        ORDER
        BY      PROD_CD
        )
    </insert>

    <!-- 반품등록 확정 - 분배자료 진행구분 변경 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_DISTRIBUTE
        PARAM    : dstbCloseStoreVO
        COMMENTS : 반품등록 확정 - 분배자료 진행구분을 변경한다.
    -->
    <update id="updateDstbProcFg" parameterType="dstbCloseStoreVO">
        /* USE : RtnStoreOrderMapper.updateDstbProcFg */
        UPDATE  TB_PO_HQ_STORE_DISTRIBUTE
        SET     PROC_FG         = #{updateProcFg},
                MGR_DT          = #{modDt},
                MGR_ID          = #{modId}
        WHERE   HQ_OFFICE_CD  = #{hqOfficeCd}
        AND     REQ_DATE      = #{reqDate}
        AND     SLIP_FG       = #{slipFg}
        AND     STORE_CD      = #{storeCd}
        AND     PROC_FG       = #{procFg}
    </update>


    <!--                엑셀업로드 시작                 -->
    <!--  반품등록 엑셀업로드 - 엑셀업로드 수량추가 -->
    <!--
        TABLE    : TB_PO_TEMP_EXCEL, TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : excelUploadVO
        COMMENTS : 반품등록 엑셀업로드 - 엑셀업로드 수량추가인 경우 기존에 주문된 내역을 TEMP 테이블에 입력한다.
    -->
    <insert id="insertExcelUploadAddQty" parameterType="excelUploadVO">
        /* USE : storeOrderMapper.insertExcelUploadAddQty */
        INSERT INTO TB_PO_TEMP_EXCEL
        (
            SESSION_ID,
            HQ_OFFICE_CD,
            STORE_CD,
            PROD_CD,
            UNIT_QTY,
            ETC_QTY,
            QTY,
            REG_DT,
            REG_ID,
            MOD_DT,
            MOD_ID
        )
        SELECT  #{sessionId}
        ,       #{hqOfficeCd}
        ,       #{storeCd}
        ,       PROD_CD
        ,       ORDER_UNIT_QTY
        ,       ORDER_ETC_QTY
        ,       0
        ,       #{regDt}
        ,       #{regId}
        ,       #{modDt}
        ,       #{modId}
        FROM    TB_PO_HQ_STORE_ORDER_DTL
        WHERE   REQ_DATE    =  #{date}
        AND     STORE_CD    =  #{storeCd}
        AND     SLIP_FG     =  #{slipFg}
        AND     PROD_CD     IN (  SELECT  PROD_CD
                                  FROM    TB_PO_TEMP_EXCEL
                                  WHERE   SESSION_ID  = #{sessionId}
                                  AND     PROD_CD     IS NOT  NULL
                                  AND     PROD_CD     IN (  SELECT  PROD_CD
                                                            FROM    TB_MS_PRODUCT
                                                            WHERE   STORE_CD  = #{storeCd}
                                                            AND     PO_PROD_FG  IN ('1','3')
                                                            AND     USE_YN    = 'Y'
                                                         )

                                )
    </insert>


    <!--  반품등록 엑셀업로드 - 기존 주문데이터중 엑셀업로드 한 데이터와 같은 상품 삭제 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL, TB_PO_TEMP_EXCEL
        PARAM    : excelUploadVO
        COMMENTS : 반품등록 엑셀업로드 - 기존 주문데이터중 엑셀업로드 한 데이터와 같은 상품은 삭제한다.
    -->
    <delete id="deleteStoreOrderToExcelUploadData" parameterType="excelUploadVO">
        /* USE : storeOrderMapper.deleteStoreOrderToExcelUploadData */
        DELETE  TB_PO_HQ_STORE_ORDER_DTL
        WHERE   REQ_DATE      = #{date}
        AND     STORE_CD      = #{storeCd}
        AND     SLIP_FG       = #{slipFg}
        AND     PROD_CD       IN  ( SELECT  PROD_CD
                                    FROM    TB_PO_TEMP_EXCEL
                                    WHERE   SESSION_ID  = #{sessionId}
                                    AND     PROD_CD     IS NOT NULL
                                  )
    </delete>
	
	<!--  반품등록 엑셀업로드 - 기존 주문데이터중 엑셀업로드 한 데이터와 같은 상품 삭제 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_PROD, TB_PO_TEMP_EXCEL
        PARAM    : excelUploadVO
        COMMENTS : 반품등록 엑셀업로드 - 기존 주문데이터중 엑셀업로드 한 데이터와 같은 상품은 삭제한다.
    -->
    <delete id="deleteExlRtnStoreOrderProd" parameterType="excelUploadVO">
        /* USE : storeOrderMapper.deleteExlRtnStoreOrderProd */
        DELETE  TB_PO_HQ_STORE_ORDER_PROD
        WHERE   REQ_DATE      = #{date}
        AND     STORE_CD      = #{storeCd}
        AND     SLIP_FG       = '1'
        AND     PROD_CD       IN  ( SELECT  PROD_CD
                                    FROM    TB_PO_TEMP_EXCEL
                                    WHERE   SESSION_ID  = #{sessionId}
                                    AND     PROD_CD     IS NOT NULL
                                  )
    </delete>

    <!--  반품등록 엑셀업로드 - 엑셀업로드 한 수량을 주문수량으로 입력 -->
    <!--
        TABLE    : TB_PO_TEMP_EXCEL, TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : excelUploadVO
        COMMENTS : 반품등록 엑셀업로드 - 엑셀업로드 한 수량을 주문수량으로 입력한다.
    -->
    <insert id="insertRtnStoreOrderToExcelUploadData" parameterType="excelUploadVO">
        /* USE : storeOrderMapper.insertRtnStoreOrderToExcelUploadData */
        INSERT INTO TB_PO_HQ_STORE_ORDER_DTL
        (   REQ_DATE            ,   STORE_CD        ,   SLIP_FG
        ,   HQ_BRAND_CD         ,   PROD_CD         ,   PO_UNIT_FG     ,   PO_UNIT_QTY
        ,   ORDER_SPLY_UPRC
        ,   ORDER_UNIT_QTY
        ,   ORDER_ETC_QTY
        ,   ORDER_TOT_QTY
        ,   ORDER_AMT
        ,   ORDER_VAT
        ,   ORDER_TOT
        ,   REMARK
        ,   REG_DT
        ,   REG_ID
        ,   MOD_DT
        ,   MOD_ID
        )
        SELECT  #{date}         ,   #{storeCd}      ,   #{slipFg}
        ,       '00'            ,   tmp.PROD_CD     ,   tmp.PO_UNIT_FG  ,   tmp.PO_UNIT_QTY
        ,       tmp.SPLY_UPRC
        ,       tpte.UNIT_QTY * ${slipFg} AS ORDER_UNIT_QTY
        ,       tpte.ETC_QTY * ${slipFg} AS ORDER_ETC_QTY
        ,       tpte.QTY * ${slipFg} AS ORDER_TOT_QTY
        ,       (ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)
              - ROUND(ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)*DECODE(tmp.VAT_FG, '1', 1, 0)*NVL(tmse.ENVST_VAL,0)/11)) * ${slipFg} AS ORDER_AMT
        ,       (ROUND(ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)*DECODE(tmp.VAT_FG, '1', 1, 0)/(10+NVL(tmse.ENVST_VAL,0)))) * ${slipFg} AS ORDER_VAT
        ,       (ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)
              - ROUND(ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)*DECODE(tmp.VAT_FG, '1', 1, 0)*NVL(tmse.ENVST_VAL,0)/11)
              + ROUND(ROUND(tmp.SPLY_UPRC*(tpte.UNIT_QTY*tmp.PO_UNIT_QTY + tpte.ETC_QTY)/tmp.PO_UNIT_QTY)*DECODE(tmp.VAT_FG, '1', 1, 0)/(10+NVL(tmse.ENVST_VAL,0)))) * ${slipFg} AS ORDER_TOT
        ,       tpte.REMARK
        ,       #{regDt}
        ,       #{regId}
        ,       #{modDt}
        ,       #{modId}
        FROM    (   SELECT  tpte.STORE_CD
                    ,       tpte.PROD_CD
                    ,       TRUNC(SUM(NVL(tpte.UNIT_QTY, 0)*tmp.PO_UNIT_QTY+NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0))/tmp.PO_UNIT_QTY) AS UNIT_QTY
                    ,       ( MOD   (SUM(NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0)),tmp.PO_UNIT_QTY)
                            * DECODE(${slipFg}, 1, DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 1, 1), 'B', 0, 1), DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 2, 1), 'B', 0, 1))
                            ) AS ETC_QTY
                    ,       (SUM (NVL(tpte.UNIT_QTY, 0)*tmp.PO_UNIT_QTY+NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0))
                                - DECODE(${slipFg}, 1, DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 1, 1), 'B', MOD(SUM(NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0)),tmp.PO_UNIT_QTY), 0)
                                , DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 2, 1), 'B', MOD(SUM(NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0)),tmp.PO_UNIT_QTY), 0)
                              )
                            ) AS QTY
                    ,       MAX(tpte.REMARK) AS REMARK
                    FROM    TB_PO_TEMP_EXCEL tpte
                    ,       TB_MS_PRODUCT tmp
                    WHERE   tpte.SESSION_ID =   #{sessionId}
                    AND     tpte.PROD_CD    IS  NOT NULL
                    AND     tmp.STORE_CD    =   tpte.STORE_CD
                    AND     tmp.PROD_CD     =   tpte.PROD_CD
                    AND     tmp.STORE_CD    =   #{storeCd}
                    AND     tmp.PO_PROD_FG  IN  ('1','3')
                    AND     tmp.USE_YN      =   'Y'
                    GROUP
                    BY      tpte.STORE_CD
                    ,       tpte.PROD_CD
                    ,       tmp.PO_UNIT_QTY
                    ,       tmp.PO_UNIT_ALLOW_FG
                ) tpte
        ,       TB_MS_PRODUCT tmp
        ,       TB_MS_STORE_ENVST tmse
        WHERE   tmp.STORE_CD       =   #{storeCd}
        AND     tmp.STORE_CD       =   tpte.STORE_CD
        AND     tmp.PROD_CD        =   tpte.PROD_CD
        AND     tmse.STORE_CD      =   tmp.STORE_CD
        AND     tmse.ENVST_CD      =   '0011'
        AND     NVL(tpte.QTY,0)    >   0
    </insert>


    <!--  반품등록 엑셀업로드 - 주문수량으로 정상 입력된 데이터 TEMP 테이블에서 삭제 -->
    <!--
        TABLE    : TB_PO_TEMP_EXCEL
        PARAM    : excelUploadVO
        COMMENTS : 반품등록 엑셀업로드 - 주문수량으로 정상 입력된 데이터 TEMP 테이블에서 삭제한다.
    -->
    <delete id="deleteExcelUploadCompleteData" parameterType="excelUploadVO">
        /* USE : storeOrderMapper.deleteExcelUploadCompleteData */
        DELETE  TB_PO_TEMP_EXCEL
        WHERE   SESSION_ID  = #{sessionId}
        AND     PROD_CD     IS NOT NULL
        AND     PROD_CD     IN  ( SELECT  PROD_CD
                                  FROM    ( SELECT  tpte.PROD_CD
                                            ,       (SUM (NVL(tpte.UNIT_QTY, 0)*tmp.PO_UNIT_QTY+NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0))
                                                      - DECODE(${slipFg}, 1, DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 1, 1), 'B', MOD(SUM(NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0)),tmp.PO_UNIT_QTY), 0)
                                                              , DECODE(SUBSTR(tmp.PO_UNIT_ALLOW_FG, 2, 1), 'B', MOD(SUM(NVL(tpte.ETC_QTY, 0)+NVL(tpte.QTY, 0)),tmp.PO_UNIT_QTY), 0)
                                                              )
                                                    ) AS QTY
                                            FROM    TB_PO_TEMP_EXCEL tpte
                                            ,       TB_MS_PRODUCT tmp
                                            WHERE   tpte.SESSION_ID =   #{sessionId}
                                            AND     tpte.PROD_CD    IS  NOT NULL
                                            AND     tmp.STORE_CD    =   tpte.STORE_CD
                                            AND     tmp.PROD_CD     =   tpte.PROD_CD
                                            AND     tmp.STORE_CD    =   #{storeCd}
                                            AND     tmp.PO_PROD_FG  IN  ('1','3')
                                            AND     tmp.USE_YN      =   'Y'
                                            GROUP
                                            BY      tpte.PROD_CD
                                            ,       tmp.PO_UNIT_QTY
                                            ,       tmp.PO_UNIT_ALLOW_FG
                                          ) tpte
                                  WHERE   NVL(tpte.QTY,0) > 0
                                )
    </delete>
    <!--                엑셀업로드 끝                 -->
</mapper>
