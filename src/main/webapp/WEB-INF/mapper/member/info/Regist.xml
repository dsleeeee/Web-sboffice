<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    Regist.xml
    회원관리
    ======================================================
    No  ||  수정자 ||  수정일자    ||  수정내역
    ======================================================
    1       정용길     2018.05.01     최초작성
    2       김지은     2018.11.08     회원정보관리 수정
-->
<mapper namespace="kr.co.solbipos.membr.info.regist.service.impl.RegistMapper">

    <!-- 등록매장 조회 -->
    <!--
        TABLE    : TB_HQ_OFFICE, TB_HQ_BRAND, TB_MS_STORE
        COMMENTS : 회원정보 등록시 등록매장 콤보박스 내용 조회
    -->
    <select id="getRegistStore" parameterType="hqManageVO" resultType="DefaultMap">
        /* RegistMapper.getRegistStore */
        SELECT tms.STORE_CD AS VALUE,
                tms.STORE_NM AS NAME
        FROM TB_MS_STORE tms
        WHERE tms.HQ_OFFICE_CD = #{hqOfficeCd}
        ORDER BY tms.STORE_CD
    </select>

    <!-- 등록매장 조회 2 -->
    <!--
        TABLE    : TB_HQ_OFFICE, TB_HQ_BRAND, TB_MS_STORE
        COMMENTS : 회원정보 등록시 등록매장 콤보박스 내용 조회
    -->
    <select id="getRegistStore2" parameterType="hqManageVO" resultType="DefaultMap">
        /* RegistMapper.getRegistStore2 */
        SELECT tms.STORE_CD AS VALUE,
                tms.STORE_NM AS NAME
        FROM TB_MS_STORE tms
        WHERE tms.HQ_OFFICE_CD = #{hqOfficeCd}
        <if test='orgnFg != null and orgnFg == "S"'>
            AND tms.STORE_CD = #{storeCd}
        </if>
        ORDER BY tms.STORE_CD
    </select>

    <!-- 회원등급 리스트 조회-->
    <!--
        TABLE    : TB_HQ_OFFICE, TB_HQ_BRAND, TB_MS_STORE
        COMMENTS : 회원정보 등록시 등록매장 콤보박스 내용 조회
    -->
    <select id="getMemberClassList" parameterType="membrClassVO" resultType="DefaultMap">
        /* RegistMapper.getMemberClassList */
        SELECT MEMBR_CLASS_CD AS VALUE,
               MEMBR_CLASS_NM AS NAME
          FROM TB_MB_MEMBER_CLASS
         WHERE USE_YN = 'Y'
           AND MEMBR_ORGN_CD = #{membrOrgnCd}
        <choose>
            <!-- 본사 -->
            <when test='membrOrgnFg != null and membrOrgnFg.toString() == "HQ"'>
                AND REG_STORE_CD IS NULL
            </when>
            <!-- 프랜차이즈 매장 -->
            <when test='membrOrgnFg != null and membrOrgnFg.toString() == "STORE" and hqOfficeCd != "00000"'>
                <if test='membrClassManageFg != null and membrClassManageFg == "0"'>
                    AND REG_STORE_CD = #{storeCd}
                </if>
                <if test='membrClassManageFg != null and membrClassManageFg == "1"'>
                    AND REG_STORE_CD IS NULL
                </if>
            </when>
            <otherwise>
            </otherwise>
        </choose>
         ORDER BY DEFLT_YN DESC
    </select>

    <!-- 회원정보 조회 -->
    <!--
        TABLE    : TB_MB_MEMBER
        COMMENTS : 회원정보 리스트 조회
    -->
    <select id="getMemberList" parameterType="registVO" resultType="DefaultMap">
        /* RegistMapper.getMemberList */
        <![CDATA[
        SELECT TEMP.*
        FROM
        (
             SELECT
                 ORG.*,
                 ROW_NUMBER() OVER (ORDER BY ORG.MEMBR_NO) AS RNUM
             FROM
                 (
        ]]>
                    SELECT
                    tmm.MEMBR_NO,
                    SBPENC.D(tmm.MEMBR_NM) AS MEMBR_NM,
                    tmmp2.CD_PARTNER AS MAPPING_CD,
                    tnsp.LN_PARTNER AS MAPPING_NM,
                    tmm.MEMBR_CLASS_CD,
                    tmmc.MEMBR_CLASS_NM,
                    tmm.MEMBR_CARD_NO,
                    tmm.SHORT_NO,
                    tmm.MEMBR_ORGN_CD,
                    tmm.REG_STORE_CD,
                    tms.STORE_NM AS REG_STORE_NM,
                    tmm.POST_NO,
                    SBPENC.D(tmm.ADDR) AS ADDR,
                    SBPENC.D(tmm.ADDR_DTL) AS ADDR_DTL,
                    SBPENC.D(tmm.TEL_NO) AS TEL_NO,
                    tmm.EMAIL_ADDR,
                    (SELECT NMCODE_NM FROM TB_CM_NMCODE WHERE NMCODE_GRP_CD = '072' AND NMCODE_CD = tmm.EMAIL_RECV_YN) AS EMAIL_RECV_YN,
                    tmm.BIRTHDAY,
                    tmm.GENDR_FG,
                    (SELECT NMCODE_NM FROM TB_CM_NMCODE WHERE NMCODE_GRP_CD = '072' AND NMCODE_CD = tmm.SMS_RECV_YN) AS SMS_RECV_YN,
                    tmm.WEDDING_YN,
                    tmm.WEDDINGDAY,
                    tmm.LUNAR_YN,
                    tmm.USE_YN,
                    tmm.MEMBR_NICKNM,
                    tmm.MEMBER_ENG_NM,
                    tmm.REMARK,
                    tmm.CST_CARD_USE_FG,
                    tmm.CST_CARD_ISS_CNT,
                    tmm.ORG_CST_CARD_NO,
                    NVL(tmmp.TOT_SAVE_POINT, 0) AS TOT_SAVE_POINT,
                    NVL(tmmp.TOT_USE_POINT, 0) AS TOT_USE_POINT,
                    NVL(tmmp.AVABL_POINT, 0) AS AVABL_POINT,
                    NVL(tmmp.TOT_ADJ_POINT, 0) AS TOT_ADJ_POINT,
                    tmmp.FIRST_SALE_DATE,
                    tmmp.LAST_SALE_DATE,
                    tmmp.POINT_ACC_CNT AS POINT_ACC_CNT,
                    tmmp.TOT_SALE_AMT AS TOT_SALE_AMT,
                    <if test='visitStoreMembr == "true" or (regUseStoreCd != null and !regUseStoreCd.equals(""))'>
                        tmmps.TOT_SAVE_POINT AS STORE_TOT_SAVE_POINT,
                        tmmps.TOT_USE_POINT AS STORE_TOT_USE_POINT,
                        tmmps.TOT_ADJ_POINT AS STORE_TOT_ADJ_POINT,
                        tmmps.FIRST_SALE_DATE AS STORE_FIRST_SALE_DATE ,
                        tmmps.LAST_SALE_DATE AS STORE_LAST_SALE_DATE ,
                        tmmps.POINT_ACC_CNT AS STORE_POINT_ACC_CNT,
                        tmmps.TOT_SALE_AMT AS STORE_TOT_SALE_AMT,
                    </if>
                    tmm.REG_DT,
                    '후불적용매장등록' AS POSTPAID_STORE,
                    tmmcpr.POINT_SAVE_FG,
                    tmmcpr.PAY01 AS MEMBER_CARD,
                    tmmcpr.PAY02 AS MEMBER_CASH
                    <include refid="CmmSQL.PagingTemplateCount"/>
                    FROM TB_MB_MEMBER tmm,
                    TB_MB_MEMBER_CLASS tmmc,
                    TB_MS_STORE tms,
                    (
                        SELECT
                        MEMBR_ORGN_CD,
                        MEMBR_NO,
                        MEMBR_CLASS_CD,
                        POINT_SAVE_FG,
                        NVL(PAY01, 0) AS PAY01,
                        NVL(PAY02, 0) AS PAY02
                        FROM
                        (
                            SELECT
                            tmm.MEMBR_ORGN_CD,
                            tmm.MEMBR_NO,
                            tmm.MEMBR_CLASS_CD,
                            tmmc.POINT_SAVE_FG,
                            tmmcpr.PAY_CD,
                            tmmcpr.ACC_RATE
                            FROM TB_MB_MEMBER tmm,
                            TB_MB_MEMBER_CLASS tmmc,
                            TB_MB_MEMBER_CLASS_PAY_RATE tmmcpr
                            WHERE 1=1
                            AND tmm.MEMBR_ORGN_CD = #{membrOrgnCd}
                            AND tmmc.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
                            AND tmmc.MEMBR_CLASS_CD (+)= tmm.MEMBR_CLASS_CD
                            AND tmmcpr.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
                            AND tmmcpr.MEMBR_CLASS_CD (+)= tmm.MEMBR_CLASS_CD
                            ORDER BY tmm.MEMBR_NO
                        )
                        PIVOT
                        (
                            SUM(ACC_RATE)
                            FOR PAY_CD
                            IN ('01' AS PAY01, '02' AS PAY02)
                        )
                        ORDER BY MEMBR_NO
                    ) tmmcpr,
                    <if test='visitStoreMembr == "true" or (regUseStoreCd != null and !regUseStoreCd.equals(""))'>
                        TB_MB_MEMBER_POINT_STORE tmmps,
                    </if>
                    TB_MB_MEMBER_POINT tmmp,
                    TB_MB_MEMBER_PTN tmmp2,
                    <choose>
                        <when test='hqOfficeCd != null and hqOfficeCd == "A0007"'>
                            VITIS.TB_NEOE_SPOS_PTN tnsp
                        </when>
                        <otherwise>
                            TB_NEOE_SPOS_PTN tnsp
                        </otherwise>
                    </choose>
                    WHERE tmm.MEMBR_ORGN_CD = #{membrOrgnCd}
                    AND tmmc.MEMBR_CLASS_CD (+)= tmm.MEMBR_CLASS_CD
                    AND tmmc.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
                    AND tms.HQ_OFFICE_CD = #{hqOfficeCd}
                    AND tms.STORE_CD = tmm.REG_STORE_CD
                    AND tmmp.MEMBR_NO (+)= tmm.MEMBR_NO
                    AND tmmp.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
                    AND tmmcpr.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
                    AND tmmcpr.MEMBR_CLASS_CD (+)= tmm.MEMBR_CLASS_CD
                    AND tmmcpr.MEMBR_NO (+)= tmm.MEMBR_NO
                    AND tmmp2.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
                    AND tmmp2.MEMBR_NO (+)= tmm.MEMBR_NO
                    AND tnsp.CD_COMPANY (+)= tmmp2.CD_COMPANY
                    AND tnsp.CD_PARTNER (+)= tmmp2.CD_PARTNER
                    <if test='visitStoreMembr == "true" or (regUseStoreCd != null and !regUseStoreCd.equals(""))'>
                        AND tmmps.MEMBR_ORGN_CD (+) = tmm.REG_STORE_CD
                        AND tmmps.CHG_MEMBR_ORGN_CD (+)= tmm.REG_STORE_CD
                        AND tmmps.MEMBR_NO (+)= tmm.MEMBR_NO
                        <if test='visitStoreMembr == "true"'>
                            AND tmmps.CHG_MEMBR_ORGN_CD = #{storeCd}
                        </if>
                        <if test='regUseStoreCdQuery != null and regUseStoreCdQuery != ""'>
                            AND tmmps.CHG_MEMBR_ORGN_CD IN (${regUseStoreCdQuery})
                        </if>
                    </if>
                    <if test='cstCardUseFg != null and cstCardUseFg != ""'>
                        AND tmm.CST_CARD_USE_FG = #{cstCardUseFg}
                    </if>
                    <if test='membrCardNo != null and membrCardNo != ""'>
                        AND tmm.MEMBR_CARD_NO LIKE '%'||#{membrCardNo}||'%'
                    </if>
                    <if test='membrNo != null and membrNo != ""'>
                        AND tmm.MEMBR_NO LIKE '%'||#{membrNo}||'%'
                    </if>
                    <if test='membrNm != null and membrNm != ""'>
                        AND SBPENC.D(tmm.MEMBR_NM) LIKE '%'||#{membrNm}||'%'
                    </if>
                    <if test='membrEngNm != null and membrEngNm != ""'>
                        AND tmm.MEMBER_ENG_NM LIKE '%'||#{membrEngNm}||'%'
                    </if>
                    <if test='telNo != null and telNo != ""'>
                        AND SBPENC.D(tmm.TEL_NO) LIKE '%'||#{telNo}||'%'
                    </if>
                    <if test='emailAddr != null and emailAddr.toString() != ""'>
                        AND tmm.EMAIL_ADDR LIKE '%'||#{emailAddr}||'%'
                    </if>
                    <if test='regStoreCdQuery != null and regStoreCdQuery != ""'>
                        AND tmm.REG_STORE_CD IN (${regStoreCdQuery})
                    </if>
                    <if test='membrClassCd != null and membrClassCd.toString() != ""'>
                        AND tmm.MEMBR_CLASS_CD = #{membrClassCd}
                    </if>
                    <if test='gendrFg != null and gendrFg.toString() != ""'>
                        AND tmm.GENDR_FG = #{gendrFg}
                    </if>
                    <if test='emailRecvYn != null and emailRecvYn.toString() != ""'>
                        AND tmm.EMAIL_RECV_YN = #{emailRecvYn}
                    </if>
                    <if test='smsRecvYn != null and smsRecvYn.toString() != ""'>
                        AND tmm.SMS_RECV_YN = #{smsRecvYn}
                    </if>
                    <if test='periodType != null and periodType.toString() != ""'>
                        <!-- 가입일 -->
                        <if test='periodType.getCode() == "reg"'>
                            AND tmm.REG_DT BETWEEN #{periodStartDate}||'000000' AND #{periodEndDate}||'999999'
                        </if>
                        <!-- 최종방문일 -->
                        <if test='periodType.getCode() == "last"'>
                            AND tmmp.LAST_SALE_DATE BETWEEN #{periodStartDate} AND #{periodEndDate}
                        </if>
                    </if>
                    <if test='anvType != null and anvType.toString() != ""'>
                        <if test='anvType.getCode() == "1"'>
                            AND tmm.BIRTHDAY BETWEEN #{anvStartDate} AND #{anvEndDate}
                        </if>
                        <if test='anvType.getCode() == "2"'>
                            AND tmm.WEDDINGDAY BETWEEN #{anvStartDate} AND #{anvEndDate}
                        </if>
                    </if>
                    <if test='useYn != null and useYn != ""'>
                        AND tmm.USE_YN = #{useYn}
                    </if>
                    <if test='startSaveSale != null and startSaveSale != "" and endSaveSale != null and endSaveSale != ""'>
                        <if test='memberSaleFg == "0"'>
                            AND tmmp.POINT_ACC_CNT BETWEEN #{startSaveSale} AND #{endSaveSale}
                        </if>
                        <if test='memberSaleFg == "1"'>
                            AND tmmp.TOT_SALE_AMT BETWEEN #{startSaveSale} AND #{endSaveSale}
                        </if>
                    </if>
                    <if test='startAvablPoint != null and startAvablPoint != "" and endAvablPoint != null and endAvablPoint != ""'>
                        <if test='memberPointFg == "0"'>
                            AND tmmp.TOT_SAVE_POINT BETWEEN #{startAvablPoint} AND #{endAvablPoint}
                        </if>
                        <if test='memberPointFg == "1"'>
                            AND tmmp.TOT_USE_POINT BETWEEN #{startAvablPoint} AND #{endAvablPoint}
                        </if>
                        <if test='memberPointFg == "2"'>
                            AND tmmp.TOT_ADJ_POINT BETWEEN #{startAvablPoint} AND #{endAvablPoint}
                        </if>
                        <if test='memberPointFg == "3"'>
                            AND tmmp.AVABL_POINT BETWEEN #{startAvablPoint} AND #{endAvablPoint}
                        </if>
                    </if>
                    <if test='shortNo != null and shortNo != ""'>
                        AND tmm.SHORT_NO = #{shortNo}
                    </if>
                    <if test='weddingYn != null and weddingYn.toString() != ""'>
                        AND tmm.WEDDING_YN = #{weddingYn}
                    </if>
                    <if test='newMemberYn != null and newMemberYn != "" and newMemberYn == true'>
                        AND tmm.REG_DT BETWEEN TO_CHAR(SYSDATE - 30, 'yyyyMMdd')||'000000' AND TO_CHAR(SYSDATE, 'yyyyMMdd')||'999999'
                    </if>
                    <if test='addr != null and addr != ""'>
                        AND SBPENC.D(tmm.ADDR) LIKE '%'||#{addr}||'%'
                    </if>
                    <if test="marketingSmsGubun != null and marketingSmsGubun != ''">
                        <![CDATA[
                            AND tmmp.LAST_SALE_DATE >= TO_CHAR(ADD_MONTHS(SYSDATE, - #{marketingSmsGubun}), 'yyyyMMdd')
                        ]]>
                    </if>
                    <if test='orgnFg.toString() == "STORE" and hqOfficeCd != "00000" and membrClassManageFg == "0"'>
                        AND tmm.REG_STORE_CD = #{storeCd}
                    </if>
        <![CDATA[
        ) ORG
              ) TEMP
                WHERE TEMP.RNUM <= #{limit}
                AND   TEMP.RNUM >= #{offset}
        ]]>
    </select>

    <!-- 마스킹 없는 엑셀다운로드 로그 저장 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_MS_PRODUCT
        PARAM    : sideMenuAttrClassVO
        COMMENTS : 마스킹 없는 엑셀다운로드 로그 저장한다. ( 본사/매장 )
    -->
    <insert id="saveMemberExcelLog" parameterType="registVO">
        /* RegistMapper.saveMemberExcelLog */
        INSERT INTO TB_LG_MB_MEMBER_DOWNLOAD_LOG
        (
            PROC_DT,
            USER_ID,
            HQ_OFFICE_CD,
            STORE_CD,
            V_USER_ID
        )
        VALUES
        (
            TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'),
            #{userId},
            #{hqOfficeCd},
            #{storeCd},
            #{vUserId}
        )
    </insert>
    <!-- 회원정보 조회(Excel 용) -->
    <!--
        TABLE    : TB_MB_MEMBER
        COMMENTS : 회원정보 리스트 조회 엑셀 다운로드
    -->
    <select id="getMemberListExcel" parameterType="registVO" resultType="DefaultMap">
        /* RegistMapper.getMemberListExcel */
        SELECT
        tmm.MEMBR_NO,
        <choose>
            <when test='excelPw != null and excelPw != "" and excelPw == "c08001"'>
                SBPENC.D(tmm.MEMBR_NM) AS MEMBR_NM,
            </when>
            <otherwise>
                RPAD(SUBSTR(SBPENC.D(tmm.MEMBR_NM),0,1), LENGTHB(CONVERT(SBPENC.D(tmm.MEMBR_NM), 'KO16MSWIN949')), '*') AS MEMBR_NM,
            </otherwise>
        </choose>
        tmm.MEMBR_NM,
        tmmp2.CD_PARTNER AS MAPPING_CD,
        tnsp.LN_PARTNER AS MAPPING_NM,
        tmm.MEMBR_CLASS_CD,
        tmmc.MEMBR_CLASS_NM,
        tmm.MEMBR_CARD_NO,
        tmm.SHORT_NO,
        tmm.MEMBR_ORGN_CD,
        tmm.REG_STORE_CD,
        tms.STORE_NM AS REG_STORE_NM,
        tmm.POST_NO,
        SBPENC.D(tmm.ADDR) AS ADDR,
        SBPENC.D(tmm.ADDR_DTL) AS ADDR_DTL,
        <choose>
            <when test='excelPw != null and excelPw != "" and excelPw == "c08001"'>
                SBPENC.D(tmm.TEL_NO) AS TEL_NO,
            </when>
            <otherwise>
                RPAD(SUBSTR(SBPENC.D(tmm.TEL_NO),0,7),11,'*') AS TEL_NO,
            </otherwise>
        </choose>
        tmm.EMAIL_ADDR,
        (SELECT NMCODE_NM FROM TB_CM_NMCODE WHERE NMCODE_GRP_CD = '072' AND NMCODE_CD = tmm.EMAIL_RECV_YN) AS EMAIL_RECV_YN,
        tmm.BIRTHDAY,
        tmm.GENDR_FG,
        (SELECT NMCODE_NM FROM TB_CM_NMCODE WHERE NMCODE_GRP_CD = '072' AND NMCODE_CD = tmm.SMS_RECV_YN) AS SMS_RECV_YN,
        tmm.WEDDING_YN,
        tmm.WEDDINGDAY,
        tmm.LUNAR_YN,
        tmm.USE_YN,
        tmm.MEMBR_NICKNM,
        tmm.MEMBER_ENG_NM,
        tmm.REMARK,
        tmm.CST_CARD_USE_FG,
        tmm.CST_CARD_ISS_CNT,
        tmm.ORG_CST_CARD_NO,
        tmmp.TOT_SAVE_POINT,
        tmmp.TOT_USE_POINT,
        tmmp.AVABL_POINT,
        tmmp.TOT_ADJ_POINT,
        tmmp.FIRST_SALE_DATE,
        tmmp.LAST_SALE_DATE,
        tmmp.POINT_ACC_CNT AS POINT_ACC_CNT,
        tmmp.TOT_SALE_AMT AS TOT_SALE_AMT,
        <if test='visitStoreMembr == "true" or (regUseStoreCd != null and !regUseStoreCd.equals(""))'>
            tmmps.TOT_SAVE_POINT AS STORE_TOT_SAVE_POINT,
            tmmps.TOT_USE_POINT AS STORE_TOT_USE_POINT,
            tmmps.TOT_ADJ_POINT AS STORE_TOT_ADJ_POINT,
            tmmps.FIRST_SALE_DATE AS STORE_FIRST_SALE_DATE ,
            tmmps.LAST_SALE_DATE AS STORE_LAST_SALE_DATE ,
            tmmps.POINT_ACC_CNT AS STORE_POINT_ACC_CNT,
            tmmps.TOT_SALE_AMT AS STORE_TOT_SALE_AMT,
        </if>
        tmm.REG_DT,
        '후불적용매장등록' AS POSTPAID_STORE,
        tmmcpr.POINT_SAVE_FG,
        tmmcpr.PAY01 AS MEMBER_CARD,
        tmmcpr.PAY02 AS MEMBER_CASH
        FROM TB_MB_MEMBER tmm,
        TB_MB_MEMBER_CLASS tmmc,
        TB_MS_STORE tms,
        (
            SELECT
            MEMBR_ORGN_CD,
            MEMBR_NO,
            MEMBR_CLASS_CD,
            POINT_SAVE_FG,
            NVL(PAY01, 0) AS PAY01,
            NVL(PAY02, 0) AS PAY02
            FROM
            (
                SELECT
                tmm.MEMBR_ORGN_CD,
                tmm.MEMBR_NO,
                tmm.MEMBR_CLASS_CD,
                tmmc.POINT_SAVE_FG,
                tmmcpr.PAY_CD,
                tmmcpr.ACC_RATE
                FROM TB_MB_MEMBER tmm,
                TB_MB_MEMBER_CLASS tmmc,
                TB_MB_MEMBER_CLASS_PAY_RATE tmmcpr
                WHERE 1=1
                AND tmm.MEMBR_ORGN_CD = #{membrOrgnCd}
                AND tmmc.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
                AND tmmc.MEMBR_CLASS_CD (+)= tmm.MEMBR_CLASS_CD
                AND tmmcpr.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
                AND tmmcpr.MEMBR_CLASS_CD (+)= tmm.MEMBR_CLASS_CD
                ORDER BY tmm.MEMBR_NO
            )
            PIVOT
            (
                SUM(ACC_RATE)
                FOR PAY_CD
                IN ('01' AS PAY01, '02' AS PAY02)
            )
            ORDER BY MEMBR_NO
        ) tmmcpr,
        <if test='visitStoreMembr == "true" or (regUseStoreCd != null and !regUseStoreCd.equals(""))'>
            TB_MB_MEMBER_POINT_STORE tmmps,
        </if>
        TB_MB_MEMBER_POINT tmmp,
        TB_MB_MEMBER_PTN tmmp2,
        <choose>
            <when test='hqOfficeCd != null and hqOfficeCd == "A0007"'>
                VITIS.TB_NEOE_SPOS_PTN tnsp
            </when>
            <otherwise>
                TB_NEOE_SPOS_PTN tnsp
            </otherwise>
        </choose>
        WHERE tmm.MEMBR_ORGN_CD = #{membrOrgnCd}
        AND tmmc.MEMBR_CLASS_CD (+)= tmm.MEMBR_CLASS_CD
        AND tmmc.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
        AND tms.HQ_OFFICE_CD = #{hqOfficeCd}
        AND tms.STORE_CD = tmm.REG_STORE_CD
        AND tmmp.MEMBR_NO (+)= tmm.MEMBR_NO
        AND tmmp.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
        AND tmmcpr.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
        AND tmmcpr.MEMBR_CLASS_CD (+)= tmm.MEMBR_CLASS_CD
        AND tmmcpr.MEMBR_NO (+)= tmm.MEMBR_NO
        AND tmmp2.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
        AND tmmp2.MEMBR_NO (+)= tmm.MEMBR_NO
        AND tnsp.CD_COMPANY (+)= tmmp2.CD_COMPANY
        AND tnsp.CD_PARTNER (+)= tmmp2.CD_PARTNER
        <if test='visitStoreMembr == "true" or (regUseStoreCd != null and !regUseStoreCd.equals(""))'>
            AND tmmps.MEMBR_ORGN_CD (+) = tmm.REG_STORE_CD
            AND tmmps.CHG_MEMBR_ORGN_CD (+)= tmm.REG_STORE_CD
            AND tmmps.MEMBR_NO (+)= tmm.MEMBR_NO
            <if test='visitStoreMembr == "true"'>
                AND tmmps.CHG_MEMBR_ORGN_CD = #{storeCd}
            </if>
            <if test='regUseStoreCdQuery != null and regUseStoreCdQuery != ""'>
                AND tmmps.CHG_MEMBR_ORGN_CD IN (${regUseStoreCdQuery})
            </if>
        </if>
        <if test='cstCardUseFg != null and cstCardUseFg != ""'>
            AND tmm.CST_CARD_USE_FG = #{cstCardUseFg}
        </if>
        <if test='membrCardNo != null and membrCardNo != ""'>
            AND tmm.MEMBR_CARD_NO LIKE '%'||#{membrCardNo}||'%'
        </if>
        <if test='membrNo != null and membrNo != ""'>
            AND tmm.MEMBR_NO LIKE '%'||#{membrNo}||'%'
        </if>
        <if test='membrNm != null and membrNm != ""'>
            AND SBPENC.D(tmm.MEMBR_NM) LIKE '%'||#{membrNm}||'%'
        </if>
        <if test='membrEngNm != null and membrEngNm != ""'>
            AND tmm.MEMBER_ENG_NM LIKE '%'||#{membrEngNm}||'%'
        </if>
        <if test='telNo != null and telNo != ""'>
            AND SBPENC.D(tmm.TEL_NO) LIKE '%'||#{telNo}||'%'
        </if>
        <if test='emailAddr != null and emailAddr.toString() != ""'>
            AND tmm.EMAIL_ADDR LIKE '%'||#{emailAddr}||'%'
        </if>
        <if test='regStoreCdQuery != null and regStoreCdQuery != ""'>
            AND tmm.REG_STORE_CD IN (${regStoreCdQuery})
        </if>
        <if test='membrClassCd != null and membrClassCd.toString() != ""'>
            AND tmm.MEMBR_CLASS_CD = #{membrClassCd}
        </if>
        <if test='gendrFg != null and gendrFg.toString() != ""'>
            AND tmm.GENDR_FG = #{gendrFg}
        </if>
        <if test='emailRecvYn != null and emailRecvYn.toString() != ""'>
            AND tmm.EMAIL_RECV_YN = #{emailRecvYn}
        </if>
        <if test='smsRecvYn != null and smsRecvYn.toString() != ""'>
            AND tmm.SMS_RECV_YN = #{smsRecvYn}
        </if>
        <if test='periodType != null and periodType.toString() != ""'>
            <!-- 최종방문일 -->
            <if test='periodType.getCode() == "last"'>
                AND tmmp.LAST_SALE_DATE BETWEEN #{periodStartDate} AND #{periodEndDate}
            </if>
            <!-- 가입일 -->
            <if test='periodType.getCode() == "reg"'>
                AND tmm.REG_DT BETWEEN #{periodStartDate}||'000000' AND #{periodEndDate}||'999999'
            </if>
        </if>
        <if test='anvType != null and anvType.toString() != ""'>
            <if test='anvType.getCode() == "1"'>
                AND tmm.BIRTHDAY BETWEEN #{anvStartDate} AND #{anvEndDate}
            </if>
            <if test='anvType.getCode() == "2"'>
                AND tmm.WEDDINGDAY BETWEEN #{anvStartDate} AND #{anvEndDate}
            </if>
        </if>
        <if test='useYn != null and useYn != ""'>
            AND tmm.USE_YN = #{useYn}
        </if>
        <if test='startSaveSale != null and startSaveSale != "" and endSaveSale != null and endSaveSale != ""'>
            <if test='memberSaleFg == "0"'>
                AND tmmp.POINT_ACC_CNT BETWEEN #{startSaveSale} AND #{endSaveSale}
            </if>
            <if test='memberSaleFg == "1"'>
                AND tmmp.TOT_SALE_AMT BETWEEN #{startSaveSale} AND #{endSaveSale}
            </if>
        </if>
        <if test='startAvablPoint != null and startAvablPoint != "" and endAvablPoint != null and endAvablPoint != ""'>
            <if test='memberPointFg == "0"'>
                AND tmmp.TOT_SAVE_POINT BETWEEN #{startAvablPoint} AND #{endAvablPoint}
            </if>
            <if test='memberPointFg == "1"'>
                AND tmmp.TOT_USE_POINT BETWEEN #{startAvablPoint} AND #{endAvablPoint}
            </if>
            <if test='memberPointFg == "2"'>
                AND tmmp.TOT_ADJ_POINT BETWEEN #{startAvablPoint} AND #{endAvablPoint}
            </if>
            <if test='memberPointFg == "3"'>
                AND tmmp.AVABL_POINT BETWEEN #{startAvablPoint} AND #{endAvablPoint}
            </if>
        </if>
        <if test='shortNo != null and shortNo != ""'>
            AND tmm.SHORT_NO = #{shortNo}
        </if>
        <if test='weddingYn != null and weddingYn.toString() != ""'>
            AND tmm.WEDDING_YN = #{weddingYn}
        </if>
        <if test='newMemberYn != null and newMemberYn != "" and newMemberYn == true'>
            AND tmm.REG_DT BETWEEN TO_CHAR(SYSDATE - 30, 'yyyyMMdd')||'000000' AND TO_CHAR(SYSDATE, 'yyyyMMdd')||'999999'
        </if>
        <if test='addr != null and addr != ""'>
            AND SBPENC.D(tmm.ADDR) LIKE '%'||#{addr}||'%'
        </if>
        <if test="marketingSmsGubun != null and marketingSmsGubun != ''">
            <![CDATA[
                AND tmmp.LAST_SALE_DATE >= TO_CHAR(ADD_MONTHS(SYSDATE, - #{marketingSmsGubun}), 'yyyyMMdd')
            ]]>
        </if>
        <if test='orgnFg.toString() == "STORE" and hqOfficeCd != "00000" and membrClassManageFg == "0"'>
            AND tmm.REG_STORE_CD = #{storeCd}
        </if>
        ORDER BY tmm.MEMBR_NO
    </select>

    <!-- 회원정보 조회 -->
    <!--
        TABLE    : TB_MB_MEMBER
        COMMENTS : 회원정보 조회
    -->
    <select id="getMemberInfo" parameterType="registVO" resultType="DefaultMap">
        /* RegistMapper.getMemberInfo */
        SELECT tmm.MEMBR_ORGN_CD,
        tmm.MEMBR_NO,
        SBPENC.D(tmm.MEMBR_NM) AS MEMBR_NM,
        tmm.MEMBER_ENG_NM AS MEMBR_ENG_NM,
        tmm.MEMBR_NICKNM,
        tmm.MEMBR_CLASS_CD,
        tmm.CST_CARD_USE_FG,
        tmm.MEMBR_CARD_NO,
        tmm.REG_STORE_CD,
        (select STORE_NM FROM TB_MS_STORE tms WHERE tmm.REG_STORE_CD = tms.STORE_CD) STORE_NM,
        tmm.POST_NO,
        SBPENC.D(tmm.ADDR) AS ADDR,
        SBPENC.D(tmm.ADDR_DTL) AS ADDR_DTL,
        tmm.LUNAR_YN,
        tmm.BIRTHDAY,
        tmm.GENDR_FG,
        SBPENC.D(tmm.TEL_NO) AS TEL_NO,
        tmm.SHORT_NO,
        tmm.WEDDING_YN,
        tmm.WEDDINGDAY,
        tmm.EMAIL_ADDR,
        tmm.EMAIL_RECV_YN,
        tmm.SMS_RECV_YN,
        tmm.REMARK,
        tmm.USE_YN,
        tmm.REG_DT,
        tmm.REG_ID,
        tmm.MOD_DT,
        tmm.MOD_ID,
        tmmp.CD_COMPANY,
        tmmp.CD_PARTNER,
        tnsp.LN_PARTNER,
        tnsp.NO_COMPANY,
        tnsp.NM_CEO,
        tmm.LATITUDE,
        tmm.LONGITUDE
        FROM TB_MB_MEMBER tmm,
              TB_MB_MEMBER_PTN tmmp,
                <choose>
                    <when test='hqOfficeCd != null and hqOfficeCd == "A0007"'>
                        VITIS.TB_NEOE_SPOS_PTN tnsp
                    </when>
                    <otherwise>
                        TB_NEOE_SPOS_PTN tnsp
                    </otherwise>
                </choose>
        WHERE tmm.MEMBR_NO = #{membrNo}
        AND tmm.MEMBR_ORGN_CD = #{membrOrgnCd}
        AND tmmp.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
        AND tmmp.MEMBR_NO (+)= tmm.MEMBR_NO
        AND tnsp.CD_COMPANY (+)= tmmp.CD_COMPANY
        AND tnsp.CD_PARTNER (+)= tmmp.CD_PARTNER
    </select>

    <!-- 회원정보 조회 -->
    <!--
        TABLE    : TB_MB_MEMBER
        COMMENTS : 회원정보 조회
    -->
    <select id="getNewMemberNo" parameterType="registVO" resultType="String">
        /* RegistMapper.getNewMemberNo */
        SELECT LPAD( NVL(MAX(MEMBR_NO), 0) + 1, 10, '0') AS MEMBR_NO
          FROM TB_MB_MEMBER
         WHERE MEMBR_ORGN_CD = #{membrOrgnCd}
    </select>

    <!-- 신규가입 적립 POINT -->
    <!--
        TABLE    : TB_MB_MEMBER_CLASS
        COMMENTS : 신규가입 적립 POINT 조회
    -->
    <select id="newJoinSavePointInfo" parameterType="registVO" resultType="int">
        /* RegistMapper.newJoinSavePointInfo */
        SELECT NEW_JOIN_SAVE_POINT
          FROM TB_MB_MEMBER_CLASS
         WHERE MEMBR_CLASS_CD = #{membrClassCd}
         AND MEMBR_ORGN_CD = #{membrOrgnCd}
    </select>

    <!-- 신규가입 POINT 저장 -->
    <!--
        TABLE    : TB_MB_MEMBER_POINT_HIST
        COMMENTS : 신규가입 적립 POINT 조회
    -->
    <insert id="insertMembrPointHist" parameterType="registVO">
        /* RegistMapper.insertMembrPointHist */
        INSERT INTO TB_MB_MEMBER_POINT_HIST tmmph (
            tmmph.MEMBR_ORGN_CD,
            tmmph.MEMBR_NO,
            tmmph.CHG_DATE,
            tmmph.CHG_SEQ,
            tmmph.STORE_CD,
            tmmph.POINT_CHG_FG,
            tmmph.CHG_POINT,
            tmmph.REMARK,
            tmmph.REG_DT,
            tmmph.REG_ID,
            tmmph.MOD_DT,
            tmmph.MOD_ID
        ) VALUES (
            #{membrOrgnCd},
            #{membrNo},
            #{chgDate},
            SQ_TB_MEMBER_POINT_HIST.NEXTVAL,
            #{regStoreCd},
            #{pointChgFg},
            #{chgPoint},
            #{remark},
            #{regDt},
            #{regId},
            #{modDt},
            #{modId}
        )
    </insert>

    <!-- 회원정보 등록 -->
    <!--
        TABLE    : TB_MB_MEMBER
        COMMENTS : 회원정보 등록
    -->
    <insert id="registMemberInfo" parameterType="registVO">
        /* RegistMapper.registMemberInfo */
        <selectKey keyProperty="membrNo" resultType="String" order="AFTER">
            select MEMBR_NO FROM TB_MB_MEMBER WHERE MEMBR_ORGN_CD = #{membrOrgnCd} AND MEMBR_NO = #{membrNo}
        </selectKey>
        <![CDATA[
        INSERT INTO TB_MB_MEMBER tmm (
            tmm.MEMBR_ORGN_CD,
            tmm.MEMBR_NO,
            tmm.MEMBR_NM,
            tmm.MEMBER_ENG_NM,
            tmm.MEMBR_NICKNM,
            tmm.MEMBR_CLASS_CD,
            tmm.MEMBR_CARD_NO,
            tmm.REG_STORE_CD,
            tmm.POST_NO,
            tmm.ADDR,
            tmm.ADDR_DTL,
            tmm.BIRTHDAY,
            tmm.LUNAR_YN,
            tmm.GENDR_FG,
            tmm.EMAIL_ADDR,
            tmm.SHORT_NO,
            tmm.TEL_NO,
            tmm.WEDDING_YN,
            tmm.WEDDINGDAY,
            tmm.EMAIL_RECV_YN,
            tmm.SMS_RECV_YN,
            tmm.USE_YN,
            tmm.REMARK,
            tmm.REG_DT,
            tmm.REG_ID,
            tmm.MOD_DT,
            tmm.MOD_ID,
            tmm.CST_CARD_USE_FG,
            tmm.LATITUDE,
            tmm.LONGITUDE
        ) VALUES (
            #{membrOrgnCd},
            #{membrNo},
            SBPENC.E(#{membrNm}),
            #{membrEngNm},
            #{membrNicknm},
            #{membrClassCd},
            #{membrCardNo},
            #{regStoreCd},
            #{postNo},
            SBPENC.E(#{addr}),
            SBPENC.E(#{addrDtl}),
            #{birthday},
            #{lunarYn},
            #{gendrFg},
            #{emailAddr},
            #{shortNo},
            SBPENC.E(#{telNo}),
            #{weddingYn},
            #{weddingday},
            #{emailRecvYn},
            #{smsRecvYn},
            #{useYn},
            #{remark},
            #{regDt},
            #{regId},
            #{modDt},
            #{modId},
            #{cstCardUseFg},
            #{latitude},
            #{longitude}
        )
        ]]>
    </insert>

    <!-- 선불회원 등록 -->
    <!--
        TABLE    : TB_MB_MEMBER_PREPAID_STORE
        COMMENTS : 선불회원 등록
    -->
    <insert id="registMemberPrepaid" parameterType="registVO">
        /* RegistMapper.registMemberPrepaid */
        MERGE INTO TB_MB_MEMBER_PREPAID_STORE tmmps
        USING DUAL
           ON (tmmps.MEMBR_ORGN_CD = #{membrOrgnCd} AND tmmps.MEMBR_NO = #{membrNo} AND tmmps.STORE_CD = #{regStoreCd})
         WHEN MATCHED THEN
       UPDATE
          SET tmmps.USE_YN = #{useYn},
              tmmps.MOD_DT = #{modDt},
              tmmps.MOD_ID = #{modId}
         WHEN NOT MATCHED THEN
         INSERT
         (
             tmmps.MEMBR_ORGN_CD,
             tmmps.MEMBR_NO,
             tmmps.STORE_CD,
             tmmps.USE_YN,
             tmmps.REG_DT,
             tmmps.REG_ID,
             tmmps.MOD_DT,
             tmmps.MOD_ID
         )
         VALUES
         (
             #{membrOrgnCd},
             #{membrNo},
             #{regStoreCd},
             #{useYn},
             #{regDt},
             #{regId},
             #{modDt},
             #{modId}
         )
  </insert>

    <!-- 회원정보 수정 -->
    <!--
        TABLE    : TB_MB_MEMBER
        COMMENTS : 회원정보 수정
    -->
    <update id="updateMemberInfo" parameterType="registVO">
        /* RegistMapper.updateMemberInfo */
        UPDATE TB_MB_MEMBER tmm
           SET tmm.MEMBR_NM = SBPENC.E(#{membrNm}),
               tmm.MEMBER_ENG_NM = #{membrEngNm},
               tmm.MEMBR_NICKNM = #{membrNicknm},
               tmm.MEMBR_CLASS_CD = #{membrClassCd},
               tmm.MEMBR_CARD_NO = #{membrCardNo},
               tmm.REG_STORE_CD = #{regStoreCd},
               tmm.POST_NO = #{postNo},
               tmm.ADDR = SBPENC.E(#{addr}),
               tmm.ADDR_DTL = SBPENC.E(#{addrDtl}),
               tmm.BIRTHDAY = #{birthday},
               tmm.LUNAR_YN = #{lunarYn},
               tmm.GENDR_FG = #{gendrFg},
               tmm.EMAIL_ADDR = #{emailAddr},
               tmm.SHORT_NO = #{shortNo},
               tmm.TEL_NO = SBPENC.E(#{telNo}),
               tmm.WEDDING_YN = #{weddingYn},
               tmm.WEDDINGDAY = #{weddingday},
               tmm.EMAIL_RECV_YN = #{emailRecvYn},
               tmm.SMS_RECV_YN = #{smsRecvYn},
               tmm.CST_CARD_USE_FG = #{cstCardUseFg},
               tmm.USE_YN = #{useYn},
               tmm.REMARK = #{remark},
               tmm.MOD_ID = #{modId},
               tmm.MOD_DT = #{modDt},
               tmm.LATITUDE = #{latitude},
               tmm.LONGITUDE = #{longitude}
         WHERE tmm.MEMBR_NO = #{membrNo}
           AND tmm.MEMBR_ORGN_CD = #{membrOrgnCd}
    </update>

    <!-- 회원정보 삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER
        COMMENTS : 회원정보 삭제 버튼 처리 USE_YN : N 으로 업데이트 처리
    -->
    <delete id="deleteMemberInfo" parameterType="registVO">
      /* RegistMapper.deleteMemberInfo */
      UPDATE TB_MB_MEMBER tmm
         SET tmm.USE_YN = 'N',
             tmm.MOD_ID = #{modId},
             tmm.MOD_DT = #{modDt}
       WHERE tmm.MEMBR_ORGN_CD = #{membrOrgnCd}
         AND tmm.MEMBR_NO = #{membrNo}
    </delete>

    <!-- 회원카드정보 수정(이전 카드정보 '폐기(code:1)'처리) -->
    <!--
        TABLE    : TB_MB_MEMBER_CARD
        COMMENTS : 회원정보 수정시에 회원 카드번호 수정
    -->
    <update id="updateMembrCard" parameterType="registVO">
        /* RegistMapper.updateMembrCard */
        UPDATE TB_MB_MEMBER_CARD tmmc
        SET tmmc.CST_CARD_STAT_FG = #{cstCardUseFg},
        tmmc.MOD_ID = #{modId},
        tmmc.MOD_DT = #{modDt}
        WHERE tmmc.MEMBR_ORGN_CD = #{membrOrgnCd}
        <if test="membrCardNo != null and !membrCardNo.equals('')">
            AND tmmc.MEMBR_CARD_NO = #{membrCardNo}
        </if>
    </update>

    <!-- 회원명 중복체크-->
    <!--
        TABLE    : TB_MB_MEMBER
        COMMENTS : 회원명 중복 체크
    -->
    <select id="getMemberNmCount" parameterType="registVO" resultType="int">
        /* RegistMapper.getMemberNmCount */
        SELECT COUNT(1)
        FROM TB_MB_MEMBER
        WHERE MEMBR_ORGN_CD =  #{membrOrgnCd}
        AND	SBPENC.D(MEMBR_NM) = #{membrNm}
    </select>

    <!-- 전화번호 중복체크-->
    <!--
        TABLE    : TB_MB_MEMBER
        COMMENTS : 전화번호 중복 체크
    -->
    <select id="getMemberTelNoCount" parameterType="registVO" resultType="int">
        /* RegistMapper.getMemberTelNoCount */
        SELECT COUNT(1)
        FROM TB_MB_MEMBER
        WHERE MEMBR_ORGN_CD =  #{membrOrgnCd}
        AND	SBPENC.D(TEL_NO) = #{telNo}
    </select>

    <!-- 카드정보 중복체크-->
    <!--
        TABLE    : TB_MB_MEMBER_CARD
        COMMENTS : 카드정보 중복 체크
    -->
    <select id="getMemberCardInfoCount" parameterType="registVO" resultType="int">
        /* RegistMapper.getMemberCardInfoCount */
        SELECT COUNT(1)
          FROM TB_MB_MEMBER_CARD tmmc
         WHERE MEMBR_ORGN_CD =  #{membrOrgnCd}
           AND	MEMBR_CARD_NO = #{membrCardNo}
           AND CST_CARD_STAT_FG = '0'
    </select>

    <!-- 카드정보 중복체크( 카드번호 사용중인 회원번호 / X (해당 카드번호 미사용) ) -->
    <!--
        TABLE    : TB_MB_MEMBER_CARD
        COMMENTS : 카드정보 중복 체크
    -->
    <select id="getMemberCardInfoCountDetail" parameterType="registVO" resultType="String">
        /* RegistMapper.getMemberCardInfoCountDetail */
        SELECT NVL(max(MEMBR_NO), 'X') AS MEMBR_NO
        FROM TB_MB_MEMBER_CARD tmmc
        WHERE membr_orgn_cd =  #{membrOrgnCd}
        AND	membr_card_no = #{membrCardNo}
        AND CST_CARD_STAT_FG = '0'
    </select>

    <!-- 회원정보 수정 Sec-->
    <!--
        TABLE    : TB_MB_MEMBER
        COMMENTS : 회원카드번호 수정시에 회원 수정
    -->
    <update id="updateMembr" parameterType="registVO">
        /* RegistMapper.updateMembr */
        UPDATE TB_MB_MEMBER tmm
           SET tmm.MEMBR_CARD_NO = #{membrCardNo},
               tmm.CST_CARD_USE_FG = '0',
               tmm.MOD_ID = #{modId},
               tmm.MOD_DT = #{modDt}
         WHERE tmm.MEMBR_ORGN_CD = #{membrOrgnCd}
           AND tmm.MEMBR_NO = #{membrNo}
    </update>

    <!-- 후불회원 등록매장 조회 -->
    <!--
        TABLE    : TB_MB_MEMBER_POSTPAID_STORE
        COMMENTS : 후불회원 적용매장 조회
    -->
    <select id="getRegStoreList" parameterType="postpaidStoreVO" resultType="DefaultMap">
        /* RegistMapper.getRegStoreList */
        SELECT
        tmbcs.MEMBR_NO,
        tmbcs.STORE_CD,
        (SELECT STORE_NM FROM TB_MS_STORE WHERE STORE_CD = tmbcs.STORE_CD) AS STORE_NM
        FROM TB_MB_MEMBER_POSTPAID_STORE tmbcs
        WHERE tmbcs.MEMBR_ORGN_CD = #{membrOrgnCd}
        AND tmbcs.MEMBR_NO = #{membrNo}
        AND tmbcs.USE_YN = 'Y'
        <if test='defaultStoreCd != null and defaultStoreCd.toString() != ""'>
            AND tmbcs.STORE_CD != #{defaultStoreCd}
        </if>
        ORDER BY tmbcs.STORE_CD
    </select>

    <!-- 후불회원 미등록매장 조회 -->
    <!--
        TABLE    : TB_MB_MEMBER_POSTPAID_STORE
        COMMENTS : 후불회원 적용매장 조회
    -->
    <select id="getNoRegStoreList" parameterType="postpaidStoreVO" resultType="DefaultMap">
        /* RegistMapper.getNoRegStoreList */
        SELECT
        STORE_CD,
        STORE_NM
        FROM TB_MS_STORE
        WHERE HQ_OFFICE_CD = #{hqOfficeCd}
        <if test='storeCd != null and storeCd != ""'>
            <![CDATA[
                AND STORE_CD = #{storeCd}
            ]]>
        </if>
        AND STORE_CD NOT IN (SELECT STORE_CD
                                FROM TB_MB_MEMBER_POSTPAID_STORE
                                WHERE MEMBR_ORGN_CD = #{membrOrgnCd}
                                AND MEMBR_NO = #{membrNo}
                                AND USE_YN = 'Y')
        <if test='defaultStoreCd != null and defaultStoreCd.toString() != ""'>
            AND STORE_CD != #{defaultStoreCd}
        </if>
        ORDER BY STORE_CD
    </select>

    <!-- 후불회원 적용매장 삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_POSTPAID_STORE
        COMMENTS : 후불회원 적용매장 삭제
    -->
    <update id="deletePostpaidStore" parameterType="postpaidStoreVO">
        /* RegistMapper.deletePostpaidStore */
        UPDATE TB_MB_MEMBER_POSTPAID_STORE
           SET USE_YN = 'N',
               MOD_DT = #{modDt},
               MOD_ID = #{modId}
         WHERE MEMBR_ORGN_CD = #{membrOrgnCd}
           AND MEMBR_NO = #{membrNo}
           AND STORE_CD = #{storeCd}
    </update>

    <!-- 후불회원 적용매장 등록 및 수정 -->
    <!--
        TABLE    : TB_MB_MEMBER_POSTPAID_STORE
        COMMENTS : 후불회원 적용매장 등록 및 수정
    -->
    <insert id="registPostpaidStore" parameterType="postpaidStoreVO">
        /* RegistMapper.registPostpaidStore */
        MERGE INTO TB_MB_MEMBER_POSTPAID_STORE tmmps
        USING DUAL
        ON (
            tmmps.MEMBR_ORGN_CD = #{membrOrgnCd}
            AND tmmps.MEMBR_NO = #{membrNo}
            AND tmmps.STORE_CD = #{storeCd}
        )
        WHEN MATCHED THEN
       UPDATE
          SET tmmps.USE_YN = #{useYn},
              tmmps.MOD_DT = #{modDt},
              tmmps.MOD_ID = #{modId}
         WHEN NOT MATCHED THEN
            INSERT
            (
                MEMBR_ORGN_CD,
                MEMBR_NO,
                STORE_CD,
                USE_YN,
                REG_DT,
                REG_ID,
                MOD_DT,
                MOD_ID
            ) VALUES (
                #{membrOrgnCd},
                #{membrNo},
                #{storeCd},
                #{useYn},
                #{regDt},
                #{regId},
                #{modDt},
                #{modId}
            )
    </insert>

    <!-- 회원 거래처 매핑코드 조회 -->
    <!--
        TABLE    :
        COMMENTS : 회원정보 등록시 등록매장 콤보박스 내용 조회
    -->
    <select id="getMappingCompany" parameterType="memberMappingVO" resultType="DefaultMap">
        /* RegistMapper.getMappingCompany */
        SELECT CD_COMPANY,
        CD_PARTNER,
        LN_PARTNER,
        NO_COMPANY,
        NM_CEO
        <choose>
            <when test='hqOfficeCd != null and hqOfficeCd == "A0007"'>
                FROM VITIS.TB_NEOE_SPOS_PTN tnsp
            </when>
            <otherwise>
                FROM TB_NEOE_SPOS_PTN tnsp
            </otherwise>
        </choose>
        WHERE USE_YN = 'Y'
        <if test='cdCompany != null and cdCompany.toString() != ""'>
            AND tnsp.CD_COMPANY = #{cdCompany}
        </if>
        <if test='cdPartner != null and cdPartner.toString() != ""'>
            AND tnsp.CD_PARTNER LIKE '%'||#{cdPartner}||'%'
        </if>
        <if test='lnPartner != null and lnPartner.toString() != ""'>
            AND tnsp.LN_PARTNER LIKE '%'||#{lnPartner}||'%'
        </if>
        <if test='noCompany != null and noCompany.toString() != ""'>
            AND tnsp.NO_COMPANY = #{noCompany}
        </if>
        <if test='nmCeo != null and nmCeo.toString() != ""'>
            AND tnsp.NM_CEO LIKE '%'||#{nmCeo}||'%'
        </if>
    </select>

    <!-- 회원 거래처 매핑코드 등록 및 저장  -->
    <!--
        TABLE    : TB_MB_MEMBER_PTN
        COMMENTS : 회원 거래처 매핑코드 등록 및 저장
    -->
    <insert id="registMemberMappingCode" parameterType="postpaidStoreVO">
        /* RegistMapper.registMemberMappingCode */
        MERGE INTO TB_MB_MEMBER_PTN tmmp
        USING DUAL
        ON (
            tmmp.MEMBR_ORGN_CD = #{membrOrgnCd}
            AND tmmp.MEMBR_NO = #{membrNo}
        )
        WHEN MATCHED THEN
       UPDATE
          SET tmmp.CD_COMPANY = #{cdCompany},
              tmmp.CD_PARTNER = #{cdPartner},
              tmmp.MOD_DT = #{modDt},
              tmmp.MOD_ID = #{modId}
         WHEN NOT MATCHED THEN
            INSERT
            (
                MEMBR_ORGN_CD,
                MEMBR_NO,
                CD_COMPANY,
                CD_PARTNER,
                REG_DT,
                REG_ID,
                MOD_DT,
                MOD_ID
            ) VALUES (
                #{membrOrgnCd},
                #{membrNo},
                #{cdCompany},
                #{cdPartner},
                #{regDt},
                #{regId},
                #{modDt},
                #{modId}
            )
    </insert>

    <!-- 회원 거래처 매핑 팝업 - 회원 거래처 매핑 조회 -->
    <!--
        TABLE    : TB_MB_MEMBER, TB_MB_MEMBER_CLASS, TB_MS_STORE, TB_MB_MEMBER_PTN, TB_NEOE_SPOS_PTN
        COMMENTS : [회원]회원, [회원]회원_분류, [매장]매장정보, [회원]회원-거래처 매핑, 회원 거래처 매핑코드
    -->
    <select id="getMemberVendorMappingList" parameterType="registVO" resultType="DefaultMap">
        /* RegistMapper.getMemberVendorMappingList */
        <include refid="CmmSQL.PagingTemplateHeader"/>
        SELECT
        tmm.MEMBR_NO,
        SBPENC.D(tmm.MEMBR_NM) AS MEMBR_NM,
        tmm.MEMBR_CLASS_CD,
        tmmc.MEMBR_CLASS_NM,
        tmm.MEMBR_CARD_NO,
        tmm.SHORT_NO,
        tmm.MEMBR_ORGN_CD,
        tmm.REG_STORE_CD,
        tms.STORE_NM AS REG_STORE_NM,
        tmm.POST_NO,
        SBPENC.D(tmm.ADDR) AS ADDR,
        SBPENC.D(tmm.ADDR_DTL) AS ADDR_DTL,
        SBPENC.D(tmm.TEL_NO) AS TEL_NO,
        tmm.EMAIL_ADDR,
        tmm.EMAIL_RECV_YN,
        tmm.BIRTHDAY,
        tmm.GENDR_FG,
        tmm.SMS_RECV_YN,
        tmm.WEDDING_YN,
        tmm.WEDDINGDAY,
        tmm.LUNAR_YN,
        tmm.USE_YN,
        tmm.MEMBR_NICKNM,
        tmm.MEMBER_ENG_NM,
        tmm.REMARK,
        '후불적용매장등록' AS POSTPAID_STORE,
        tmmp.CD_PARTNER,
        tnsp.LN_PARTNER
        <include refid="CmmSQL.PagingTemplateCount"/>
        FROM TB_MB_MEMBER tmm,
        TB_MB_MEMBER_CLASS tmmc,
        TB_MS_STORE tms,
        TB_MB_MEMBER_PTN tmmp,
        <choose>
            <when test='hqOfficeCd != null and hqOfficeCd == "A0007"'>
                VITIS.TB_NEOE_SPOS_PTN tnsp
            </when>
            <otherwise>
                TB_NEOE_SPOS_PTN tnsp
            </otherwise>
        </choose>
        WHERE 1=1
        <if test='orgnFg != null and orgnFg.toString() == "HQ"'>
            AND tmmc.MEMBR_ORGN_CD (+)= #{hqOfficeCd}
        </if>
        <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
            AND tmmc.MEMBR_ORGN_CD (+)= #{storeCd}
        </if>
        AND tmmc.MEMBR_CLASS_CD (+)= tmm.MEMBR_CLASS_CD
        AND tms.HQ_OFFICE_CD = #{hqOfficeCd}
        AND tms.STORE_CD (+)= tmm.REG_STORE_CD
        AND tmmp.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
        AND tmmp.MEMBR_NO (+)= tmm.MEMBR_NO
        AND tnsp.CD_COMPANY (+)= tmmp.CD_COMPANY
        AND tnsp.CD_PARTNER (+)= tmmp.CD_PARTNER
        <if test='membrNo != null and membrNo != ""'>
            AND tmm.MEMBR_NO LIKE '%'||#{membrNo}||'%'
        </if>
        <if test='membrNm != null and membrNm != ""'>
            AND SBPENC.D(tmm.MEMBR_NM) LIKE '%'||#{membrNm}||'%'
        </if>
        AND tmmp.CD_PARTNER IS NULL
        ORDER BY tmm.MEMBR_NO
        <include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <!-- 회원정보 등록,수정시 본사코드 A0007만 -->
    <!--
    TABLE    : TB_SL_SALE_HDR_MEMBR, TB_MB_MEMBER_PTN
    COMMENTS : [매출]헤더_회원, [회원]회원-거래처 매핑
    -->
    <select id="registPoslinkPtn" statementType="CALLABLE" parameterType="registVO" resultType="String">
    /* RegistMapper.registPoslinkPtn */
    {
        CALL VITIS.SP_NEOE_POSLINK_PTN
        (
            #{membrOrgnCd},
            #{regStoreCd},
            #{membrNo},
            #{result, mode=OUT, jdbcType=VARCHAR}
        )
    }
    </select>

    <!-- 회원정보 등록,수정시 본사코드 A0007만 -->
    <!--
    TABLE    : TB_NS_NONSALE_HDR, TB_MB_MEMBER_PTN
    COMMENTS : [비매출]HEADER, [회원]회원-거래처 매핑
    -->
    <select id="registSposBillPtn" statementType="CALLABLE" parameterType="registVO" resultType="String">
    /* RegistMapper.registSposBillPtn */
    {
        CALL VITIS.SP_NEOE_SPOS_BILL_PTN
        (
            #{membrOrgnCd},
            #{regStoreCd},
            #{membrNo},
            #{result, mode=OUT, jdbcType=VARCHAR}
        )
    }
    </select>

    <!-- 회원정보 조회 -->
    <!--
        TABLE    : TB_MB_MEMBER
        COMMENTS : 회원정보 조회
    -->
    <select id="getMemberSelect" parameterType="registVO" resultType="DefaultMap">
       SELECT *
        FROM(SELECT
                *
            FROM TB_MB_MEMBER tmm
            ORDER BY ROWNUM DESC)
        WHERE ROWNUM = 1
    </select>

    <!-- 카드정보 조회 -->
    <!--
        TABLE    : TB_MB_MEMBER, TB_MB_MEMBER_CARD,
        COMMENTS : 카드정보 조회
    -->
    <select id="getCardList" parameterType="registVO" resultType="DefaultMap">
        SELECT membr_orgn_cd
        ,membr_card_no
        ,membr_no
        ,reg_dt
        ,reg_id
        ,mod_dt
        ,mod_id
        ,cst_card_stat_fg
        ,old_cst_card_no
        ,cst_card_iss_fg
        ,iss_remark
        ,iss_orgn_cd
        ,iss_date
        ,(SELECT nmcode_nm FROM tb_cm_nmcode WHERE nmcode_grp_cd = '300' AND nmcode_cd = tmmc.cst_card_stat_fg) AS stat_fg_nm
        ,(SELECT nmcode_nm FROM tb_cm_nmcode WHERE nmcode_grp_cd = '301' AND nmcode_cd = tmmc.cst_card_iss_fg ) AS iss_fg_nm
        FROM TB_MB_MEMBER_CARD tmmc
        <where>
            <if test='membrNo != null and membrNo != ""'>
                AND MEMBR_NO = #{membrNo}
            </if>
            <if test='membrOrgnCd != null and membrOrgnCd != ""'>
                AND membr_orgn_cd = #{membrOrgnCd}
            </if>
        </where>
        ORDER BY REG_DT DESC
    </select>

    <!-- 회원카드정보 추가 -->
    <!--
        TABLE    : TB_MB_MEMBER_CARD
        COMMENTS : 회원정보등록시 카드정보도 등록
    -->
    <insert id="insertMembrCard" parameterType="registVO">
        <selectKey keyProperty="membrNo" resultType="String" order="AFTER">
            select MEMBR_NO FROM TB_MB_MEMBER WHERE MEMBR_ORGN_CD = #{membrOrgnCd} AND MEMBR_NO = #{membrNo}
        </selectKey>
        /* RegistMapper.insertMembrCard */
        INSERT INTO TB_MB_MEMBER_CARD tmmc
        (
            tmmc.MEMBR_CARD_NO,
            tmmc.MEMBR_ORGN_CD,
            tmmc.MEMBR_NO,
            tmmc.CST_CARD_STAT_FG,
            tmmc.OLD_CST_CARD_NO,
            tmmc.CST_CARD_ISS_FG,
            tmmc.ISS_REMARK,
            tmmc.ISS_ORGN_CD,
            tmmc.ISS_DATE,
            tmmc.REG_ID,
            tmmc.REG_DT,
            tmmc.MOD_ID,
            tmmc.MOD_DT,
            tmmc.MEMBR_CARD_SEQ
        ) VALUES (
            #{membrCardNo},
            #{membrOrgnCd},
            #{membrNo},
            '0',
            #{oldCstCardNo},
            #{cstCardIssFg},
            #{issRemark},
            #{issOrgnCd},
            #{issDate},
            #{regId},
            #{regDt},
            #{modId},
            #{modDt},
            (SELECT NVL(MAX(MEMBR_CARD_SEQ),-1)+1 FROM TB_MB_MEMBER_CARD WHERE MEMBR_ORGN_CD = #{membrOrgnCd} AND MEMBR_CARD_NO = #{membrCardNo})
        )
    </insert>

    <!-- 배달정보 조회 -->
    <!--
        TABLE    : TB_MB_MEMBER, TB_MB_MEMBER_DLVR_ADDR,
        COMMENTS : 배달정보 조회
    -->
    <select id="getDlvrList" parameterType="registVO" resultType="DefaultMap">
      /* RegistMapper.getDlvrList */
       SELECT
       tmmda.MEMBR_ORGN_CD
       , tmmda.MEMBR_NO
       , tmmda.DLVR_ADDR_SEQ
       , tmmda.DLVR_STORE_CD
       , tmmda.DLVR_LZONE_CD
       , tmmda.DLVR_MZONE_CD
       , SBPENC.D(tmmda.ADDR) AS ADDR
       , SBPENC.D(tmmda.ADDR_DTL) AS ADDR_DTL
       , tmmda.LAST_DLVR_DATE
       , tmmda.TOT_DLVR_CNT
       , tmmda.USE_YN
       , tmmda.REG_DT
       , tmmda.REG_ID
       , tmmda.MOD_DT
       , tmmda.MOD_ID
        FROM TB_MB_MEMBER_DLVR_ADDR tmmda
        WHERE MEMBR_ORGN_CD = #{membrOrgnCd}
        AND MEMBR_NO = #{membrNo}
    </select>

    <!-- 배달정보 추가 -->
    <!--
        TABLE    : TB_MB_MEMBER_DLVR_ADDR
        COMMENTS : 배달정보 등록
    -->
    <insert id="insertMembrDlvr" parameterType="registVO">
        /* RegistMapper.insertMembrDlvr */
        INSERT INTO TB_MB_MEMBER_DLVR_ADDR tmmda (
            tmmda.MEMBR_ORGN_CD
            , tmmda.MEMBR_NO
            , tmmda.DLVR_ADDR_SEQ
            , tmmda.DLVR_STORE_CD
            , tmmda.DLVR_LZONE_CD
            , tmmda.DLVR_MZONE_CD
            , tmmda.ADDR
            , tmmda.ADDR_DTL
            , tmmda.LAST_DLVR_DATE
            , tmmda.TOT_DLVR_CNT
            , tmmda.USE_YN
            , tmmda.REG_DT
            , tmmda.REG_ID
            , tmmda.MOD_DT
            , tmmda.MOD_ID
            )
        VALUES (
            #{membrOrgnCd}
            , #{membrNo}
            , (SELECT NVL(MAX(DLVR_ADDR_SEQ),0)+1 FROM TB_MB_MEMBER_DLVR_ADDR WHERE MEMBR_ORGN_CD = #{membrOrgnCd} AND MEMBR_NO = #{membrNo})
            , #{regStoreCd}
            , #{dlvrLzoneCd}
            , #{dlvrMzoneCd}
            , SBPENC.E((SELECT A.DLVR_LZONE_NM|| ' ' ||B.DLVR_MZONE_NM FROM TB_MS_DELIVERY_LZONE A,  TB_MS_DELIVERY_MZONE B WHERE A.DLVR_LZONE_CD = B.DLVR_LZONE_CD AND A.STORE_CD = B.STORE_CD AND A.STORE_CD = #{regStoreCd} AND B.DLVR_LZONE_CD = #{dlvrLzoneCd} AND B.DLVR_MZONE_CD = #{dlvrMzoneCd}))
            , SBPENC.E(#{addrDtl})
            , #{lastDlvrDate}
            , 0
            , #{useYn}
            , #{regDt}
            , #{regId}
            , #{modDt}
            , #{modId}
             )
    </insert>

    <!-- 배달전화정보 조회 -->
    <!--
        TABLE    : TB_MB_MEMBER, TB_MB_MEMBER_DLVR_TEL,
        COMMENTS : 배달전화정보
    -->
    <select id="getDlvrTelList" parameterType="registVO" resultType="DefaultMap">
        /* RegistMapper.getDlvrTelList */
       SELECT
            tmmdt.MEMBR_ORGN_CD
            , tmmdt.MEMBR_NO
            , tmmdt.DLVR_TEL_SEQ
            , tmmdt.DLVR_STORE_CD
            , SBPENC.D(tmmdt.TEL_NO) AS TEL_NO
            , tmmdt.SHORT_NO
            , tmmdt.USE_YN
            , TO_CHAR(TO_DATE(tmmdt.REG_DT, 'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') AS REG_DT
            , tmmdt.REG_ID
            , TO_CHAR(TO_DATE(tmmdt.MOD_DT, 'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') AS MOD_DT
            , tmmdt.MOD_ID
        FROM
        	TB_MB_MEMBER_DLVR_TEL tmmdt
        WHERE MEMBR_ORGN_CD = #{membrOrgnCd}
        AND MEMBR_NO = #{membrNo}
    </select>

    <!-- 배달전화정보 추가 -->
    <!--
        TABLE    : TB_MB_MEMBER_DLVR_TEL
        COMMENTS : 배달전화정보 등록
    -->
    <insert id="insertMembrDlvrTel" parameterType="registVO">
        /* RegistMapper.insertMembrDlvrTel */
        INSERT INTO TB_MB_MEMBER_DLVR_TEL tmmdt (
            tmmdt.MEMBR_ORGN_CD,
            tmmdt.MEMBR_NO,
            tmmdt.DLVR_TEL_SEQ,
            tmmdt.DLVR_STORE_CD,
            tmmdt.TEL_NO,
            tmmdt.SHORT_NO,
            tmmdt.USE_YN,
            tmmdt.REG_ID,
            tmmdt.REG_DT,
            tmmdt.MOD_ID,
            tmmdt.MOD_DT)
        VALUES (
            #{membrOrgnCd},
            #{membrNo},
            (SELECT NVL(MAX(DLVR_TEL_SEQ),0)+1 FROM TB_MB_MEMBER_DLVR_TEL WHERE MEMBR_ORGN_CD = #{membrOrgnCd} AND MEMBR_NO = #{membrNo}),
            #{regStoreCd},
            SBPENC.E(#{telNo}),
            #{shortNo},
            #{useYn},
            #{regId},
            #{regDt},
            #{modId},
            #{modDt}
            )
    </insert>

    <!-- 배달전화정보 수정 -->
    <!--
        TABLE    : TB_MB_MEMBER_DLVR_TEL
        COMMENTS : 배달전화정보 수정
    -->
    <update id="updateMembrDlvrTel" parameterType="registVO">
        /* RegistMapper.updateMemberDlvrTel */
        UPDATE TB_MB_MEMBER_DLVR_TEL tmmda
           SET
             TEL_NO = SBPENC.E(#{telNo})
            , SHORT_NO = #{shortNo}
            , USE_YN = #{useYn}
            , MOD_ID = #{modId}
            , MOD_DT = #{modDt}
         WHERE tmmda.MEMBR_NO = #{membrNo}
           AND tmmda.MEMBR_ORGN_CD = #{membrOrgnCd}
           AND tmmda.DLVR_TEL_SEQ = #{dlvrTelSeq}
    </update>

    <!-- 배달전화정보 삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_DLVR_TEL
        COMMENTS : 배달전화정보 삭제
    -->
    <delete id="deleteMembrDlvrTel" parameterType="registVO">
        /* RegistMapper.deleteMembrDlvrTel */
        DELETE FROM TB_MB_MEMBER_DLVR_TEL tmmda
         WHERE tmmda.MEMBR_NO = #{membrNo}
           AND tmmda.MEMBR_ORGN_CD = #{membrOrgnCd}
           AND tmmda.DLVR_TEL_SEQ = #{dlvrTelSeq}
    </delete>

    <!-- 배달구역 리스트 조회-->
    <!--
        TABLE    : TB_MS_DELIVERY_LZONE
    -->
    <select id="getMembrLzoneList" parameterType="registVO" resultType="DefaultMap">
        /* RegistMapper.getMembrLzoneList */
        SELECT tmdl.DLVR_LZONE_CD AS VALUE,
               tmdl.DLVR_LZONE_NM AS NAME
        FROM TB_MS_DELIVERY_LZONE tmdl
        WHERE tmdl.STORE_CD = #{regStoreCd}
        ORDER BY DLVR_LZONE_CD ASC
    </select>

    <!-- 배달구역 리스트 조회-->
    <!--
        TABLE    : TB_MS_DELIVERY_MZONE
    -->
    <select id="getDlvrMzoneList" parameterType="registVO" resultType="DefaultMap">
        /* RegistMapper.getDlvrMzoneList */
        SELECT tmdm.DLVR_MZONE_CD AS VALUE,
               tmdm.DLVR_MZONE_NM AS NAME
        FROM TB_MS_DELIVERY_MZONE tmdm
        WHERE tmdm.DLVR_LZONE_CD = #{dlvrLzoneCd}
        AND tmdm.STORE_CD = #{regStoreCd}
        ORDER BY DLVR_MZONE_CD ASC
    </select>

    <!-- 배달주소지 수정 -->
    <!--
        TABLE    : TB_MB_MEMBER_DLVR_ADDR
        COMMENTS : [회원]회원_배달_주소
    -->
    <update id="updateDlvrAddrInfo" parameterType="registVO">
        /* RegistMapper.updateDlvrAddrInfo */
        UPDATE TB_MB_MEMBER_DLVR_ADDR
        SET
        DLVR_LZONE_CD = #{dlvrLzoneCd}
        , DLVR_MZONE_CD = #{dlvrMzoneCd}
        , ADDR = SBPENC.E((SELECT A.DLVR_LZONE_NM|| ' ' ||B.DLVR_MZONE_NM FROM TB_MS_DELIVERY_LZONE A,  TB_MS_DELIVERY_MZONE B WHERE A.DLVR_LZONE_CD = B.DLVR_LZONE_CD AND A.STORE_CD = B.STORE_CD AND A.STORE_CD = #{regStoreCd} AND B.DLVR_LZONE_CD = #{dlvrLzoneCd} AND B.DLVR_MZONE_CD = #{dlvrMzoneCd}))
        , ADDR_DTL = SBPENC.E(#{addrDtl})
        , USE_YN = #{useYn}
        , MOD_ID = #{modId}
        , MOD_DT = #{modDt}
        WHERE MEMBR_NO = #{membrNo}
        AND MEMBR_ORGN_CD = #{membrOrgnCd}
        AND DLVR_ADDR_SEQ = #{dlvrAddrSeq}
    </update>

    <!-- 배달주소지 삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_DLVR_ADDR
        COMMENTS : [회원]회원_배달_주소
    -->
    <delete id="deleteDlvrAddrInfo" parameterType="registVO">
        /* RegistMapper.deleteDlvrAddrInfo */
        DELETE FROM TB_MB_MEMBER_DLVR_ADDR
        WHERE MEMBR_NO = #{membrNo}
        AND MEMBR_ORGN_CD = #{membrOrgnCd}
        AND DLVR_ADDR_SEQ = #{dlvrAddrSeq}
    </delete>

    <!-- 회원정보 포인트변경내역 - 조회 -->
    <!--
        TABLE    : TB_MB_MEMBER_POINT_HIST
        COMMENTS : [회원]회원_포인트_변경내역
    -->
    <select id="getMemberInfoPointList" parameterType="registVO" resultType="DefaultMap">
        /* RegistMapper.getMemberInfoPointList */
        SELECT
        tmmph.CHG_DATE,
        tmmph.POINT_CHG_FG,
        tmmph.CHG_SEQ,
        tmmph.CHG_POINT,
        tmmph.REMARK
        FROM TB_MB_MEMBER_POINT_HIST tmmph
        WHERE 1=1
        AND tmmph.MEMBR_ORGN_CD = #{membrOrgnCd}
        AND tmmph.MEMBR_NO = #{membrNo}
        ORDER BY tmmph.CHG_DATE DESC, tmmph.CHG_SEQ DESC
    </select>

    <!-- 회원정보 구매내역 - 조회 -->
    <!--
        TABLE    : TB_SL_DAILY_MEMBR_PROD, TB_MS_STORE, TB_MS_PRODUCT
        COMMENTS : [매출]일별_회원/상품별 매출, [매장]매장 정보, [매장]상품
    -->
    <select id="getMemberInfoBuyList" parameterType="registVO" resultType="DefaultMap">
        /* RegistMapper.getMemberInfoBuyList */
        SELECT
        tsdmp.SALE_DATE,
        tms.STORE_NM,
        tmp.PROD_NM,
        tsdmp.TOT_SALE_QTY,
        tsdmp.TOT_SALE_AMT,
        tsdmp.MEMBR_SAVE_POINT,
        tsdmp.MEMBR_USE_POINT
        FROM TB_SL_DAILY_MEMBR_PROD tsdmp,
        TB_MS_STORE tms,
        TB_MS_PRODUCT tmp
        WHERE 1=1
        AND tsdmp.HQ_OFFICE_CD = #{hqOfficeCd}
        <if test="storeCd != null and storeCd != ''">
            AND tsdmp.STORE_CD = #{storeCd}
        </if>
        AND tsdmp.MEMBR_NO = #{membrNo}
        AND tms.HQ_OFFICE_CD (+)= tsdmp.HQ_OFFICE_CD
        AND tms.HQ_BRAND_CD (+)= tsdmp.HQ_BRAND_CD
        AND tms.STORE_CD (+)= tsdmp.STORE_CD
        AND tmp.HQ_BRAND_CD (+)= tsdmp.HQ_BRAND_CD
        AND tmp.STORE_CD (+)= tsdmp.STORE_CD
        AND tmp.PROD_CD (+)= tsdmp.PROD_CD
    </select>

    <!-- 회원 포인트 조회 팝업 - 조회(보내는 회원) -->
    <!--
        TABLE    : TB_MB_MEMBER_POINT, TB_MB_MEMBER
        COMMENTS : [회원]회원_포인트정보, [회원]회원
    -->
    <select id="getSearchMemberPointList" parameterType="registVO" resultType="DefaultMap">
        /* RegistMapper.getSearchMemberPointList */
        SELECT
        tmm.MEMBR_NO,
        SBPENC.D(tmm.MEMBR_NM) AS MEMBR_NM,
        NVL(tmmp.AVABL_POINT, 0) AS AVABL_POINT
        FROM TB_MB_MEMBER tmm,
        TB_MB_MEMBER_POINT tmmp
        WHERE 1=1
        AND tmm.MEMBR_ORGN_CD = #{membrOrgnCd}
        <if test="storeCd != null and storeCd != ''">
            AND tmm.REG_STORE_CD = #{storeCd}
        </if>
        <if test="membrNo != null and membrNo != ''">
            AND tmm.MEMBR_NO LIKE '%'||#{membrNo}||'%'
        </if>
        <if test="membrNm != null and membrNm != ''">
            AND SBPENC.D(tmm.MEMBR_NM) LIKE '%'||#{membrNm}||'%'
        </if>
        <if test="telNo != null and telNo != ''">
            AND (tmm.SHORT_NO = #{telNo} OR SBPENC.D(tmm.TEL_NO) = #{telNo})
        </if>
        <if test="gubunMemberNo != null and gubunMemberNo != ''">
            AND tmm.MEMBR_NO != #{gubunMemberNo}
        </if>
        AND tmmp.AVABL_POINT > 0
        AND tmmp.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
        AND tmmp.MEMBR_NO (+)= tmm.MEMBR_NO
        ORDER BY tmm.MEMBR_NO
    </select>

    <!-- 회원 포인트 조회 팝업 - 조회(받는 회원) -->
    <!--
        TABLE    : TB_MB_MEMBER_POINT, TB_MB_MEMBER
        COMMENTS : [회원]회원_포인트정보, [회원]회원
    -->
    <select id="getSearchMemberPointReceiveList" parameterType="registVO" resultType="DefaultMap">
        /* RegistMapper.getSearchMemberPointReceiveList */
        SELECT
        tmm.MEMBR_NO,
        SBPENC.D(tmm.MEMBR_NM) AS MEMBR_NM,
        NVL(tmmp.AVABL_POINT, 0) AS AVABL_POINT
        FROM TB_MB_MEMBER tmm,
        TB_MB_MEMBER_POINT tmmp
        WHERE 1=1
        AND tmm.MEMBR_ORGN_CD = #{membrOrgnCd}
        <if test="storeCd != null and storeCd != ''">
            AND tmm.REG_STORE_CD = #{storeCd}
        </if>
        <if test="membrNo != null and membrNo != ''">
            AND tmm.MEMBR_NO LIKE '%'||#{membrNo}||'%'
        </if>
        <if test="membrNm != null and membrNm != ''">
            AND SBPENC.D(tmm.MEMBR_NM) LIKE '%'||#{membrNm}||'%'
        </if>
        <if test="telNo != null and telNo != ''">
            AND (tmm.SHORT_NO = #{telNo} OR SBPENC.D(tmm.TEL_NO) = #{telNo})
        </if>
        <if test="gubunMemberNo != null and gubunMemberNo != ''">
            AND tmm.MEMBR_NO != #{gubunMemberNo}
        </if>
        AND tmmp.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
        AND tmmp.MEMBR_NO (+)= tmm.MEMBR_NO
        ORDER BY tmm.MEMBR_NO
    </select>

    <!-- 회원 등급 조회 팝업 - 조회 -->
    <!--
        TABLE    : TB_MB_MEMBER
        COMMENTS : [회원]회원
    -->
    <select id="getSearchMemberClassList" parameterType="registVO" resultType="DefaultMap">
        /* RegistMapper.getSearchMemberClassList */
        SELECT
        MEMBR_NO,
        MEMBR_NM,
        POINT_SAVE_FG,
        NVL(PAY01, 0) AS MEMBER_CARD,
        NVL(PAY02, 0) AS MEMBER_CASH
        FROM
        (
            SELECT
            tmm.MEMBR_NO,
            SBPENC.D(tmm.MEMBR_NM) AS MEMBR_NM,
            tmm.MEMBR_CLASS_CD,
            tmmc.POINT_SAVE_FG,
            tmmcpr.PAY_CD,
            tmmcpr.ACC_RATE
            FROM TB_MB_MEMBER tmm,
            TB_MB_MEMBER_CLASS tmmc,
            TB_MB_MEMBER_CLASS_PAY_RATE tmmcpr
            WHERE 1=1
            AND tmm.MEMBR_ORGN_CD = #{membrOrgnCd}
            <if test="storeCd != null and storeCd != ''">
                AND tmm.REG_STORE_CD = #{storeCd}
            </if>
            <if test="membrNo != null and membrNo != ''">
                AND tmm.MEMBR_NO LIKE '%'||#{membrNo}||'%'
            </if>
            <if test="membrNm != null and membrNm != ''">
                AND SBPENC.D(tmm.MEMBR_NM) LIKE '%'||#{membrNm}||'%'
            </if>
            <if test="telNo != null and telNo != ''">
                AND (tmm.SHORT_NO = #{telNo} OR SBPENC.D(tmm.TEL_NO) = #{telNo})
            </if>
            AND tmmc.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
            AND tmmc.MEMBR_CLASS_CD (+)= tmm.MEMBR_CLASS_CD
            AND tmmcpr.MEMBR_ORGN_CD (+)= tmm.MEMBR_ORGN_CD
            AND tmmcpr.MEMBR_CLASS_CD (+)= tmm.MEMBR_CLASS_CD
            ORDER BY tmm.MEMBR_NO
        )
        PIVOT
        (
            SUM(ACC_RATE)
            FOR PAY_CD
            IN ('01' AS PAY01, '02' AS PAY02)
        )
        ORDER BY MEMBR_NO
    </select>

    <!-- 회원 포인트 조정 팝업 - 저장 update -->
    <!--
        TABLE    : TB_MB_MEMBER_POINT_HIST
        COMMENTS : [회원]회원_포인트_변경내역
    -->
    <update id="getMemberPointAdjustSaveUpdate" parameterType="registVO">
        /* RegistMapper.getMemberPointAdjustSaveUpdate */
        UPDATE
        TB_MB_MEMBER_POINT_HIST
        SET
        REMARK = #{remark},
        MOD_DT = #{modDt},
        MOD_ID = #{modId}
        WHERE 1=1
        AND MEMBR_ORGN_CD = #{membrOrgnCd}
        AND MEMBR_NO = #{membrNo}
        AND CHG_DATE = #{chgDate}
        AND CHG_SEQ = #{chgSeq}
    </update>

    <!-- 회원 포인트 조정 팝업 - 조회 -->
    <!--
        TABLE    : TB_MB_MEMBER_POINT_HIST
        COMMENTS : [회원]회원_포인트_변경내역
    -->
    <select id="getMemberPointAdjustList" parameterType="registVO" resultType="DefaultMap">
        /* RegistMapper.getMemberPointAdjustList */
        SELECT
        tmmph.CHG_POINT AS AVABL_POINT,
        tmmph.REMARK
        FROM TB_MB_MEMBER_POINT_HIST tmmph
        WHERE 1=1
        AND tmmph.MEMBR_ORGN_CD = #{membrOrgnCd}
        AND tmmph.MEMBR_NO = #{membrNo}
        AND tmmph.CHG_DATE = #{chgDate}
        AND tmmph.CHG_SEQ = #{chgSeq}
    </select>

    <!-- 회원 삭제 팝업 - 강제삭제 체크용 비밀번호 조회 -->
    <!--
        TABLE    : TB_CM_NMCODE
        COMMENTS : 회원 강제삭제를 위한 체크용 비밀번호를 조회한다.
    -->
    <select id="getForcedDeleteChkPwd" resultType="String">
        /* RegistMapper.getForcedDeleteChkPwd */
        SELECT NMCODE_NM
          FROM TB_CM_NMCODE tcn
         WHERE NMCODE_GRP_CD = '224'
           AND NMCODE_CD = '01'
    </select>

    <!-- 회원 삭제 팝업 - 회원 삭제 가능여부 조회 -->
    <!--
        TABLE    : TB_MB_MEMBER, TB_MB_MEMBER_POINT, TB_MB_MEMBER_PAID_BALANCE
        COMMENTS : 회원 삭제 가능여부를 조회한다.
    -->
    <select id="getMemberDeleteYnChk" parameterType="registVO" resultType="Integer">
        /* RegistMapper.getMemberDeleteYnChk */
        SELECT COUNT(1)
          FROM (     SELECT A.MEMBR_ORGN_CD,
                              A.MEMBR_NO,
                              B.FIRST_SALE_DATE
                        FROM TB_MB_MEMBER A,
                              TB_MB_MEMBER_POINT B
                       WHERE 1=1
                         AND A.MEMBR_ORGN_CD = #{membrOrgnCd}
                         AND A.MEMBR_NO = #{membrNo}
                         AND B.MEMBR_ORGN_CD (+)= A.MEMBR_ORGN_CD
                         AND B.MEMBR_NO (+)= A.MEMBR_NO
	            ) tmmp,
                (     SELECT MEMBR_NO,
                              COUNT(1) AS CNT
                        FROM TB_MB_MEMBER_PAID_BALANCE
                       WHERE 1=1
                         AND HQ_OFFICE_CD = #{hqOfficeCd}
                          <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                            <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                              AND STORE_CD = #{storeCd}
                            </if>
                          </if>
                          AND MEMBR_NO = #{membrNo}
                       GROUP
                          BY MEMBR_NO
                ) tmmpb
         WHERE tmmpb.MEMBR_NO (+)= tmmp.MEMBR_NO
           AND tmmp.MEMBR_NO = #{membrNo}
           AND tmmp.FIRST_SALE_DATE IS NULL
           AND NVL(tmmpb.CNT, 0) = 0
    </select>

    <!-- 회원 삭제 팝업 - 회원 정보 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER
        COMMENTS : 회원 정보 영구삭제
    -->
    <delete id="deleteMember" parameterType="registVO">
        /* USE : RegistMapper.deleteMember */
        DELETE TB_MB_MEMBER
         WHERE MEMBR_ORGN_CD = #{membrOrgnCd}
           AND MEMBR_NO IN
        <foreach collection="arrMembrNo" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>

    <!-- 회원 삭제 팝업 - 회원 추가정보 (광운대 아이스링크) 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_ADDITORY_KWU
        COMMENTS : 회원 추가정보 (광운대 아이스링크) 영구삭제
    -->
    <delete id="deleteMemberKwu" parameterType="registVO">
        /* USE : RegistMapper.deleteMemberKwu */
        DELETE TB_MB_MEMBER_ADDITORY_KWU
         WHERE MEMBR_ORGN_CD = #{membrOrgnCd}
           AND MEMBR_NO IN
        <foreach collection="arrMembrNo" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>

    <!-- 회원 삭제 팝업 - 회원 카드정보 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_CARD
        COMMENTS : 회원 카드정보 영구삭제
    -->
    <delete id="deleteMemberCard" parameterType="registVO">
        /* USE : RegistMapper.deleteMemberCard */
        DELETE TB_MB_MEMBER_CARD
         WHERE MEMBR_ORGN_CD = #{membrOrgnCd}
           AND MEMBR_NO IN
        <foreach collection="arrMembrNo" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>

    <!-- 회원 삭제 팝업 - 회원 포인트 변경내역 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_POINT_HIST
        COMMENTS : 회원 포인트 변경내역 영구삭제
    -->
    <delete id="deleteMemberPointHist" parameterType="registVO">
        /* USE : RegistMapper.deleteMemberPointHist */
        DELETE TB_MB_MEMBER_POINT_HIST
         WHERE MEMBR_ORGN_CD = #{membrOrgnCd}
           AND MEMBR_NO IN
        <foreach collection="arrMembrNo" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>

    <!-- 회원 삭제 팝업 - 회원 포인트 정보 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_POINT
        COMMENTS : 회원 포인트 정보 영구삭제
    -->
    <delete id="deleteMemberPoint" parameterType="registVO">
        /* USE : RegistMapper.deleteMemberPoint */
        DELETE TB_MB_MEMBER_POINT
         WHERE MEMBR_ORGN_CD = #{membrOrgnCd}
           AND MEMBR_NO IN
        <foreach collection="arrMembrNo" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>

    <!-- 회원 삭제 팝업 - 회원 포인트 정보 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_POINT_STORE
        COMMENTS : 회원 포인트 정보 영구삭제
    -->
    <delete id="deleteMemberPointStore" parameterType="registVO">
        /* USE : RegistMapper.deleteMemberPointStore */
        DELETE TB_MB_MEMBER_POINT_STORE
         WHERE MEMBR_ORGN_CD = #{membrOrgnCd}
           AND MEMBR_NO IN
        <foreach collection="arrMembrNo" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>

    <!-- 회원 삭제 팝업 - 회원 후불원장 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_POSTPAID
        COMMENTS : 회원 후불원장 영구삭제
    -->
    <delete id="deleteMemberPostpaid" parameterType="registVO">
        /* USE : RegistMapper.deleteMemberPostpaid */
        DELETE TB_MB_MEMBER_POSTPAID
         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
        <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
            <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                AND STORE_CD = #{storeCd}
            </if>
        </if>
           AND MEMBR_NO IN
        <foreach collection="arrMembrNo" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>

    <!-- 회원 삭제 팝업 - 후불회원 등록매장 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_POSTPAID_STORE
        COMMENTS : 후불회원 등록매장 영구삭제
    -->
    <delete id="deleteMemberPostpaidStore" parameterType="registVO">
        /* USE : RegistMapper.deleteMemberPostpaidStore */
        DELETE TB_MB_MEMBER_POSTPAID_STORE
         WHERE MEMBR_ORGN_CD = #{membrOrgnCd}
           AND MEMBR_NO IN
        <foreach collection="arrMembrNo" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>

    <!-- 회원 삭제 팝업 - 회원 선불원장 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_PREPAID
        COMMENTS : 회원 선불원장 영구삭제
    -->
    <delete id="deleteMemberPrepaid" parameterType="registVO">
        /* USE : RegistMapper.deleteMemberPrepaid */
        DELETE TB_MB_MEMBER_PREPAID
         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
        <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
            <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                AND STORE_CD = #{storeCd}
            </if>
        </if>
           AND MEMBR_NO IN
        <foreach collection="arrMembrNo" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>

    <!-- 회원 삭제 팝업 - 선불회원 등록매장 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_PREPAID_STORE
        COMMENTS : 선불회원 등록매장 영구삭제
    -->
    <delete id="deleteMemberPrepaidStore" parameterType="registVO">
        /* USE : RegistMapper.deleteMemberPrepaidStore */
        DELETE TB_MB_MEMBER_PREPAID_STORE
         WHERE MEMBR_ORGN_CD = #{membrOrgnCd}
           AND MEMBR_NO IN
        <foreach collection="arrMembrNo" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>

    <!-- 회원 삭제 팝업 - 선/후불 잔액 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_PAID_BALANCE
        COMMENTS : 선/후불 잔액 영구삭제
    -->
    <delete id="deleteMemberPaidBalance" parameterType="registVO">
        /* USE : RegistMapper.deleteMemberPaidBalance */
        DELETE TB_MB_MEMBER_PAID_BALANCE
         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
        <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
            <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                AND STORE_CD = #{storeCd}
            </if>
        </if>
           AND MEMBR_NO IN
        <foreach collection="arrMembrNo" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>

    <!-- 회원 삭제 팝업 - 전체회원 중 삭제불가회원 '미사용'으로 수정 -->
    <!--
        TABLE    : TB_MB_MEMBER, TB_MB_MEMBER_POINT, TB_MB_MEMBER_PAID_BALANCE
        COMMENTS : 전체회원 중 삭제불가회원 '미사용'으로 수정
    -->
    <update id="updateAllMemberUseYn" parameterType="registVO">
        /* USE : RegistMapper.updateAllMemberUseYn */
        MERGE INTO TB_MB_MEMBER A
		  USING (
		            SELECT tmmp.MEMBR_ORGN_CD,
							tmmp.MEMBR_NO
			           FROM (
			           			SELECT A.MEMBR_ORGN_CD,
			                            A.MEMBR_NO,
			                            B.FIRST_SALE_DATE
			                      FROM TB_MB_MEMBER A,
			                            TB_MB_MEMBER_POINT B
			                     WHERE 1=1
			                       AND A.MEMBR_ORGN_CD = #{membrOrgnCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd != "00000"'>
                                        AND A.REG_STORE_CD = #{storeCd}
                                    </if>
                                </if>
			                       AND B.MEMBR_ORGN_CD (+)= A.MEMBR_ORGN_CD
			                       AND B.MEMBR_NO (+)= A.MEMBR_NO
				            ) tmmp,
			                (
			                   SELECT MEMBR_NO,
                                       COUNT(1) AS CNT
			                     FROM TB_MB_MEMBER_PAID_BALANCE
                                WHERE 1=1
                                  AND HQ_OFFICE_CD = #{hqOfficeCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                                        AND STORE_CD = #{storeCd}
                                    </if>
                                </if>
			                    GROUP
			                       BY MEMBR_NO
			                ) tmmpb
         			  WHERE tmmpb.MEMBR_NO (+)= tmmp.MEMBR_NO
         				AND (tmmp.FIRST_SALE_DATE IS NOT NULL OR NVL(tmmpb.CNT, 0) > 0)
				  ) B
			  ON (
					A.MEMBR_ORGN_CD = B.MEMBR_ORGN_CD
                	AND A.MEMBR_NO = B.MEMBR_NO
                  )
            WHEN MATCHED THEN
            UPDATE
               SET A.USE_YN = 'N',
                   A.MOD_DT = #{modDt},
                   A.MOD_ID = #{modId}
    </update>

    <!-- 회원 삭제 팝업 - 전체회원 회원 정보 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER, TB_MB_MEMBER_POINT, TB_MB_MEMBER_PAID_BALANCE
        COMMENTS : 전체회원 회원 정보 영구삭제
    -->
    <delete id="deleteAllMember" parameterType="registVO">
        /* USE : RegistMapper.deleteAllMember */
        MERGE INTO TB_MB_MEMBER A
          USING (
                    SELECT tmmp.MEMBR_ORGN_CD,
                            tmmp.MEMBR_NO
                      FROM (
                                SELECT A.MEMBR_ORGN_CD,
                                        A.MEMBR_NO,
                                        B.FIRST_SALE_DATE
                                  FROM TB_MB_MEMBER A,
                                        TB_MB_MEMBER_POINT B
                                 WHERE 1=1
                                   AND A.MEMBR_ORGN_CD = #{membrOrgnCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd != "00000"'>
                                        AND A.REG_STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                   AND B.MEMBR_ORGN_CD (+)= A.MEMBR_ORGN_CD
                                   AND B.MEMBR_NO (+)= A.MEMBR_NO
                            ) tmmp,
                            (
                                SELECT MEMBR_NO,
                                        COUNT(1) AS CNT
                                  FROM TB_MB_MEMBER_PAID_BALANCE
                                 WHERE 1=1
                                   AND HQ_OFFICE_CD = #{hqOfficeCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                                        AND STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                 GROUP
                                    BY MEMBR_NO
                            ) tmmpb
                     WHERE tmmpb.MEMBR_NO (+)= tmmp.MEMBR_NO
                    <if test='forcedDeleteYn == "N"'>
                        AND tmmp.FIRST_SALE_DATE IS NULL
                        AND NVL(tmmpb.CNT, 0) = 0
                    </if>
                ) B
            ON (
                  A.MEMBR_ORGN_CD = B.MEMBR_ORGN_CD
                  AND A.MEMBR_NO = B.MEMBR_NO
                )
          WHEN MATCHED THEN
        UPDATE
           SET A.MOD_DT = #{modDt},
                A.MOD_ID = #{modId}
        DELETE
         WHERE A.MEMBR_ORGN_CD = B.MEMBR_ORGN_CD
           AND A.MEMBR_NO = B.MEMBR_NO
    </delete>

    <!-- 회원 삭제 팝업 - 전체회원 회원 추가정보 (광운대 아이스링크) 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_ADDITORY_KWU, TB_MB_MEMBER, TB_MB_MEMBER_POINT, TB_MB_MEMBER_PAID_BALANCE
        COMMENTS : 전체회원 회원 추가정보 (광운대 아이스링크) 영구삭제
    -->
    <delete id="deleteAllMemberKwu" parameterType="registVO">
        /* USE : RegistMapper.deleteAllMemberKwu */
        MERGE INTO TB_MB_MEMBER_ADDITORY_KWU A
          USING (
                    SELECT tmmp.MEMBR_ORGN_CD,
                            tmmp.MEMBR_NO
                      FROM (
                                SELECT A.MEMBR_ORGN_CD,
                                        A.MEMBR_NO,
                                        B.FIRST_SALE_DATE
                                  FROM TB_MB_MEMBER A,
                                        TB_MB_MEMBER_POINT B
                                 WHERE 1=1
                                   AND A.MEMBR_ORGN_CD = #{membrOrgnCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd != "00000"'>
                                        AND A.REG_STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                   AND B.MEMBR_ORGN_CD (+)= A.MEMBR_ORGN_CD
                                   AND B.MEMBR_NO (+)= A.MEMBR_NO
                            ) tmmp,
                            (
                                SELECT MEMBR_NO,
                                        COUNT(1) AS CNT
                                  FROM TB_MB_MEMBER_PAID_BALANCE
                                 WHERE 1=1
                                   AND HQ_OFFICE_CD = #{hqOfficeCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                                        AND STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                GROUP
                                   BY MEMBR_NO
                            ) tmmpb
                     WHERE tmmpb.MEMBR_NO (+)= tmmp.MEMBR_NO
                    <if test='forcedDeleteYn == "N"'>
                        AND tmmp.FIRST_SALE_DATE IS NULL
                        AND NVL(tmmpb.CNT, 0) = 0
                    </if>
                ) B
            ON (
                  A.MEMBR_ORGN_CD = B.MEMBR_ORGN_CD
                  AND A.MEMBR_NO = B.MEMBR_NO
                )
          WHEN MATCHED THEN
        UPDATE
           SET A.MOD_DT = #{modDt},
                A.MOD_ID = #{modId}
        DELETE
         WHERE A.MEMBR_ORGN_CD = B.MEMBR_ORGN_CD
           AND A.MEMBR_NO = B.MEMBR_NO
    </delete>

    <!-- 회원 삭제 팝업 - 전체회원 회원 카드정보 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_CARD, TB_MB_MEMBER, TB_MB_MEMBER_POINT, TB_MB_MEMBER_PAID_BALANCE
        COMMENTS : 전체회원 회원 카드정보 영구삭제
    -->
    <delete id="deleteAllMemberCard" parameterType="registVO">
        /* USE : RegistMapper.deleteAllMemberCard */
        MERGE INTO TB_MB_MEMBER_CARD A
          USING (
                    SELECT tmmp.MEMBR_ORGN_CD,
                            tmmp.MEMBR_NO
                      FROM (
                                SELECT A.MEMBR_ORGN_CD,
                                        A.MEMBR_NO,
                                        B.FIRST_SALE_DATE
                                  FROM TB_MB_MEMBER A,
                                        TB_MB_MEMBER_POINT B
                                 WHERE 1=1
                                   AND A.MEMBR_ORGN_CD = #{membrOrgnCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd != "00000"'>
                                        AND A.REG_STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                   AND B.MEMBR_ORGN_CD (+)= A.MEMBR_ORGN_CD
                                   AND B.MEMBR_NO (+)= A.MEMBR_NO
                            ) tmmp,
                            (
                                SELECT MEMBR_NO,
                                        COUNT(1) AS CNT
                                  FROM TB_MB_MEMBER_PAID_BALANCE
                                 WHERE 1=1
                                   AND HQ_OFFICE_CD = #{hqOfficeCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                                        AND STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                GROUP
                                   BY MEMBR_NO
                            ) tmmpb
                     WHERE tmmpb.MEMBR_NO (+)= tmmp.MEMBR_NO
                    <if test='forcedDeleteYn == "N"'>
                        AND tmmp.FIRST_SALE_DATE IS NULL
                        AND NVL(tmmpb.CNT, 0) = 0
                    </if>
                ) B
            ON (
                  A.MEMBR_ORGN_CD = B.MEMBR_ORGN_CD
                  AND A.MEMBR_NO = B.MEMBR_NO
                )
          WHEN MATCHED THEN
        UPDATE
           SET A.MOD_DT = #{modDt},
                A.MOD_ID = #{modId}
        DELETE
         WHERE A.MEMBR_ORGN_CD = B.MEMBR_ORGN_CD
           AND A.MEMBR_NO = B.MEMBR_NO
    </delete>

    <!-- 회원 삭제 팝업 - 전체회원 회원 포인트 변경내역 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_POINT_HIST, TB_MB_MEMBER, TB_MB_MEMBER_POINT, TB_MB_MEMBER_PAID_BALANCE
        COMMENTS : 전체회원 회원 포인트 변경내역 영구삭제
    -->
    <delete id="deleteAllMemberPointHist" parameterType="registVO">
        /* USE : RegistMapper.deleteAllMemberPointHist */
        MERGE INTO TB_MB_MEMBER_POINT_HIST A
          USING (
                    SELECT tmmp.MEMBR_ORGN_CD,
                            tmmp.MEMBR_NO
                      FROM (
                                SELECT A.MEMBR_ORGN_CD,
                                        A.MEMBR_NO,
                                        B.FIRST_SALE_DATE
                                  FROM TB_MB_MEMBER A,
                                        TB_MB_MEMBER_POINT B
                                 WHERE 1=1
                                   AND A.MEMBR_ORGN_CD = #{membrOrgnCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd != "00000"'>
                                        AND A.REG_STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                   AND B.MEMBR_ORGN_CD (+)= A.MEMBR_ORGN_CD
                                   AND B.MEMBR_NO (+)= A.MEMBR_NO
                            ) tmmp,
                            (
                                SELECT MEMBR_NO,
                                        COUNT(1) AS CNT
                                  FROM TB_MB_MEMBER_PAID_BALANCE
                                 WHERE 1=1
                                   AND HQ_OFFICE_CD = #{hqOfficeCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                                        AND STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                 GROUP
                                    BY MEMBR_NO
                            ) tmmpb
                     WHERE tmmpb.MEMBR_NO (+)= tmmp.MEMBR_NO
                    <if test='forcedDeleteYn == "N"'>
                        AND tmmp.FIRST_SALE_DATE IS NULL
                        AND NVL(tmmpb.CNT, 0) = 0
                    </if>
                ) B
            ON (
                  A.MEMBR_ORGN_CD = B.MEMBR_ORGN_CD
                  AND A.MEMBR_NO = B.MEMBR_NO
                )
          WHEN MATCHED THEN
        UPDATE
           SET A.MOD_DT = #{modDt},
                A.MOD_ID = #{modId}
        DELETE
         WHERE A.MEMBR_ORGN_CD = B.MEMBR_ORGN_CD
           AND A.MEMBR_NO = B.MEMBR_NO
    </delete>

    <!-- 회원 삭제 팝업 - 전체회원 회원 포인트 정보 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_POINT, TB_MB_MEMBER, TB_MB_MEMBER_POINT, TB_MB_MEMBER_PAID_BALANCE
        COMMENTS : 전체회원 회원 포인트 정보 영구삭제
    -->
    <delete id="deleteAllMemberPoint" parameterType="registVO">
        /* USE : RegistMapper.deleteAllMemberPoint */
        MERGE INTO TB_MB_MEMBER_POINT A
          USING (
                    SELECT tmmp.MEMBR_ORGN_CD,
                            tmmp.MEMBR_NO
                      FROM (
                                SELECT A.MEMBR_ORGN_CD,
                                        A.MEMBR_NO,
                                        B.FIRST_SALE_DATE
                                  FROM TB_MB_MEMBER A,
                                        TB_MB_MEMBER_POINT B
                                 WHERE 1=1
                                   AND A.MEMBR_ORGN_CD = #{membrOrgnCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd != "00000"'>
                                        AND A.REG_STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                   AND B.MEMBR_ORGN_CD (+)= A.MEMBR_ORGN_CD
                                   AND B.MEMBR_NO (+)= A.MEMBR_NO
                            ) tmmp,
                            (
                                SELECT MEMBR_NO,
                                        COUNT(1) AS CNT
                                  FROM TB_MB_MEMBER_PAID_BALANCE
                                 WHERE 1=1
                                   AND HQ_OFFICE_CD = #{hqOfficeCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                                        AND STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                 GROUP
                                    BY MEMBR_NO
                            ) tmmpb
                     WHERE tmmpb.MEMBR_NO (+)= tmmp.MEMBR_NO
                    <if test='forcedDeleteYn == "N"'>
                        AND tmmp.FIRST_SALE_DATE IS NULL
                        AND NVL(tmmpb.CNT, 0) = 0
                    </if>
                ) B
            ON (
                  A.MEMBR_ORGN_CD = B.MEMBR_ORGN_CD
                  AND A.MEMBR_NO = B.MEMBR_NO
                )
          WHEN MATCHED THEN
        UPDATE
           SET A.MOD_DT = #{modDt},
                A.MOD_ID = #{modId}
        DELETE
         WHERE A.MEMBR_ORGN_CD = B.MEMBR_ORGN_CD
           AND A.MEMBR_NO = B.MEMBR_NO
    </delete>

    <!-- 회원 삭제 팝업 - 전체회원 회원 포인트 정보 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_POINT_STORE, TB_MB_MEMBER, TB_MB_MEMBER_POINT, TB_MB_MEMBER_PAID_BALANCE
        COMMENTS : 전체회원 회원 포인트 정보 영구삭제
    -->
    <delete id="deleteAllMemberPointStore" parameterType="registVO">
        /* USE : RegistMapper.deleteAllMemberPointStore */
        MERGE INTO TB_MB_MEMBER_POINT_STORE A
          USING (
                    SELECT tmmp.MEMBR_ORGN_CD,
                            tmmp.MEMBR_NO
                      FROM (
                                SELECT A.MEMBR_ORGN_CD,
                                        A.MEMBR_NO,
                                        B.FIRST_SALE_DATE
                                  FROM TB_MB_MEMBER A,
                                        TB_MB_MEMBER_POINT B
                                 WHERE 1=1
                                   AND A.MEMBR_ORGN_CD = #{membrOrgnCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd != "00000"'>
                                        AND A.REG_STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                   AND B.MEMBR_ORGN_CD (+)= A.MEMBR_ORGN_CD
                                   AND B.MEMBR_NO (+)= A.MEMBR_NO
                            ) tmmp,
                            (
                                SELECT MEMBR_NO,
                                        COUNT(1) AS CNT
                                  FROM TB_MB_MEMBER_PAID_BALANCE
                                 WHERE 1=1
                                   AND HQ_OFFICE_CD = #{hqOfficeCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                                        AND STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                 GROUP
                                    BY MEMBR_NO
                            ) tmmpb
                     WHERE tmmpb.MEMBR_NO (+)= tmmp.MEMBR_NO
                    <if test='forcedDeleteYn == "N"'>
                        AND tmmp.FIRST_SALE_DATE IS NULL
                        AND NVL(tmmpb.CNT, 0) = 0
                    </if>
                ) B
            ON (
                  A.MEMBR_ORGN_CD = B.MEMBR_ORGN_CD
                  AND A.MEMBR_NO = B.MEMBR_NO
                )
          WHEN MATCHED THEN
        UPDATE
           SET A.MOD_DT = #{modDt},
                A.MOD_ID = #{modId}
        DELETE
         WHERE A.MEMBR_ORGN_CD = B.MEMBR_ORGN_CD
           AND A.MEMBR_NO = B.MEMBR_NO
    </delete>

    <!-- 회원 삭제 팝업 - 전체회원 회원 후불원장 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_POSTPAID, TB_MB_MEMBER, TB_MB_MEMBER_POINT, TB_MB_MEMBER_PAID_BALANCE
        COMMENTS : 전체회원 회원 후불원장 영구삭제
    -->
    <delete id="deleteAllMemberPostpaid" parameterType="registVO">
        /* USE : RegistMapper.deleteAllMemberPostpaid */
        MERGE INTO TB_MB_MEMBER_POSTPAID A
          USING (
                    SELECT #{hqOfficeCd} AS HQ_OFFICE_CD,
                        <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                            <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                                #{storeCd} AS STORE_CD,
                            </if>
                        </if>
                            tmmp.MEMBR_ORGN_CD,
                            tmmp.MEMBR_NO
                      FROM (
                                SELECT A.MEMBR_ORGN_CD,
                                        A.MEMBR_NO,
                                        B.FIRST_SALE_DATE
                                  FROM TB_MB_MEMBER A,
                                        TB_MB_MEMBER_POINT B
                                 WHERE 1=1
                                   AND A.MEMBR_ORGN_CD = #{membrOrgnCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd != "00000"'>
                                        AND A.REG_STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                   AND B.MEMBR_ORGN_CD (+)= A.MEMBR_ORGN_CD
                                   AND B.MEMBR_NO (+)= A.MEMBR_NO
                            ) tmmp,
                            (
                                SELECT MEMBR_NO,
                                        COUNT(1) AS CNT
                                  FROM TB_MB_MEMBER_PAID_BALANCE
                                 WHERE 1=1
                                   AND HQ_OFFICE_CD = #{hqOfficeCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                                        AND STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                GROUP
                                   BY MEMBR_NO
                            ) tmmpb
                     WHERE tmmpb.MEMBR_NO (+)= tmmp.MEMBR_NO
                    <if test='forcedDeleteYn == "N"'>
                        AND tmmp.FIRST_SALE_DATE IS NULL
                        AND NVL(tmmpb.CNT, 0) = 0
                    </if>
                 ) B
             ON (
                   A.HQ_OFFICE_CD = B.HQ_OFFICE_CD
                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                    <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                        AND A.STORE_CD = B.STORE_CD
                    </if>
                </if>
                   AND A.MEMBR_NO = B.MEMBR_NO
                 )
          WHEN MATCHED THEN
        UPDATE
           SET A.MOD_DT = #{modDt},
                A.MOD_ID = #{modId}
        DELETE
         WHERE A.HQ_OFFICE_CD = B.HQ_OFFICE_CD
        <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
            <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
           AND A.STORE_CD = B.STORE_CD
          </if>
        </if>
           AND A.MEMBR_NO = B.MEMBR_NO
    </delete>

    <!-- 회원 삭제 팝업 - 전체회원 후불회원 등록매장 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_POSTPAID_STORE, TB_MB_MEMBER, TB_MB_MEMBER_POINT, TB_MB_MEMBER_PAID_BALANCE
        COMMENTS : 전체회원 후불회원 등록매장 영구삭제
    -->
    <delete id="deleteAllMemberPostpaidStore" parameterType="registVO">
        /* USE : RegistMapper.deleteAllMemberPostpaidStore */
        MERGE INTO TB_MB_MEMBER_POSTPAID_STORE A
          USING (
                    SELECT tmmp.MEMBR_ORGN_CD,
                            tmmp.MEMBR_NO
                      FROM (
                                SELECT A.MEMBR_ORGN_CD,
                                        A.MEMBR_NO,
                                        B.FIRST_SALE_DATE
                                  FROM TB_MB_MEMBER A,
                                        TB_MB_MEMBER_POINT B
                                 WHERE 1=1
                                   AND A.MEMBR_ORGN_CD = #{membrOrgnCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd != "00000"'>
                                        AND A.REG_STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                   AND B.MEMBR_ORGN_CD (+)= A.MEMBR_ORGN_CD
                                   AND B.MEMBR_NO (+)= A.MEMBR_NO
                            ) tmmp,
                            (
                                SELECT MEMBR_NO,
                                        COUNT(1) AS CNT
                                  FROM TB_MB_MEMBER_PAID_BALANCE
                                 WHERE 1=1
                                   AND HQ_OFFICE_CD = #{hqOfficeCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                                        AND STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                 GROUP
                                    BY MEMBR_NO
                            ) tmmpb
                     WHERE tmmpb.MEMBR_NO (+)= tmmp.MEMBR_NO
                    <if test='forcedDeleteYn == "N"'>
                        AND tmmp.FIRST_SALE_DATE IS NULL
                        AND NVL(tmmpb.CNT, 0) = 0
                    </if>
                 ) B
             ON (
                    A.MEMBR_ORGN_CD = B.MEMBR_ORGN_CD
                    AND A.MEMBR_NO = B.MEMBR_NO
                 )
          WHEN MATCHED THEN
        UPDATE
           SET A.MOD_DT = #{modDt},
                A.MOD_ID = #{modId}
        DELETE
         WHERE A.MEMBR_ORGN_CD = B.MEMBR_ORGN_CD
           AND A.MEMBR_NO = B.MEMBR_NO
    </delete>

    <!-- 회원 삭제 팝업 - 전체회원 회원 선불원장 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_PREPAID, TB_MB_MEMBER, TB_MB_MEMBER_POINT, TB_MB_MEMBER_PAID_BALANCE
        COMMENTS : 전체회원 회원 선불원장 영구삭제
    -->
    <delete id="deleteAllMemberPrepaid" parameterType="registVO">
        /* USE : RegistMapper.deleteAllMemberPrepaid */
        MERGE INTO TB_MB_MEMBER_PREPAID A
          USING (
                    SELECT #{hqOfficeCd} AS HQ_OFFICE_CD,
                          <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                              <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                                #{storeCd} AS STORE_CD,
                              </if>
                          </if>
                            tmmp.MEMBR_ORGN_CD,
                            tmmp.MEMBR_NO
                      FROM (
                                SELECT A.MEMBR_ORGN_CD,
                                        A.MEMBR_NO,
                                        B.FIRST_SALE_DATE
                                  FROM TB_MB_MEMBER A,
                                        TB_MB_MEMBER_POINT B
                                 WHERE 1=1
                                   AND A.MEMBR_ORGN_CD = #{membrOrgnCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd != "00000"'>
                                        AND A.REG_STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                   AND B.MEMBR_ORGN_CD (+)= A.MEMBR_ORGN_CD
                                   AND B.MEMBR_NO (+)= A.MEMBR_NO
                            ) tmmp,
                            (
                                SELECT MEMBR_NO,
                                        COUNT(1) AS CNT
                                  FROM TB_MB_MEMBER_PAID_BALANCE
                                 WHERE 1=1
                                   AND HQ_OFFICE_CD = #{hqOfficeCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                                        AND STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                 GROUP
                                    BY MEMBR_NO
                            ) tmmpb
                     WHERE tmmpb.MEMBR_NO (+)= tmmp.MEMBR_NO
                   <if test='forcedDeleteYn == "N"'>
                       AND tmmp.FIRST_SALE_DATE IS NULL
                       AND NVL(tmmpb.CNT, 0) = 0
                   </if>
               ) B
           ON (
                  A.HQ_OFFICE_CD = B.HQ_OFFICE_CD
                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                    <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                        AND A.STORE_CD = B.STORE_CD
                    </if>
                </if>
                 AND A.MEMBR_NO = B.MEMBR_NO
               )
         WHEN MATCHED THEN
       UPDATE
          SET A.MOD_DT = #{modDt},
               A.MOD_ID = #{modId}
       DELETE
        WHERE A.HQ_OFFICE_CD = B.HQ_OFFICE_CD
        <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
            <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                AND A.STORE_CD = B.STORE_CD
            </if>
        </if>
          AND A.MEMBR_NO = B.MEMBR_NO
    </delete>

    <!-- 회원 삭제 팝업 - 전체회원 선불회원 등록매장 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_PREPAID_STORE, TB_MB_MEMBER, TB_MB_MEMBER_POINT, TB_MB_MEMBER_PAID_BALANCE
        COMMENTS : 전체회원 선불회원 등록매장 영구삭제
    -->
    <delete id="deleteAllMemberPrepaidStore" parameterType="registVO">
        /* USE : RegistMapper.deleteAllMemberPrepaidStore */
        MERGE INTO TB_MB_MEMBER_PREPAID_STORE A
          USING (
                    SELECT tmmp.MEMBR_ORGN_CD,
                            tmmp.MEMBR_NO
                      FROM (
                                SELECT A.MEMBR_ORGN_CD,
                                        A.MEMBR_NO,
                                        B.FIRST_SALE_DATE
                                  FROM TB_MB_MEMBER A,
                                        TB_MB_MEMBER_POINT B
                                 WHERE 1=1
                                   AND A.MEMBR_ORGN_CD = #{membrOrgnCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd != "00000"'>
                                        AND A.REG_STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                   AND B.MEMBR_ORGN_CD (+)= A.MEMBR_ORGN_CD
                                   AND B.MEMBR_NO (+)= A.MEMBR_NO
                            ) tmmp,
                            (
                                SELECT MEMBR_NO,
                                        COUNT(1) AS CNT
                                  FROM TB_MB_MEMBER_PAID_BALANCE
                                 WHERE 1=1
                                   AND HQ_OFFICE_CD = #{hqOfficeCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                                        AND STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                GROUP
                                   BY MEMBR_NO
                            ) tmmpb
                     WHERE tmmpb.MEMBR_NO (+)= tmmp.MEMBR_NO
                    <if test='forcedDeleteYn == "N"'>
                        AND tmmp.FIRST_SALE_DATE IS NULL
                        AND NVL(tmmpb.CNT, 0) = 0
                    </if>
                ) B
            ON (
                    A.MEMBR_ORGN_CD = B.MEMBR_ORGN_CD
                    AND A.MEMBR_NO = B.MEMBR_NO
                )
          WHEN MATCHED THEN
        UPDATE
           SET A.MOD_DT = #{modDt},
                A.MOD_ID = #{modId}
        DELETE
         WHERE A.MEMBR_ORGN_CD = B.MEMBR_ORGN_CD
           AND A.MEMBR_NO = B.MEMBR_NO
    </delete>

    <!-- 회원 삭제 팝업 - 전체회원 선/후불 잔액 영구삭제 -->
    <!--
        TABLE    : TB_MB_MEMBER_PAID_BALANCE, TB_MB_MEMBER, TB_MB_MEMBER_POINT, TB_MB_MEMBER_PAID_BALANCE
        COMMENTS : 전체회원 선/후불 잔액 영구삭제
    -->
    <delete id="deleteAllMemberPaidBalance" parameterType="registVO">
        /* USE : RegistMapper.deleteAllMemberPaidBalance */
        MERGE INTO TB_MB_MEMBER_PAID_BALANCE A
          USING (
                    SELECT #{hqOfficeCd} AS HQ_OFFICE_CD,
                        <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                            <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                                #{storeCd} AS STORE_CD,
                            </if>
                        </if>
                            tmmp.MEMBR_ORGN_CD,
                            tmmp.MEMBR_NO
                      FROM (
                                SELECT A.MEMBR_ORGN_CD,
                                        A.MEMBR_NO,
                                        B.FIRST_SALE_DATE
                                  FROM TB_MB_MEMBER A,
                                        TB_MB_MEMBER_POINT B
                                 WHERE 1=1
                                   AND A.MEMBR_ORGN_CD = #{membrOrgnCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd != "00000"'>
                                        AND A.REG_STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                   AND B.MEMBR_ORGN_CD (+)= A.MEMBR_ORGN_CD
                                   AND B.MEMBR_NO (+)= A.MEMBR_NO
                            ) tmmp,
                            (
                                SELECT MEMBR_NO,
                                        COUNT(1) AS CNT
                                  FROM TB_MB_MEMBER_PAID_BALANCE
                                 WHERE 1=1
                                   AND HQ_OFFICE_CD = #{hqOfficeCd}
                                <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                                    <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                                        AND STORE_CD = #{storeCd}
                                    </if>
                                </if>
                                 GROUP
                                    BY MEMBR_NO
                            ) tmmpb
                     WHERE tmmpb.MEMBR_NO (+)= tmmp.MEMBR_NO
                    <if test='forcedDeleteYn == "N"'>
                        AND tmmp.FIRST_SALE_DATE IS NULL
                        AND NVL(tmmpb.CNT, 0) = 0
                    </if>
                ) B
            ON (
                    A.HQ_OFFICE_CD = B.HQ_OFFICE_CD
                 <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
                     <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                         AND A.STORE_CD = B.STORE_CD
                     </if>
                 </if>
                    AND A.MEMBR_NO = B.MEMBR_NO
                )
          WHEN MATCHED THEN
        UPDATE
           SET A.MOD_DT = #{modDt},
                A.MOD_ID = #{modId}
        DELETE
         WHERE A.HQ_OFFICE_CD = B.HQ_OFFICE_CD
        <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
            <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                AND A.STORE_CD = B.STORE_CD
            </if>
        </if>
           AND A.MEMBR_NO = B.MEMBR_NO
    </delete>

    <!-- 코드별 공통코드 콤보박스 조회 -->
    <!--
        TABLE    : TB_HQ_NMCODE, TB_MS_STORE_NMCODE
        COMMENTS :
    -->
    <select id="getNmcodeComboList" parameterType="registVO" resultType="DefaultMap">
        /* RegistMapper.getNmcodeComboList */
        <!-- 본사 -->
        <if test='orgnFg != null and orgnFg.toString() == "HQ"'>
            SELECT
            thn.NMCODE_CD AS VALUE,
            thn.NMCODE_NM AS NAME
            FROM TB_HQ_NMCODE thn
            WHERE 1=1
            AND thn.HQ_OFFICE_CD = #{hqOfficeCd}
            AND thn.NMCODE_GRP_CD = #{nmcodeGrpCd}
            ORDER BY thn.NMCODE_CD
        </if>
        <if test='orgnFg != null and orgnFg.toString() == "STORE"'>
            SELECT
            tmsn.NMCODE_CD AS VALUE,
            tmsn.NMCODE_NM AS NAME
            FROM TB_MS_STORE_NMCODE tmsn
            WHERE 1=1
            AND tmsn.STORE_CD = #{storeCd}
            AND tmsn.NMCODE_GRP_CD = #{nmcodeGrpCd}
            ORDER BY tmsn.NMCODE_CD
        </if>
    </select>

    <!-- 회원정보 저장 (광운대아이스링크 추가정보) -->
    <!--
        TABLE    : TB_MB_MEMBER_ADDITORY_KWU
        COMMENTS : 회원정보 저장 (광운대아이스링크 추가정보)
    -->
    <insert id="mergeMemberInfoAddKwu" parameterType="registVO">
        /* RegistMapper.mergeMemberInfoAddKwu */
        MERGE INTO TB_MB_MEMBER_ADDITORY_KWU
        USING DUAL ON
        (
            MEMBR_ORGN_CD = #{membrOrgnCd} AND MEMBR_NO = #{membrNo}
        )
        WHEN MATCHED THEN
            UPDATE
            SET MEMBR_FG = #{membrFg},
            PRIVATE_FG = #{privateFg},
            POSTPAID_FG = #{postpaidFg},
            PEOPLE_CNT = #{peopleCnt},
            GROUP_FG = #{groupFg},
            GROUP_TYPE_FG = #{groupTypeFg},
            PAYMENT_FG = #{paymentFg},
            TEACHER_CD = #{teacherCd},
            CLASS_FG = #{classFg},
            SKATE_FG = #{skateFg},
            REGISTER_DATE = #{registerDate},
            USE_DATE_FG = #{useDateFg},
            USE_START_DATE = #{useStartDate},
            USE_END_DATE = #{useEndDate},
            USE_WEEK = #{useWeek},
            USE_PROD_NM = #{useProdNm},
            USE_AMT = #{useAmt},
            BUSINESS_AMT = #{businessAmt},
            TEACHER_AMT = #{teacherAmt},
            TEACHER_CNT = #{teacherCnt},
            USE_REMAIN_AMT = #{useRemainAmt},
            TRANSPORTATION_AMT = #{transportationAmt},
            TRANSPORTATION_CNT = #{transportationCnt},
            MOD_ID = #{modId},
            MOD_DT = #{modDt}
            WHERE 1=1
            AND MEMBR_ORGN_CD = #{membrOrgnCd}
            AND MEMBR_NO = #{membrNo}
        WHEN NOT MATCHED THEN
            INSERT (
                MEMBR_ORGN_CD,
                MEMBR_NO,
                MEMBR_FG,
                PRIVATE_FG,
                POSTPAID_FG,
                PEOPLE_CNT,
                GROUP_FG,
                GROUP_TYPE_FG,
                PAYMENT_FG,
                TEACHER_CD,
                CLASS_FG,
                SKATE_FG,
                REGISTER_DATE,
                USE_DATE_FG,
                USE_START_DATE,
                USE_END_DATE,
                USE_WEEK,
                USE_PROD_NM,
                USE_AMT,
                BUSINESS_AMT,
                TEACHER_AMT,
                TEACHER_CNT,
                USE_REMAIN_AMT,
                TRANSPORTATION_AMT,
                TRANSPORTATION_CNT,
                REG_DT,
                REG_ID,
                MOD_DT,
                MOD_ID
            ) VALUES (
                #{membrOrgnCd},
                #{membrNo},
                #{membrFg},
                #{privateFg},
                #{postpaidFg},
                #{peopleCnt},
                #{groupFg},
                #{groupTypeFg},
                #{paymentFg},
                #{teacherCd},
                #{classFg},
                #{skateFg},
                #{registerDate},
                #{useDateFg},
                #{useStartDate},
                #{useEndDate},
                #{useWeek},
                #{useProdNm},
                #{useAmt},
                #{businessAmt},
                #{teacherAmt},
                #{teacherCnt},
                #{useRemainAmt},
                #{transportationAmt},
                #{transportationCnt},
                #{regDt},
                #{regId},
                #{modDt},
                #{modId}
            )
    </insert>

    <!-- 회원정보 조회 (광운대아이스링크 추가정보) -->
    <!--
        TABLE    : TB_MB_MEMBER_ADDITORY_KWU
        COMMENTS : 회원정보 조회 (광운대아이스링크 추가정보)
    -->
    <select id="getMemberInfoAddKwu" parameterType="registVO" resultType="DefaultMap">
        /* RegistMapper.getMemberInfoAddKwu */
        SELECT
        tmmak.MEMBR_FG,
        tmmak.PRIVATE_FG,
        tmmak.POSTPAID_FG,
        tmmak.PEOPLE_CNT,
        tmmak.GROUP_FG,
        tmmak.GROUP_TYPE_FG,
        tmmak.PAYMENT_FG,
        tmmak.TEACHER_CD,
        tmmak.CLASS_FG,
        tmmak.SKATE_FG,
        tmmak.REGISTER_DATE,
        tmmak.USE_DATE_FG,
        tmmak.USE_START_DATE,
        tmmak.USE_END_DATE,
        tmmak.USE_WEEK,
        tmmak.USE_PROD_NM,
        tmmak.USE_AMT,
        tmmak.BUSINESS_AMT,
        tmmak.TEACHER_AMT,
        tmmak.TEACHER_CNT,
        tmmak.USE_REMAIN_AMT,
        tmmak.TRANSPORTATION_AMT,
        tmmak.TRANSPORTATION_CNT
        FROM TB_MB_MEMBER_ADDITORY_KWU tmmak
        WHERE 1=1
        AND tmmak.MEMBR_ORGN_CD = #{membrOrgnCd}
        AND tmmak.MEMBR_NO = #{membrNo}
    </select>

</mapper>