<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    Prod.xml
    상품관리 sql
    ======================================================
    No  ||  수정자 ||  수정일자    ||  수정내역
    ======================================================
    1       노현수     2018.10.19     쿼리수정
-->
<mapper namespace="kr.co.solbipos.base.prod.prod.service.impl.ProdMapper">

    <!-- 상품 조회 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_HQ_PRODUCT_SALE_PRICE,
                   TB_MS_PRODUCT, TB_MS_PRODUCT_SALE_PRICE
        PARAM    : prodVO
        COMMENTS : 상품의 목록을 조회한다. ( 본사/매장 )
    -->
    <select id="getProdList" parameterType="prodVO" resultType="DefaultMap">
        /* USE : ProdMapper.getProdList */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                <include refid="CmmSQL.PagingTemplateHeader"/>
                SELECT
                    thp.HQ_OFFICE_CD,
                    thp.PROD_CD,
                    thp.PROD_NM,
                    thp.PROD_CLASS_CD,
                    ( SELECT SF_GET_PROD_CLASSES('H', thp.HQ_OFFICE_CD, thp.PROD_CLASS_CD) FROM DUAL ) AS PROD_CLASS_NM,
                    NVL(thp.COST_UPRC, 0) COST_UPRC,
                    NVL(thp.SPLY_UPRC, 0) SPLY_UPRC,
                    NVL(thpsp.SALE_UPRC, 0) AS SALE_UPRC, -- 판매단가
                    thp.ORGPLCE_CD, -- TODO 원산지명 조회 필요
                    thp.PO_UNIT_FG,
                    thp.REG_DT
                    <include refid="CmmSQL.PagingTemplateCount"/>
                FROM
                    TB_HQ_PRODUCT thp
                LEFT OUTER JOIN (
                    SELECT
                        PROD_CD,
                        MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST
                            ORDER BY
                            START_DATE DESC ) AS SALE_UPRC
                    FROM
                        TB_HQ_PRODUCT_SALE_PRICE
                    WHERE
                        HQ_OFFICE_CD = #{hqOfficeCd}
                        <![CDATA[
                        AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        ]]>
                        AND SALE_PRC_FG = '1' -- 본사, 매장 구분이 필요한지 확인. 무시면 조건 제거
                    GROUP BY
                        PROD_CD
                    ) thpsp ON
                    thp.PROD_CD = thpsp.PROD_CD
                WHERE
                    thp.HQ_OFFICE_CD = #{hqOfficeCd}
                <if test="chkDt == false">
                    <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
                        <![CDATA[
                        AND thp.REG_DT >= #{startDate}
                        AND tho.REG_DT <= #{endDate} --조회일자
                        ]]>
                    </if>
                </if>
                <if test="prodCd != null and prodCd != ''">
                    AND thp.PROD_CD = #{prodCd} --상품코드
                </if>
                <if test="prodNm != null and prodNm != ''">
                    AND thp.PROD_NM LIKE #{prodNm}||'%' --상품명
                </if>
                <if test="barCd != null and barCd != ''">
                    AND EXISTS (
                                SELECT 1
                                FROM
                                    TB_HQ_PRODUCT_BARCD
                                WHERE
                                    HQ_OFFICE_CD = thp.HQ_OFFICE_CD
                                    AND PROD_CD = thp.PROD_CD
                                    AND BARCD_CD = #{barCd}
                                ) --바코드
                </if>
                <if test="prodClassCd != null and prodClassCd != ''">
                    AND thp.PROD_CLASS_CD = #{prodClassCd} --상품분류코드
                </if>
                <include refid="CmmSQL.PagingTemplateBottom"/>
            </when>
            <!-- 가맹점 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                <include refid="CmmSQL.PagingTemplateHeader"/>
                SELECT
                    tmp.STORE_CD,
                    tmp.PROD_CD,
                    tmp.PROD_NM,
                    tmp.PROD_CLASS_CD,
                    ( SELECT SF_GET_PROD_CLASSES('S', tmp.STORE_CD, tmp.PROD_CLASS_CD) FROM DUAL ) AS PROD_CLASS_NM,
                    NVL(tmp.COST_UPRC, 0) COST_UPRC,
                    NVL(tmp.SPLY_UPRC, 0) SPLY_UPRC,
                    NVL(thpsp.SALE_UPRC, 0) AS SALE_UPRC, -- 판매단가
                    tmp.ORGPLCE_CD, -- TODO 원산지명 조회 필요
                    tmp.PO_UNIT_FG,
                    tmp.REG_DT
                    <include refid="CmmSQL.PagingTemplateCount"/>
                FROM
                    TB_MS_PRODUCT tmp
                LEFT OUTER JOIN (
                    SELECT
                        PROD_CD,
                        MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST
                            ORDER BY
                            START_DATE DESC ) AS SALE_UPRC
                    FROM
                        TB_MS_PRODUCT_SALE_PRICE
                    WHERE
                        STORE_CD = #{storeCd}
                        <![CDATA[
                        AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        ]]>
                        AND SALE_PRC_FG = '1' -- 본사, 매장 구분이 필요한지 확인. 무시면 조건 제거
                    GROUP BY
                        PROD_CD
                    ) thpsp ON
                    tmp.PROD_CD = thpsp.PROD_CD
                WHERE
                    tmp.STORE_CD = #{storeCd}
                <if test="chkDt == false">
                    <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
                        <![CDATA[
                        AND tmp.REG_DT >= #{startDate}
                        AND tmp.REG_DT <= #{endDate} --조회일자
                        ]]>
                    </if>
                </if>
                <if test="prodCd != null and prodCd != ''">
                    AND tmp.PROD_CD = #{prodCd} --상품코드
                </if>
                <if test="prodNm != null and prodNm != ''">
                    AND tmp.PROD_NM LIKE #{prodNm}||'%' --상품명
                </if>
                <if test="barCd != null and barCd != ''">
                    AND EXISTS (
                                SELECT 1
                                FROM
                                    TB_MS_PRODUCT_BARCD
                                WHERE
                                    STORE_CD = tmp.STORE_CD
                                    AND PROD_CD = tmp.PROD_CD
                                    AND BARCD_CD = #{barCd}
                                ) --바코드
                </if>
                <if test="prodClassCd != null and prodClassCd != ''">
                    AND tmp.PROD_CLASS_CD = #{prodClassCd} --상품분류코드
                </if>
                <include refid="CmmSQL.PagingTemplateBottom"/>
            </when>
        </choose>
    </select>

    <!-- 상품 상세 조회 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_HQ_PRODUCT_SALE_PRICE,
                   TB_MS_PRODUCT, TB_MS_PRODUCT_SALE_PRICE
        PARAM    : prodVO
        COMMENTS : 상품의 상세정보를 조회한다. ( 본사/매장 )
    -->
    <select id="getProdDetail" parameterType="prodVO" resultType="DefaultMap">
        /* USE : ProdMapper.getProdDetail */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT
                    thp.HQ_OFFICE_CD,       -- 본사코드
                    thp.PROD_CD,            -- 상품코드
                    thp.PROD_NM,            -- 상품명
                    thp.PROD_CLASS_CD,      -- 상품분류코드
                    ( SELECT SF_GET_PROD_CLASSES('H', thp.HQ_OFFICE_CD, thp.PROD_CLASS_CD) FROM DUAL ) AS PROD_CLASS_NM,
                    thp.CORNR_CD,           -- 코너코드
                    thp.ORGPLCE_CD,         -- 원산지 구분 -- TODO 원산지명 조회 필요
                    thp.SDATTR_CLASS_CD,
                    thp.SDSEL_GRP_CD,
                    thp.POINT_SAVE_YN,
                    thp.PROD_DC_FG,
                    thp.VAT_FG,                                     -- 과세여부
                    vat_fg.NMCODE_NM AS VAT_FG_NM,
                    thp.PROD_TIP_YN,
                    thp.PROD_PACK_AMT,
                    thp.PROD_DLVR_AMT,
                    thp.PROD_TYPE_FG,                               -- 상품유형구분
                    prod_type_fg.NMCODE_NM AS PROD_TYPE_FG_NM,
                    thp.SALE_PROD_YN,                               -- 판매상품여부
                    sale_prod_yn.NMCODE_NM AS SALE_PROD_YN_NM,
                    thp.STOCK_PROD_YN,                              -- 재고관리여부
                    stock_prod_yn.NMCODE_NM AS STOCK_PROD_YN_NM,
                    thp.SIDE_PROD_YN,
                    thp.SET_PROD_FG,                                -- 세트상품구분
                    set_prod_fg.NMCODE_NM AS SET_PROD_FG_NM,
                    NVL(thpsp.SALE_UPRC, 0) AS SALE_URC,            -- 최초판매단가
                    NVL(thp.COST_UPRC, 0) AS COST_UPRC,             -- 원가단가
                    NVL(thp.LAST_COST_UPRC, 0) AS LAST_COST_UPRC,   -- 최종원가단가
                    NVL(thp.SPLY_UPRC, 0) AS SPLY_UPRC,             -- 판매단가
                    thp.SPLY_UPRC_USE_YN,
                    thp.PO_PROD_FG,                                 -- 주문상품구분
                    po_prod_fg.NMCODE_NM AS PO_PROD_FG_NM,
                    thp.PO_UNIT_FG,                                 -- 주문단위
                    po_unit_fg.NMCODE_NM AS PO_UNIT_FG_NM,
                    thp.PO_UNIT_QTY,
                    thp.PO_UNIT_ALLOW_FG,
                    thp.PO_MIN_QTY,     -- 최소주문
                    thp.SAFE_STOCK_QTY, -- 안전재고
                    thp.STOCK_UNIT_FG,
                    thp.USE_YN,             -- 사용여부
                    use_yn.NMCODE_NM AS USE_YN_NM,
                    thp.REMARK,         -- 비고
                    thp.REG_DT
                FROM
                    TB_HQ_PRODUCT thp
                LEFT OUTER JOIN (
                    SELECT
                        PROD_CD,
                        MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST
                            ORDER BY
                            START_DATE DESC ) AS SALE_UPRC
                    FROM
                        TB_HQ_PRODUCT_SALE_PRICE
                    WHERE
                        HQ_OFFICE_CD = #{hqOfficeCd}
                        <![CDATA[
                        AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        ]]>
                        AND SALE_PRC_FG = '1' -- 본사, 매장 구분이 필요한지 확인. 무시면 조건 제거
                    GROUP BY
                        PROD_CD
                    ) thpsp ON thp.PROD_CD = thpsp.PROD_CD
                LEFT OUTER JOIN TB_CM_NMCODE prod_type_fg ON
                    prod_type_fg.NMCODE_GRP_CD = '008'
                    AND thp.PROD_TYPE_FG = prod_type_fg.NMCODE_CD
                LEFT OUTER JOIN TB_CM_NMCODE sale_prod_yn ON
                    sale_prod_yn.NMCODE_GRP_CD = '091'
                    AND thp.SALE_PROD_YN = sale_prod_yn.NMCODE_CD
                LEFT OUTER JOIN TB_CM_NMCODE po_prod_fg ON
                    po_prod_fg.NMCODE_GRP_CD = '092'
                    AND thp.PO_PROD_FG = po_prod_fg.NMCODE_CD
                LEFT OUTER JOIN TB_CM_NMCODE po_unit_fg ON
                    po_unit_fg.NMCODE_GRP_CD = '093'
                    AND thp.PO_UNIT_FG = po_unit_fg.NMCODE_CD
                LEFT OUTER JOIN TB_CM_NMCODE vat_fg ON
                    vat_fg.NMCODE_GRP_CD = '039'
                    AND thp.VAT_FG = vat_fg.NMCODE_CD
                LEFT OUTER JOIN TB_CM_NMCODE stock_prod_yn ON
                    stock_prod_yn.NMCODE_GRP_CD = '067'
                    AND thp.STOCK_PROD_YN = stock_prod_yn.NMCODE_CD
                LEFT OUTER JOIN TB_CM_NMCODE use_yn ON
                    use_yn.NMCODE_GRP_CD = '067'
                    AND thp.USE_YN = use_yn.NMCODE_CD
                LEFT OUTER JOIN TB_CM_NMCODE set_prod_fg ON
                    set_prod_fg.NMCODE_GRP_CD = '095'
                    AND thp.SET_PROD_FG = set_prod_fg.NMCODE_CD
                WHERE
                    thp.HQ_OFFICE_CD = #{hqOfficeCd}
                    AND thp.PROD_CD = #{prodCd}
            </when>
            <!-- 가맹점 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                SELECT
                    tmp.HQ_OFFICE_CD,       -- 본사코드
                    tmp.PROD_CD,            -- 상품코드
                    tmp.PROD_NM,            -- 상품명
                    tmp.PROD_CLASS_CD,      -- 상품분류코드
                    ( SELECT SF_GET_PROD_CLASSES('S', tmp.STORE_CD, tmp.PROD_CLASS_CD) FROM DUAL ) AS PROD_CLASS_NM,
                    tmp.CORNR_CD,           -- 코너코드
                    tmp.ORGPLCE_CD,         -- 원산지 구분 -- TODO 원산지명 조회 필요
                    tmp.SDATTR_CLASS_CD,
                    tmp.SDSEL_GRP_CD,
                    tmp.POINT_SAVE_YN,
                    tmp.PROD_DC_FG,
                    tmp.VAT_FG,                                     -- 과세여부
                    vat_fg.NMCODE_NM AS VAT_FG_NM,
                    tmp.PROD_TIP_YN,
                    tmp.PROD_PACK_AMT,
                    tmp.PROD_DLVR_AMT,
                    tmp.PROD_TYPE_FG,                               -- 상품유형
                    prod_type_fg.NMCODE_NM AS PROD_TYPE_FG_NM,
                    tmp.SALE_PROD_YN,                               -- 판매상품여부
                    sale_prod_yn.NMCODE_NM AS SALE_PROD_YN_NM,
                    tmp.STOCK_PROD_YN,                              -- 재고관리여부
                    stock_prod_yn.NMCODE_NM AS STOCK_PROD_YN_NM,
                    tmp.SIDE_PROD_YN,
                    tmp.SET_PROD_FG,                                -- 세트상품구분
                    set_prod_fg.NMCODE_NM AS SET_PROD_FG_NM,
                    NVL(tmpsp.SALE_UPRC, 0) AS SALE_URC,            -- 최초판매단가
                    NVL(tmp.COST_UPRC, 0) AS COST_UPRC,             -- 원가단가
                    NVL(tmp.LAST_COST_UPRC, 0) AS LAST_COST_UPRC,   -- 최종원가단가
                    NVL(tmp.SPLY_UPRC, 0) AS SPLY_UPRC,             -- 판매단가
                    tmp.SPLY_UPRC_USE_YN,
                    tmp.PO_PROD_FG,                                 -- 주문상품구분
                    po_prod_fg.NMCODE_NM AS PO_PROD_FG_NM,
                    tmp.PO_UNIT_FG,                                 -- 주문단위
                    po_unit_fg.NMCODE_NM AS PO_UNIT_FG_NM,
                    tmp.PO_UNIT_QTY,
                    tmp.PO_UNIT_ALLOW_FG,
                    tmp.PO_MIN_QTY,     -- 최소주문
                    tmp.SAFE_STOCK_QTY, -- 안전재고
                    tmp.STOCK_UNIT_FG,
                    tmp.USE_YN,             -- 사용여부
                    use_yn.NMCODE_NM AS USE_YN_NM,
                    tmp.REMARK,         -- 비고
                    tmp.REG_DT
                FROM
                    TB_MS_PRODUCT tmp
                LEFT OUTER JOIN (
                    SELECT
                        PROD_CD,
                        MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST
                            ORDER BY
                            START_DATE DESC ) AS SALE_UPRC
                    FROM
                        TB_MS_PRODUCT_SALE_PRICE
                    WHERE
                        STORE_CD = #{storeCd}
                        <![CDATA[
                        AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        ]]>
                        AND SALE_PRC_FG = '2' -- 본사, 매장 구분이 필요한지 확인. 무시면 조건 제거
                    GROUP BY
                        PROD_CD
                    ) tmpsp ON tmp.PROD_CD = tmpsp.PROD_CD
                LEFT OUTER JOIN TB_CM_NMCODE prod_type_fg ON
                    prod_type_fg.NMCODE_GRP_CD = '008'
                    AND thp.PROD_TYPE_FG = prod_type_fg.NMCODE_CD
                LEFT OUTER JOIN TB_CM_NMCODE sale_prod_yn ON
                    sale_prod_yn.NMCODE_GRP_CD = '091'
                    AND tmp.SALE_PROD_YN = sale_prod_yn.NMCODE_CD
                LEFT OUTER JOIN TB_CM_NMCODE po_prod_fg ON
                    po_prod_fg.NMCODE_GRP_CD = '092'
                    AND tmp.PO_PROD_FG = po_prod_fg.NMCODE_CD
                LEFT OUTER JOIN TB_CM_NMCODE po_unit_fg ON
                    po_unit_fg.NMCODE_GRP_CD = '093'
                    AND tmp.PO_UNIT_FG = po_unit_fg.NMCODE_CD
                LEFT OUTER JOIN TB_CM_NMCODE vat_fg ON
                    vat_fg.NMCODE_GRP_CD = '039'
                    AND tmp.VAT_FG = vat_fg.NMCODE_CD
                LEFT OUTER JOIN TB_CM_NMCODE stock_prod_yn ON
                    stock_prod_yn.NMCODE_GRP_CD = '067'
                    AND tmp.STOCK_PROD_YN = stock_prod_yn.NMCODE_CD
                LEFT OUTER JOIN TB_CM_NMCODE use_yn ON
                    use_yn.NMCODE_GRP_CD = '067'
                    AND tmp.USE_YN = use_yn.NMCODE_CD
                LEFT OUTER JOIN TB_CM_NMCODE set_prod_fg ON
                    set_prod_fg.NMCODE_GRP_CD = '095'
                    AND tmp.SET_PROD_FG = set_prod_fg.NMCODE_CD
                WHERE
                    tmp.STORE_CD = #{storeCd}
                    AND tmp.PROD_CD = #{prodCd}
        </when>
        </choose>
    </select>

    <!-- 연결 상품 조회 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_UNITST_PROD, TB_MS_PRODUCT_UNITST_PROD,
        PARAM    : prodVO
        COMMENTS : 상품의 연결상품을 조회한다. ( 본사/매장 )
    -->
    <select id="getLinkedProdList" parameterType="prodVO" resultType="DefaultMap">
        /* USE : ProdMapper.getLinkedProdList */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT
                    thpup.HQ_OFFICE_CD,
                    thpup.PROD_CD,
                    thpup.UNIT_PROD_CD,
                    thpup.SET_PROD_FG,
                    thpup.UNIT_PROD_QTY,
                    thpup.DISP_SEQ
                FROM
                    TB_HQ_PRODUCT_UNITST_PROD thpup
                WHERE
                    thpup.HQ_OFFICE_CD = #{hqOfficeCd}
                    AND thpup.PROD_CD = #{prodCd}
                ORDER BY
                    thpup.DISP_SEQ
            </when>
            <!-- 가맹점 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                SELECT
                    tmpup.STORE_CD,
                    tmpup.PROD_CD,
                    tmpup.UNIT_PROD_CD,
                    tmpup.SET_PROD_FG,
                    tmpup.UNIT_PROD_QTY,
                    tmpup.DISP_SEQ
                FROM
                    TB_MS_PRODUCT_UNITST_PROD tmpup
                WHERE
                    tmpup.STORE_CD = #{storeCd}
                    AND tmpup.PROD_CD = #{prodCd}
                ORDER BY
                    tmpup.DISP_SEQ
            </when>
        </choose>
    </select>

    <!-- 상품정보 저장 -->
    <!--
        TABLE    : TB_HQ_PRODUCT
        COMMENTS : 본사/매장의 상품정보를 생성/수정 한다.
    -->
    <update id="saveProductInfo" parameterType="prodVO">
        /* ProdMapper.saveProductInfo */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                MERGE INTO
                    TB_HQ_PRODUCT thp
                USING DUAL ON
                    (
                        thp.HQ_OFFICE_CD = #{hqOfficeCd}
                        AND thp.PROD_CD = #{prodCd}
                    )
                WHEN MATCHED THEN
                    UPDATE
                    SET
                        PROD_NM = #{prodNm},
                        PROD_CLASS_CD  = #{prodClassCd},
                        CORNR_CD = #{cornrCd},
                        ORGPLCE_CD = #{orgplceCd},
                        SDATTR_CLASS_CD = #{sdattrClassCd},
                        SDSEL_GRP_CD = #{sdselGrpCd},
                        POINT_SAVE_YN = #{pointSaveYn},
                        PROD_DC_FG = #{prodDcFg},
                        VAT_FG = #{vatFg},
                        PROD_TIP_YN = #{prodTipYn},
                        PROD_PACK_AMT = #{prodPackAmt},
                        PROD_DLVR_AMT = #{prodDlvrAmt},
                        PROD_TYPE_FG = #{prodTypeFg},
                        SALE_PROD_YN = #{saleProdYn},
                        STOCK_PROD_YN = #{stockProdYn},
                        SIDE_PROD_YN = #{sideProdYn},
                        SET_PROD_FG = #{setProdFg},
                        COST_UPRC = #{costUprc},
                        LAST_COST_UPRC = #{lastCostUprc},
                        SPLY_UPRC = #{splyUprc},
                        SPLY_UPRC_USE_YN = #{splyUprcUseYn},
                        PO_PROD_FG = #{poProdFg},
                        PO_UNIT_FG = #{poUnitFg},
                        PO_UNIT_QTY = #{poUnitQty},
                        PO_UNIT_ALLOW_FG = #{poUnitAllowFg},
                        PO_MIN_QTY = #{poMinQty},
                        SAFE_STOCK_QTY = #{safeStockQty},
                        STOCK_UNIT_FG = #{stockUnitFg},
                        USE_YN = #{useYn},
                        REMARK = #{remark},
                        MOD_DT = #{modDt},
                        MOD_ID = #{modId}
                  WHEN NOT MATCHED THEN
                    INSERT
                    (
                        HQ_OFFICE_CD,
                        PROD_CD,
                        PROD_NM,
                        PROD_CLASS_CD,
                        CORNR_CD,
                        ORGPLCE_CD,
                        SDATTR_CLASS_CD,
                        SDSEL_GRP_CD,
                        POINT_SAVE_YN,
                        PROD_DC_FG,
                        VAT_FG,
                        PROD_TIP_YN,
                        PROD_PACK_AMT,
                        PROD_DLVR_AMT,
                        PROD_TYPE_FG,
                        SALE_PROD_YN,
                        STOCK_PROD_YN,
                        SIDE_PROD_YN,
                        SET_PROD_FG,
                        COST_UPRC,
                        LAST_COST_UPRC,
                        SPLY_UPRC,
                        SPLY_UPRC_USE_YN,
                        PO_PROD_FG,
                        PO_UNIT_FG,
                        PO_UNIT_QTY,
                        PO_UNIT_ALLOW_FG,
                        PO_MIN_QTY,
                        SAFE_STOCK_QTY,
                        STOCK_UNIT_FG,
                        USE_YN,
                        REMARK,
                        REG_DT,
                        REG_ID,
                        MOD_DT,
                        MOD_ID
                    ) VALUES (
                        #{hqOfficeCd},
                        #{prodCd},
                        #{prodNm},
                        #{prodClassCd},
                        #{cornrCd},
                        #{orgplceCd},
                        #{sdattrClassCd},
                        #{sdselGrpCd},
                        #{pointSaveYn},
                        #{prodDcFg},
                        #{vatFg},
                        #{prodTipYn},
                        #{prodPackAmt},
                        #{prodDlvrAmt},
                        #{prodTypeFg},
                        #{saleProdYn},
                        #{stockProdYn},
                        #{sideProdYn},
                        #{setProdFg},
                        #{costUprc},
                        #{lastCostUprc},
                        #{splyUprc},
                        #{splyUprcUseYn},
                        #{poProdFg},
                        #{poUnitFg},
                        #{poUnitQty},
                        #{poUnitAllowFg},
                        #{poMinQty},
                        #{safeStockQty},
                        #{stockUnitFg},
                        #{useYn},
                        #{remark},
                        #{regDt},
                        #{regId},
                        #{modDt},
                        #{modId}
                    )
            </when>
            <!-- 가맹점 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                MERGE INTO
                    TB_MS_PRODUCT tmp
                USING DUAL ON
                    (
                        tmp.STORE_CD = #{storeCd}
                        AND tmp.PROD_CD = #{prodCd}
                    )
                WHEN MATCHED THEN
                    UPDATE
                    SET
                        PROD_NM = #{prodNm},
                        PROD_CLASS_CD  = #{prodClassCd},
                        CORNR_CD = #{cornrCd},
                        ORGPLCE_CD = #{orgplceCd},
                        SDATTR_CLASS_CD = #{sdattrClassCd},
                        SDSEL_GRP_CD = #{sdselGrpCd},
                        POINT_SAVE_YN = #{pointSaveYn},
                        PROD_DC_FG = #{prodDcFg},
                        VAT_FG = #{vatFg},
                        PROD_TIP_YN = #{prodTipYn},
                        PROD_PACK_AMT = #{prodPackAmt},
                        PROD_DLVR_AMT = #{prodDlvrAmt},
                        PROD_TYPE_FG = #{prodTypeFg},
                        SALE_PROD_YN = #{saleProdYn},
                        STOCK_PROD_YN = #{stockProdYn},
                        SIDE_PROD_YN = #{sideProdYn},
                        SET_PROD_FG = #{setProdFg},
                        COST_UPRC = #{costUprc},
                        LAST_COST_UPRC = #{lastCostUprc},
                        SPLY_UPRC = #{splyUprc},
                        SPLY_UPRC_USE_YN = #{splyUprcUseYn},
                        PO_PROD_FG = #{poProdFg},
                        PO_UNIT_FG = #{poUnitFg},
                        PO_UNIT_QTY = #{poUnitQty},
                        PO_UNIT_ALLOW_FG = #{poUnitAllowFg},
                        PO_MIN_QTY = #{poMinQty},
                        SAFE_STOCK_QTY = #{safeStockQty},
                        STOCK_UNIT_FG = #{stockUnitFg},
                        USE_YN = #{useYn},
                        REMARK = #{remark},
                        MOD_DT = #{modDt},
                        MOD_ID = #{modId}
                WHEN NOT MATCHED THEN
                    INSERT
                    (
                        STORE_CD,
                        PROD_CD,
                        PROD_NM,
                        PROD_CLASS_CD,
                        CORNR_CD,
                        ORGPLCE_CD,
                        SDATTR_CLASS_CD,
                        SDSEL_GRP_CD,
                        POINT_SAVE_YN,
                        PROD_DC_FG,
                        VAT_FG,
                        PROD_TIP_YN,
                        PROD_PACK_AMT,
                        PROD_DLVR_AMT,
                        PROD_TYPE_FG,
                        SALE_PROD_YN,
                        STOCK_PROD_YN,
                        SIDE_PROD_YN,
                        SET_PROD_FG,
                        COST_UPRC,
                        LAST_COST_UPRC,
                        SPLY_UPRC,
                        SPLY_UPRC_USE_YN,
                        PO_PROD_FG,
                        PO_UNIT_FG,
                        PO_UNIT_QTY,
                        PO_UNIT_ALLOW_FG,
                        PO_MIN_QTY,
                        SAFE_STOCK_QTY,
                        STOCK_UNIT_FG,
                        USE_YN,
                        REMARK,
                        REG_DT,
                        REG_ID,
                        MOD_DT,
                        MOD_ID
                    ) VALUES (
                        #{storeCd},
                        #{prodCd},
                        #{prodNm},
                        #{prodClassCd},
                        #{cornrCd},
                        #{orgplceCd},
                        #{sdattrClassCd},
                        #{sdselGrpCd},
                        #{pointSaveYn},
                        #{prodDcFg},
                        #{vatFg},
                        #{prodTipYn},
                        #{prodPackAmt},
                        #{prodDlvrAmt},
                        #{prodTypeFg},
                        #{saleProdYn},
                        #{stockProdYn},
                        #{sideProdYn},
                        #{setProdFg},
                        #{costUprc},
                        #{lastCostUprc},
                        #{splyUprc},
                        #{splyUprcUseYn},
                        #{poProdFg},
                        #{poUnitFg},
                        #{poUnitQty},
                        #{poUnitAllowFg},
                        #{poMinQty},
                        #{safeStockQty},
                        #{stockUnitFg},
                        #{useYn},
                        #{remark},
                        #{regDt},
                        #{regId},
                        #{modDt},
                        #{modId}
                    )
            </when>
        </choose>
    </update>

</mapper>



