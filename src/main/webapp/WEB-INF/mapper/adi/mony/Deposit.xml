<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    Deposit.xml
    계정관리 sql
    ======================================================
    No  ||  수정자 ||  수정일자    ||  수정내역
    ======================================================
    1       김지은     2018.10.12      최초작성
    2       이다솜     2019.08.14      본사에서 계정 등록 시 매장에도 적용되도록 추가
-->
<mapper namespace="kr.co.solbipos.adi.mony.accntManage.service.impl.DepositMapper">


    <!-- 계정 조회 -->
    <!--
        TABLE    : TB_HQ_ACCOUNT, TB_MS_ACCOUNT
        COMMENTS : 입출금 계정을 조회한다.
    -->
    <select id="getDepositAccntList" parameterType="accntVO" resultType="DefaultMap">
      /* USE : DepositMapper.getDepositAccntList */
      <if test="orgnFg != null and orgnFg.toString() == 'HQ'">
          SELECT HQ_OFFICE_CD,
                 ACCNT_CD,
                 ACCNT_NM,
                 ACCNT_FG,
                 USE_YN
            FROM TB_HQ_ACCOUNT
           WHERE HQ_OFFICE_CD = #{hqOfficeCd}
             AND ACCNT_FG = #{accntFg, jdbcType=VARCHAR}
       ORDER BY ACCNT_CD ASC
      </if>
      <if test="orgnFg != null and orgnFg.toString() == 'STORE'">
          SELECT (SELECT HQ_OFFICE_CD FROM TB_MS_STORE WHERE STORE_CD = #{storeCd}) AS HQ_OFFICE_CD,
                 STORE_CD,
                 ACCNT_CD,
                 ACCNT_NM,
                 ACCNT_FG,
                 USE_YN
            FROM TB_MS_ACCOUNT
           WHERE STORE_CD = #{storeCd}
             AND ACCNT_FG = #{accntFg, jdbcType=VARCHAR}
       ORDER BY ACCNT_CD ASC
      </if>

    </select>

    <!-- 계정 생성시 계정코드 생성 -->
    <!--
        TABLE    : TB_HQ_ACCOUNT, TB_MS_ACCOUNT
        PARAM    : accntVO
        COMMENTS : 계정생성시 계정코드 생성한다. ( 본사/매장 )
    -->
    <select id="getAccntCode" parameterType="accntVO" resultType="String">
        <choose>
            <when test="orgnFg != null and orgnFg.toString() == 'HQ'">
                SELECT LPAD( NVL(MAX(ACCNT_CD), 0) + 1, 3, '0') AS ACCNT_CD
                FROM TB_HQ_ACCOUNT
                WHERE HQ_OFFICE_CD  = #{hqOfficeCd}
            </when>
            <when test="orgnFg != null and orgnFg.toString() == 'STORE'">
                SELECT LPAD( NVL(MAX(ACCNT_CD), 0) + 1, 3, '0') AS ACCNT_CD
                FROM TB_MS_ACCOUNT
                WHERE STORE_CD  = #{storeCd}
            </when>
        </choose>
    </select>

    <!-- 계정 추가 -->
    <!--
        TABLE    : TB_HQ_ACCOUNT, TB_MS_ACCOUNT
        COMMENTS : 입출금 계정을 추가한다.
    -->
    <insert id="insertDepositAccntList" parameterType="accntVO">
      /* USE : DepositMapper.insertDepositAccntList */
      <!--<selectKey resultType="String" keyProperty="accntCd" order="BEFORE">
        SELECT LPAD( NVL(MAX(ACCNT_CD), 0) + 1, 3, '0') AS ACCNT_CD
        <if test="orgnFg != null and orgnFg.toString() == 'HQ'">
          FROM TB_HQ_ACCOUNT
         WHERE HQ_OFFICE_CD  = #{hqOfficeCd}
        </if>
        <if test="orgnFg != null and orgnFg.toString() == 'STORE'">
          FROM TB_MS_ACCOUNT
         WHERE STORE_CD  = #{storeCd}
        </if>
      </selectKey>-->

      <if test="orgnFg != null and orgnFg.toString() == 'HQ'">
        INSERT INTO TB_HQ_ACCOUNT(
            HQ_OFFICE_CD,
      </if>
      <if test="orgnFg != null and orgnFg.toString() == 'STORE'">
        INSERT INTO TB_MS_ACCOUNT(
            STORE_CD,
      </if>
            ACCNT_CD,
            ACCNT_NM,
            ACCNT_FG,
            USE_YN,
            REG_DT,
            REG_ID,
            MOD_DT,
            MOD_ID
        ) VALUES (
      <if test="orgnFg != null and orgnFg.toString() == 'HQ'">
            #{hqOfficeCd},
      </if>
      <if test="orgnFg != null and orgnFg.toString() == 'STORE'">
            #{storeCd},
      </if>
            #{accntCd},
            #{accntNm},
            #{accntFg, jdbcType=VARCHAR},
            #{useYn, jdbcType=VARCHAR},
            #{regDt},
            #{regId},
            #{modDt},
            #{modId}
        )
    </insert>

    <!-- 계정 수정 -->
    <!--
          TABLE    : TB_HQ_ACCOUNT, TB_MS_ACCOUNT
          COMMENTS : 입출금 계정을 수정한다.
      -->
    <update id="updateDepositAccntList" parameterType="accntVO">
        /* USE : DepositMapper.updateDepositAccntList */
      <if test="orgnFg != null and orgnFg.toString() == 'HQ'">
        UPDATE TB_HQ_ACCOUNT
           SET ACCNT_NM = #{accntNm},
               USE_YN = #{useYn, jdbcType=VARCHAR},
               MOD_DT = #{modDt},
               MOD_ID = #{modId}
         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
           AND ACCNT_CD = #{accntCd}
      </if>
      <if test="orgnFg != null and orgnFg.toString() == 'STORE'">
        UPDATE TB_MS_ACCOUNT
           SET ACCNT_NM = #{accntNm},
               USE_YN = #{useYn, jdbcType=VARCHAR},
               MOD_DT = #{modDt},
               MOD_ID = #{modId}
         WHERE STORE_CD = #{storeCd}
           AND ACCNT_CD = #{accntCd}
      </if>
    </update>

    <!-- 계정 삭제 -->
    <!--
          TABLE    : TB_HQ_ACCOUNT, TB_MS_ACCOUNT
          COMMENTS : 입출금 계정을 삭제한다.
      -->
    <delete id="deleteDepositAccntList" parameterType="accntVO">
        /* USE : DepositMapper.deleteDepositAccntList */
      <if test="orgnFg != null and orgnFg.toString() == 'HQ'">
        DELETE TB_HQ_ACCOUNT
         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
           AND ACCNT_CD = #{accntCd}
      </if>
      <if test="orgnFg != null and orgnFg.toString() == 'STORE'">
        DELETE TB_MS_ACCOUNT
         WHERE STORE_CD = #{storeCd}
           AND ACCNT_CD = #{accntCd}
      </if>
    </delete>

    <!-- 부가서비스_금전처리_계정관리 생성 시 매장적용  -->
    <!--
        TABLE    : TB_MS_ACCOUNT
        PARAM    : accntVO
        COMMENTS : 본사 부가서비스_금전처리_계정관리 정보를 매장에 생성한다.
    -->
    <select id="insertAccntToStore" statementType="CALLABLE"  parameterType="accntVO" resultType="String">
        /* USE : DepositMapper.insertAccntToStore   */
        {
            CALL PKG_HQ_ACCOUNT.SP_HQ_ACCOUNT_I
          (
            #{hqOfficeCd},
            #{accntCd},
            #{regId},
            #{result, mode=OUT, jdbcType=VARCHAR}
          )
        }
    </select>

    <!-- 부가서비스_금전처리_계정관리 수정 시 매장적용  -->
    <!--
        TABLE    : TB_MS_ACCOUNT
        PARAM    : accntVO
        COMMENTS : 본사 부가서비스_금전처리_계정관리 정보를 매장에 수정한다.
    -->
    <select id="updateAccntToStore" statementType="CALLABLE"  parameterType="accntVO" resultType="String">
        /* USE : DepositMapper.updateAccntToStore   */
        {
            CALL PKG_HQ_ACCOUNT.SP_HQ_ACCOUNT_U
          (
            #{hqOfficeCd},
            #{accntCd},
            #{regId},
            #{result, mode=OUT, jdbcType=VARCHAR}
          )
        }
    </select>

    <!-- 부가서비스_금전처리_계정관리 삭제 시 매장적용  -->
    <!--
        TABLE    : TB_MS_ACCOUNT
        PARAM    : accntVO
        COMMENTS : 본사 부가서비스_금전처리_계정관리 정보를 매장에 삭제한다.
    -->
    <select id="deleteAccntToStore" statementType="CALLABLE"  parameterType="accntVO" resultType="String">
        /* USE : DepositMapper.deleteAccntToStore   */
        {
            CALL PKG_HQ_ACCOUNT.SP_HQ_ACCOUNT_D
          (
            #{hqOfficeCd},
            #{accntCd},
            #{regId},
            #{result, mode=OUT, jdbcType=VARCHAR}
          )
        }
    </select>


</mapper>
