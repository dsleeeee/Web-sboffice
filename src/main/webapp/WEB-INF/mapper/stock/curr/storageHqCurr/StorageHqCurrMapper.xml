<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.solbipos.stock.curr.storageHqCurr.service.impl.StorageHqCurrMapper">

    <select id="getStorageHqCurrList" parameterType="storageHqCurrVO" resultType="DefaultMap">
        /* USE : HqCurrMapper.getStorageHqCurrList */
        <include refid="CmmSQL.PagingTemplateHeader"/>
		SELECT A.PROD_CD             ,   A.PROD_NM
		,	A.FIRST_VENDR_IN_DATE ,   A.LAST_VENDR_IN_DATE
		,	A.FIRST_HQ_OUT_DATE   ,   A.LAST_HQ_OUT_DATE
		,	A.FIRST_SALE_DATE     ,   A.LAST_SALE_DATE
		,   A.COST_UPRC
		,	A.VENDR_NM
		,	A.BARCD_CD
		,	A.PO_UNIT_QTY
		,	A.CURR_AMT
		,	A.PO_UNIT_FG
		,	(SELECT NMCODE_NM FROM TB_HQ_NMCODE WHERE NMCODE_GRP_CD = '093' AND HQ_OFFICE_CD = #{hqOfficeCd} AND NMCODE_CD = A.PO_UNIT_FG)  AS PO_UNIT_FG_NM      /* 본사 가상로그인시 */
		,	A.SAFE_STOCK_QTY
		,	A.CURR_QTY
		,	A.ACC_VENDR_IN_QTY
		,	A.ACC_VENDR_OUT_QTY
		,	A.ACC_HQ_OUT_QTY
		,	A.ACC_HQ_IN_QTY
		,	A.ACC_STORE_MOVE_IN_QTY
		,	A.ACC_STORE_MOVE_OUT_QTY
		,	A.ACC_DISUSE_QTY
		,	A.ACC_ADJ_QTY
		,	A.ACC_SET_IN_QTY
		,	A.ACC_SALE_VENDR_OUT_QTY
		,	A.ACC_SALE_VENDR_IN_QTY
		,	A.PROD_CLASS_CD
		,   C.LV1_CD
		,   C.LV1_NM
		,   C.LV2_CD
		,   C.LV2_NM
		,   C.LV3_CD
		,   C.LV3_NM
		,   B.HQ_OFFICE_CD
		,   B.CURR_QTY_000      --매대
		/*   동적 START */
		${sQuery1}
		/*   동적 END */
		<include refid="CmmSQL.PagingTemplateCount"/>
		FROM	(
		        SELECT  tshsc.PROD_CD             ,   thp.PROD_NM
		        ,       tshsc.FIRST_VENDR_IN_DATE ,   tshsc.LAST_VENDR_IN_DATE
		        ,       tshsc.FIRST_HQ_OUT_DATE   ,   tshsc.LAST_HQ_OUT_DATE
		        ,       tshsc.FIRST_SALE_DATE     ,   tshsc.LAST_SALE_DATE
		        ,       thp.COST_UPRC
		        ,       thv.VENDR_NM
		        ,       thpb.BARCD_CD
		        ,       thp.PO_UNIT_QTY
		        ,       ROUND(tshsc.CURR_QTY * thp.COST_UPRC / thp.PO_UNIT_QTY) AS CURR_AMT
		        ,       thp.STOCK_UNIT_FG AS PO_UNIT_FG
		        <if test='unitFg == "0"'>
		        ,       thp.SAFE_STOCK_QTY AS SAFE_STOCK_QTY
		        ,       SF_ZERO_TO_NULL((tshsc.CURR_QTY                                / thp.PO_UNIT_QTY)) AS CURR_QTY
		        ,       SF_ZERO_TO_NULL((tshsc.ACC_VENDR_IN_QTY                        / thp.PO_UNIT_QTY)) AS ACC_VENDR_IN_QTY
		        ,       SF_ZERO_TO_NULL((tshsc.ACC_VENDR_OUT_QTY                       / thp.PO_UNIT_QTY)) AS ACC_VENDR_OUT_QTY
		        ,       SF_ZERO_TO_NULL((tshsc.ACC_HQ_OUT_QTY                          / thp.PO_UNIT_QTY)) AS ACC_HQ_OUT_QTY
		        ,       SF_ZERO_TO_NULL((tshsc.ACC_HQ_IN_QTY                           / thp.PO_UNIT_QTY)) AS ACC_HQ_IN_QTY
		        ,       SF_ZERO_TO_NULL((tshsc.ACC_STORE_MOVE_IN_QTY                   / thp.PO_UNIT_QTY)) AS ACC_STORE_MOVE_IN_QTY
		        ,       SF_ZERO_TO_NULL((tshsc.ACC_STORE_MOVE_OUT_QTY                  / thp.PO_UNIT_QTY)) AS ACC_STORE_MOVE_OUT_QTY
		        ,       SF_ZERO_TO_NULL((tshsc.ACC_DISUSE_QTY                          / thp.PO_UNIT_QTY)) AS ACC_DISUSE_QTY
		        ,       SF_ZERO_TO_NULL((tshsc.ACC_ADJ_QTY                             / thp.PO_UNIT_QTY)) AS ACC_ADJ_QTY
		        ,       SF_ZERO_TO_NULL(((tshsc.ACC_SET_IN_QTY + tshsc.ACC_SET_OUT_QTY)  / thp.PO_UNIT_QTY)) AS ACC_SET_IN_QTY
		        ,       SF_ZERO_TO_NULL((tshsc.ACC_SALE_VENDR_OUT_QTY                  / thp.PO_UNIT_QTY)) AS ACC_SALE_VENDR_OUT_QTY
		        ,       SF_ZERO_TO_NULL((tshsc.ACC_SALE_VENDR_IN_QTY                   / thp.PO_UNIT_QTY)) AS ACC_SALE_VENDR_IN_QTY
		        </if>
		        <if test='unitFg == "1"'>
		        ,       thp.SAFE_STOCK_QTY AS SAFE_STOCK_QTY
                ,       SF_ZERO_TO_NULL((tshsc.CURR_QTY                               )) AS CURR_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_VENDR_IN_QTY                       )) AS ACC_VENDR_IN_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_VENDR_OUT_QTY                      )) AS ACC_VENDR_OUT_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_HQ_OUT_QTY                         )) AS ACC_HQ_OUT_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_HQ_IN_QTY                          )) AS ACC_HQ_IN_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_STORE_MOVE_IN_QTY                  )) AS ACC_STORE_MOVE_IN_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_STORE_MOVE_OUT_QTY                 )) AS ACC_STORE_MOVE_OUT_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_DISUSE_QTY                         )) AS ACC_DISUSE_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_ADJ_QTY                            )) AS ACC_ADJ_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_SET_IN_QTY + tshsc.ACC_SET_OUT_QTY )) AS ACC_SET_IN_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_SALE_VENDR_OUT_QTY                 )) AS ACC_SALE_VENDR_OUT_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_SALE_VENDR_IN_QTY                  )) AS ACC_SALE_VENDR_IN_QTY
		        </if>
		        ,       thp.PROD_CLASS_CD
		        FROM    tb_st_hq_stock_cur tshsc
		        ,       TB_HQ_PRODUCT thp
		        ,       TB_HQ_PRODUCT_BARCD thpb
		        ,       (   SELECT   thvp.PROD_CD
		                    ,      LISTAGG(thv.VENDR_NM, ',') WITHIN GROUP (ORDER BY thv.VENDR_CD) AS VENDR_NM
		                    FROM   TB_HQ_BRAND thb
		                    ,      TB_HQ_VENDOR thv
		                    ,      TB_HQ_VENDOR_PROD thvp
		                    WHERE   thb.HQ_OFFICE_CD    =   #{hqOfficeCd}
		                    AND     thv.HQ_BRAND_CD     =   thb.HQ_BRAND_CD
		                    AND     thvp.HQ_BRAND_CD    =   thv.HQ_BRAND_CD
		                    AND     thvp.VENDR_CD       =   thv.VENDR_CD
		                    GROUP
		                    BY      thvp.PROD_CD
		                ) thv
		        WHERE   tshsc.HQ_OFFICE_CD    =   #{hqOfficeCd}
		        AND     tshsc.STORAGE_CD      =   '999'
		        AND     thp.HQ_OFFICE_CD      =   tshsc.HQ_OFFICE_CD

		        AND     thp.PROD_CD           =   tshsc.PROD_CD
		        AND     thp.STOCK_PROD_YN     =   'Y'
		        AND     thp.USE_YN            =   'Y'
		        AND     thpb.HQ_OFFICE_CD (+) =   tshsc.HQ_OFFICE_CD
		        AND     thpb.PROD_CD      (+) =   tshsc.PROD_CD
		        AND     thv.PROD_CD       (+) =   tshsc.PROD_CD
		        <if test='safeStockFg == "0"'>
		          AND     tshsc.CURR_QTY <![CDATA[<]]> thp.SAFE_STOCK_QTY
		        </if>
		        ORDER BY tshsc.PROD_CD
		      )   A
		      LEFT
		      OUTER
		      JOIN    (
		            SELECT  B.HQ_OFFICE_CD
		            ,      B.PROD_CD
		            ,      SUM(DECODE(B.STORAGE_CD,'000',B.CURR_QTY,0))   AS   CURR_QTY_000
		            /* 동적 START */
		            ${sQuery2}
		            /* 동적 END */
		            FROM   (
		                  SELECT   B.HQ_OFFICE_CD
		                  ,      B.STORAGE_CD
		                  ,      B.PROD_CD
		                  ,      SUM(B.CURR_QTY)   AS   CURR_QTY
		                  FROM   TB_ST_HQ_STOCK_CUR   B
		                  WHERE   B.HQ_OFFICE_CD   =   #{hqOfficeCd}
		                  AND      B.STORAGE_CD   >=   '000'
		                  AND      B.STORAGE_CD   <![CDATA[<]]>    '999'
		                  GROUP
		                  BY      B.HQ_OFFICE_CD
		                  ,      B.STORAGE_CD
		                  ,      B.PROD_CD
		                  )   B
		            GROUP
		            BY      B.HQ_OFFICE_CD
		            ,      B.PROD_CD
		            )   B
		      ON      A.PROD_CD   =   B.PROD_CD
		      LEFT
		      OUTER
		      JOIN	(
		        <![CDATA[
				SELECT  A.HQ_OFFICE_CD
				,       A.PROD_CLASS_CD
				,		NULL	LV1_CD
				,		NULL	LV2_CD
				,		NULL	LV3_CD
				,       DECODE	(A.LV ,1  ,SUBSTR(A.AC,INSTR(A.AC,'^',1,1)+1,LENGTH(A.AC))
				                    ,    SUBSTR(A.AC,INSTR(A.AC,'^',1,1)+1,INSTR(A.AC,'^',2,1)-2)
				             	)  AS  LV1_NM
				,       DECODE	(A.LV ,1  ,NULL
				                    ,2  ,SUBSTR(A.AC,INSTR(A.AC,'^',2,1)+1,LENGTH(A.AC))
				                    ,3  ,SUBSTR(A.AC,INSTR(A.AC,'^',1,2)+1,(INSTR(A.AC,'^',1,3)-1)-INSTR(A.AC,'^',1,2))
				              	)  AS  LV2_NM
				,       DECODE	(A.LV ,1  ,NULL
				                    ,2  ,NULL
				                    ,3  ,SUBSTR(A.AC,INSTR(A.AC,'^',1,3)+1)
				             	)  AS  LV3_NM
				FROM    (
				        SELECT  LEVEL LV,  HQ_OFFICE_CD,    PROD_CLASS_CD,   SYS_CONNECT_BY_PATH(PROD_CLASS_NM, '^')  AS AC
				        FROM    (
				                    SELECT  HQ_OFFICE_CD,   PROD_CLASS_CD, PROD_CLASS_NM, P_PROD_CLASS_CD
				                    FROM    TB_HQ_PRODUCT_CLASS
				                    WHERE   HQ_OFFICE_CD    =   #{hqOfficeCd}
				                )
				        START WITH  P_PROD_CLASS_CD ='00000'
                        AND         HQ_OFFICE_CD    =   #{hqOfficeCd}
				        CONNECT BY
				        PRIOR       PROD_CLASS_CD   =   P_PROD_CLASS_CD
                        AND         HQ_OFFICE_CD    =   #{hqOfficeCd}
				        )   A
	    		]]>
		      )	C
			ON	A.PROD_CLASS_CD = C.PROD_CLASS_CD
		WHERE 1=1
		<if test='prodCd != null and prodCd != ""'>
            AND A.PROD_CD = #{prodCd}
        </if>
        <if test='prodNm != null and prodNm != ""'>
            AND A.PROD_NM LIKE '%'||#{prodNm}||'%'
        </if>
        <if test='barcdCd != null and barcdCd != ""'>
            AND A.BARCD_CD = #{barcdCd}
        </if>
        <if test='prodClassCd != null and prodClassCd != ""'>
           AND A.PROD_CLASS_CD IN  (
                                       SELECT              PROD_CLASS_CD
                                       FROM                TB_HQ_PRODUCT_CLASS
                                       WHERE               HQ_OFFICE_CD        = B.HQ_OFFICE_CD
                                       START WITH          PROD_CLASS_CD   = #{prodClassCd}
                                       AND                 HQ_OFFICE_CD        = B.HQ_OFFICE_CD
                                       CONNECT BY PRIOR    PROD_CLASS_CD   = P_PROD_CLASS_CD
                                       AND                 HQ_OFFICE_CD        = B.HQ_OFFICE_CD
                                      )
        </if>
        <if test='arrVendrCd != null and arrVendrCd != ""'>
            AND A.PROD_CD IN     ( SELECT  PROD_CD
                                    FROM    TB_HQ_VENDOR_PROD
                                    WHERE   HQ_OFFICE_CD = B.HQ_OFFICE_CD
                                    AND     VENDR_CD IN
                                    <foreach collection="arrVendrCd" item="item" open="(" close=")" separator=",">
                                        #{item}
                                    </foreach>
                                  )
        </if>
        ORDER BY A.PROD_CD
         <include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <select id="getStorageStorageCurrList" parameterType="storageHqCurrVO" resultType="DefaultMap">
        /* USE : HqCurrMapper.getStorageStorageCurrList */
        <include refid="CmmSQL.PagingTemplateHeader"/>
        SELECT A.PROD_CD             ,   A.PROD_NM
        ,   A.FIRST_IN_DATE       ,   A.LAST_IN_DATE
        ,   A.FIRST_SALE_DATE     ,   A.LAST_SALE_DATE
        ,   A.COST_UPRC
        ,   A.VENDR_NM
        ,   A.BARCD_CD
        ,   A.PO_UNIT_QTY
        ,   A.CURR_AMT
        ,   A.PO_UNIT_FG
        ,	(SELECT NMCODE_NM FROM TB_MS_STORE_NMCODE WHERE NMCODE_GRP_CD = '093' AND STORE_CD = #{storeCd} AND NMCODE_CD = A.PO_UNIT_FG)  AS PO_UNIT_FG_NM        /* 매장 가상로그인시 */
        ,   A.SAFE_STOCK_QTY
        ,   A.CURR_QTY
        /*,   A.ACC_VENDR_IN_QTY
        ,   A.ACC_VENDR_OUT_QTY */
        ,   A.ACC_STORE_OUT_QTY
        ,   A.ACC_STORE_IN_QTY
        ,   A.ACC_MOVE_IN_QTY
        ,   A.ACC_MOVE_OUT_QTY
        ,   A.ACC_DISUSE_QTY
        ,   A.ACC_ADJ_QTY
        /*,   A.ACC_SET_IN_QTY
        ,   A.ACC_SALE_VENDR_OUT_QTY
        ,   A.ACC_SALE_VENDR_IN_QTY  */
        ,   A.PROD_CLASS_CD
        ,   C.LV1_CD
        ,   C.LV1_NM
        ,   C.LV2_CD
        ,   C.LV2_NM
        ,   C.LV3_CD
        ,   C.LV3_NM
        ,   B.STORE_CD
        <if test='unitFg == "0"'>
        ,	SF_ZERO_TO_NULL((B.CURR_QTY_000 / A.PO_UNIT_QTY))	AS CURR_QTY_000
        </if>
        <if test='unitFg == "1"'>
        ,   SF_ZERO_TO_NULL(B.CURR_QTY_000)	AS CURR_QTY_000      --매대
        </if>
        /*   동적 START */
        ${sQuery1}
        /*   동적 END */
        <include refid="CmmSQL.PagingTemplateCount"/>
        FROM   (
                SELECT  tsssc.PROD_CD             ,   tmp.PROD_NM
                ,       tsssc.FIRST_IN_DATE ,   tsssc.LAST_IN_DATE
                /*,       tsssc.FIRST_HQ_OUT_DATE   ,   tsssc.LAST_HQ_OUT_DATE */
                ,       tsssc.FIRST_SALE_DATE     ,   tsssc.LAST_SALE_DATE
                ,       tmp.COST_UPRC
                ,       tmv.VENDR_NM
                ,       tmpb.BARCD_CD
                ,       tmp.PO_UNIT_QTY
                ,       ROUND(tsssc.CURR_QTY * tmp.COST_UPRC / tmp.PO_UNIT_QTY) AS CURR_AMT
                ,       tmp.STOCK_UNIT_FG AS PO_UNIT_FG
                <if test='unitFg == "0"'>
                ,       tmp.SAFE_STOCK_QTY AS SAFE_STOCK_QTY
                ,       SF_ZERO_TO_NULL((tsssc.CURR_QTY                                / tmp.PO_UNIT_QTY)) AS CURR_QTY
                /*,       SF_ZERO_TO_NULL((tsssc.ACC_VENDR_IN_QTY                        / tmp.PO_UNIT_QTY)) AS ACC_VENDR_IN_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_VENDR_OUT_QTY                       / tmp.PO_UNIT_QTY)) AS ACC_VENDR_OUT_QTY */
                ,       SF_ZERO_TO_NULL((tsssc.ACC_STORE_OUT_QTY                          / tmp.PO_UNIT_QTY)) AS ACC_STORE_OUT_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_STORE_IN_QTY                           / tmp.PO_UNIT_QTY)) AS ACC_STORE_IN_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_MOVE_IN_QTY                   / tmp.PO_UNIT_QTY)) AS ACC_MOVE_IN_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_MOVE_OUT_QTY                  / tmp.PO_UNIT_QTY)) AS ACC_MOVE_OUT_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_DISUSE_QTY                          / tmp.PO_UNIT_QTY)) AS ACC_DISUSE_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_ADJ_QTY                             / tmp.PO_UNIT_QTY)) AS ACC_ADJ_QTY
                /*,       SF_ZERO_TO_NULL((tsssc.ACC_SET_IN_QTY + tshsc.ACC_SET_OUT_QTY)  / tmp.PO_UNIT_QTY)) AS ACC_SET_IN_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_SALE_VENDR_OUT_QTY                  / tmp.PO_UNIT_QTY)) AS ACC_SALE_VENDR_OUT_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_SALE_VENDR_IN_QTY                   / tmp.PO_UNIT_QTY)) AS ACC_SALE_VENDR_IN_QTY */
                </if>
                <if test='unitFg == "1"'>
                ,       tmp.SAFE_STOCK_QTY AS SAFE_STOCK_QTY
                ,       SF_ZERO_TO_NULL((tsssc.CURR_QTY                               )) AS CURR_QTY
                /*,       SF_ZERO_TO_NULL((tsssc.ACC_VENDR_IN_QTY                       )) AS ACC_VENDR_IN_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_VENDR_OUT_QTY                      )) AS ACC_VENDR_OUT_QTY */
                ,       SF_ZERO_TO_NULL((tsssc.ACC_STORE_OUT_QTY                         )) AS ACC_STORE_OUT_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_STORE_IN_QTY                          )) AS ACC_STORE_IN_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_MOVE_IN_QTY                  )) AS ACC_MOVE_IN_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_MOVE_OUT_QTY                 )) AS ACC_MOVE_OUT_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_DISUSE_QTY                         )) AS ACC_DISUSE_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_ADJ_QTY                            )) AS ACC_ADJ_QTY
                /*,       SF_ZERO_TO_NULL((tsssc.ACC_SET_IN_QTY + tshsc.ACC_SET_OUT_QTY )) AS ACC_SET_IN_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_SALE_VENDR_OUT_QTY                 )) AS ACC_SALE_VENDR_OUT_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_SALE_VENDR_IN_QTY                  )) AS ACC_SALE_VENDR_IN_QTY */
                </if>
                ,       tmp.PROD_CLASS_CD
                FROM    tb_st_store_stock_cur tsssc

                ,       TB_MS_PRODUCT tmp
                ,       TB_MS_PRODUCT_BARCD tmpb
                ,       (   SELECT   tmvp.PROD_CD
                            ,      LISTAGG(tmv.VENDR_NM, ',') WITHIN GROUP (ORDER BY tmv.VENDR_CD) AS VENDR_NM
                            FROM   TB_MS_BRAND tmb
                            ,      TB_MS_VENDOR tmv
                            ,      TB_MS_VENDOR_PROD tmvp
                            WHERE   tmb.STORE_CD    =   #{storeCd}
                            --AND     tmv.MS_BRAND_CD     =   tmb.MS_BRAND_CD /* TB_MS_VENDOR 에 MS_BRAND_CD 없음 */
                            --AND     tmvp.MS_BRAND_CD    =   tmv.MS_BRAND_CD /* TB_MS_VENDOR_PROD 에 MS_BRAND_CD 없음 */
                            AND     tmvp.VENDR_CD       =   tmv.VENDR_CD
                            GROUP
                            BY      tmvp.PROD_CD
                        ) tmv
                WHERE   tsssc.STORE_CD    =   #{storeCd}
                AND     tsssc.STORAGE_CD      =   '999'
                AND     tmp.STORE_CD      =   tsssc.STORE_CD

                AND     tmp.PROD_CD           =   tsssc.PROD_CD
                AND     tmp.STOCK_PROD_YN     =   'Y'
                AND     tmp.USE_YN            =   'Y'
                AND     tmpb.STORE_CD (+) =   tsssc.STORE_CD
                AND     tmpb.PROD_CD      (+) =   tsssc.PROD_CD
                AND     tmv.PROD_CD       (+) =   tsssc.PROD_CD
                <if test='safeStockFg == "0"'>
                  AND     tsssc.CURR_QTY <![CDATA[<]]> tmp.SAFE_STOCK_QTY
                </if>
                ORDER BY tsssc.PROD_CD
              )   A
              LEFT
              OUTER
              JOIN    (
                    SELECT  B.STORE_CD
                    ,      B.PROD_CD
                    ,      SUM(DECODE(B.STORAGE_CD,'000',B.CURR_QTY,0))   AS   CURR_QTY_000
                    /* 동적 START */
                    ${sQuery2}
                    /* 동적 END */
                    FROM   (
                          SELECT   B.STORE_CD
                          ,      B.STORAGE_CD
                          ,      B.PROD_CD
                          ,      SUM(B.CURR_QTY)   AS   CURR_QTY
                          FROM   TB_ST_STORE_STOCK_CUR   B
                          WHERE   B.STORE_CD   =   #{storeCd}
                          AND      B.STORAGE_CD   >=   '000'
                          AND      B.STORAGE_CD   <![CDATA[<]]>    '999'
                          GROUP
                          BY      B.STORE_CD
                          ,      B.STORAGE_CD
                          ,      B.PROD_CD
                          )   B
                    GROUP
                    BY      B.STORE_CD
                    ,      B.PROD_CD
                    )   B
              ON      A.PROD_CD   =   B.PROD_CD
              LEFT
              OUTER
              JOIN	(
              			<![CDATA[
        				SELECT  A.STORE_CD
						,       A.PROD_CLASS_CD
						,		NULL	LV1_CD
						,		NULL	LV2_CD
						,		NULL	LV3_CD
						,       DECODE(A.LV ,1  ,SUBSTR(A.AC,INSTR(A.AC,'^',1,1)+1,LENGTH(A.AC))
						                    ,    SUBSTR(A.AC,INSTR(A.AC,'^',1,1)+1,INSTR(A.AC,'^',2,1)-2))  AS  LV1_NM
						,       DECODE(A.LV ,1  ,NULL
						                    ,2  ,SUBSTR(A.AC,INSTR(A.AC,'^',2,1)+1,LENGTH(A.AC))
						                    ,3  ,SUBSTR(A.AC,INSTR(A.AC,'^',1,2)+1,(INSTR(A.AC,'^',1,3)-1)-INSTR(A.AC,'^',1,2))
						              )  AS  LV2_NM
						,       DECODE(A.LV ,1  ,NULL
						                    ,2  ,NULL
						                    ,3  ,SUBSTR(A.AC,INSTR(A.AC,'^',1,3)+1))  AS  LV3_NM
						FROM    (
						        SELECT  LEVEL LV,  STORE_CD,    PROD_CLASS_CD,   SYS_CONNECT_BY_PATH(PROD_CLASS_NM, '^')  AS AC
						        FROM    (
						                    SELECT  STORE_CD,   PROD_CLASS_CD, PROD_CLASS_NM, P_PROD_CLASS_CD
						                    FROM    TB_MS_PRODUCT_CLASS
						                    WHERE   STORE_CD    =  #{storeCd}
						                )
						        START WITH  P_PROD_CLASS_CD ='00000'
                                AND         STORE_CD    =  #{storeCd}
						        CONNECT BY
						        PRIOR       PROD_CLASS_CD   =   P_PROD_CLASS_CD
                                AND         STORE_CD    =  #{storeCd}
						        )   A
        			]]>
              )	C
			ON A.PROD_CLASS_CD = C.PROD_CLASS_CD
        WHERE 1=1
        <if test='prodCd != null and prodCd != ""'>
            AND A.PROD_CD = #{prodCd}
        </if>
        <if test='prodNm != null and prodNm != ""'>
            AND A.PROD_NM LIKE '%'||#{prodNm}||'%'
        </if>
        <if test='barcdCd != null and barcdCd != ""'>
            AND A.BARCD_CD = #{barcdCd}
        </if>
        <if test='prodClassCd != null and prodClassCd != ""'>
           AND A.PROD_CLASS_CD IN  (
                                       SELECT              PROD_CLASS_CD
                                       FROM                TB_MS_PRODUCT_CLASS
                                       WHERE               STORE_CD        = B.STORE_CD
                                       START WITH          PROD_CLASS_CD   = #{prodClassCd}
                                       AND                 STORE_CD        = B.STORE_CD
                                       CONNECT BY PRIOR    PROD_CLASS_CD   = P_PROD_CLASS_CD
                                       AND                 STORE_CD        = B.STORE_CD
                                      )
        </if>
        <if test='arrVendrCd != null and arrVendrCd != ""'>
            AND A.PROD_CD IN     ( SELECT  PROD_CD
                                    FROM    TB_MS_VENDOR_PROD
                                    WHERE   STORE_CD = B.STORE_CD
                                    AND     VENDR_CD IN
                                    <foreach collection="arrVendrCd" item="item" open="(" close=")" separator=",">
                                        #{item}
                                    </foreach>
                                  )
        </if>
        ORDER BY A.PROD_CD
        <include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <select id="getStorageHqList" parameterType="storageHqCurrVO" resultType="DefaultMap">
        /* USE : StorageHqCurrMapper.getStorageHqList - 본사 창고정보 조회 */
        SELECT   B.HQ_OFFICE_CD
		  ,      B.STORAGE_CD
		  ,      THS.STORAGE_NM
		FROM   TB_ST_HQ_STOCK_CUR B
		  ,    TB_HQ_STORAGE THS
		WHERE   B.HQ_OFFICE_CD   =   #{hqOfficeCd}
		AND      B.STORAGE_CD   >=   '000'
		AND      B.STORAGE_CD   <![CDATA[<]]>   '999'
		AND      B.STORAGE_CD = THS.STORAGE_CD
		AND      B.HQ_OFFICE_CD = THS.HQ_OFFICE_CD
		GROUP
		BY      B.HQ_OFFICE_CD
		 ,      B.STORAGE_CD
		 ,      THS.STORAGE_NM
    </select>

    <select id="getStorageStorageList" parameterType="storageHqCurrVO" resultType="DefaultMap">
        /* USE : StorageHqCurrMapper.getStorageStorageList - 매장 창고정보 조회 */
        SELECT   B.STORE_CD
          ,      B.STORAGE_CD
          ,      TMS.STORAGE_NM
        FROM   TB_ST_STORE_STOCK_CUR B
          ,    TB_MS_STORAGE TMS
        WHERE   B.STORE_CD   =   #{storeCd}

        AND      B.STORAGE_CD   >=   '000'
        AND      B.STORAGE_CD   <![CDATA[<]]>   '999'
        AND      B.STORAGE_CD = TMS.STORAGE_CD
        AND      B.STORE_CD = TMS.STORE_CD
        GROUP
        BY      B.STORE_CD
         ,      B.STORAGE_CD
         ,      TMS.STORAGE_NM
    </select>

    <select id="getStorageHqCurrExcelList" parameterType="storageHqCurrVO" resultType="DefaultMap">
        /* USE : HqCurrMapper.getStorageHqCurrExcelList */
        SELECT A.PROD_CD             ,   A.PROD_NM
        ,   A.FIRST_VENDR_IN_DATE ,   A.LAST_VENDR_IN_DATE
        ,   A.FIRST_HQ_OUT_DATE   ,   A.LAST_HQ_OUT_DATE
        ,   A.FIRST_SALE_DATE     ,   A.LAST_SALE_DATE
        ,   A.COST_UPRC
        ,   A.VENDR_NM
        ,   A.BARCD_CD
        ,   A.PO_UNIT_QTY
        ,   A.CURR_AMT
        ,   A.PO_UNIT_FG
        ,	(SELECT NMCODE_NM FROM TB_HQ_NMCODE WHERE NMCODE_GRP_CD = '093' AND HQ_OFFICE_CD = #{hqOfficeCd} AND NMCODE_CD = A.PO_UNIT_FG)  AS PO_UNIT_FG_NM      /* 본사 가상로그인시 */
        ,   A.SAFE_STOCK_QTY
        ,   A.CURR_QTY
        ,   A.ACC_VENDR_IN_QTY
        ,   A.ACC_VENDR_OUT_QTY
        ,   A.ACC_HQ_OUT_QTY
        ,   A.ACC_HQ_IN_QTY
        ,   A.ACC_STORE_MOVE_IN_QTY
        ,   A.ACC_STORE_MOVE_OUT_QTY
        ,   A.ACC_DISUSE_QTY
        ,   A.ACC_ADJ_QTY
        ,   A.ACC_SET_IN_QTY
        ,   A.ACC_SALE_VENDR_OUT_QTY
        ,   A.ACC_SALE_VENDR_IN_QTY
        ,   A.PROD_CLASS_CD
        ,   C.LV1_CD
        ,   C.LV1_NM
        ,   C.LV2_CD
        ,   C.LV2_NM
        ,   C.LV3_CD
        ,   C.LV3_NM
        ,   B.HQ_OFFICE_CD
        ,   B.CURR_QTY_000      --매대
        /*   동적 START */
        ${sQuery1}
        /*   동적 END */
        FROM   (
                SELECT  tshsc.PROD_CD             ,   thp.PROD_NM
                ,       tshsc.FIRST_VENDR_IN_DATE ,   tshsc.LAST_VENDR_IN_DATE
                ,       tshsc.FIRST_HQ_OUT_DATE   ,   tshsc.LAST_HQ_OUT_DATE
                ,       tshsc.FIRST_SALE_DATE     ,   tshsc.LAST_SALE_DATE
                ,       thp.COST_UPRC
                ,       thv.VENDR_NM
                ,       thpb.BARCD_CD
                ,       thp.PO_UNIT_QTY
                ,       ROUND(tshsc.CURR_QTY * thp.COST_UPRC / thp.PO_UNIT_QTY) AS CURR_AMT
                ,       thp.STOCK_UNIT_FG AS PO_UNIT_FG
                <if test='unitFg == "0"'>
                ,       thp.SAFE_STOCK_QTY AS SAFE_STOCK_QTY
                ,       SF_ZERO_TO_NULL((tshsc.CURR_QTY                                / thp.PO_UNIT_QTY)) AS CURR_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_VENDR_IN_QTY                        / thp.PO_UNIT_QTY)) AS ACC_VENDR_IN_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_VENDR_OUT_QTY                       / thp.PO_UNIT_QTY)) AS ACC_VENDR_OUT_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_HQ_OUT_QTY                          / thp.PO_UNIT_QTY)) AS ACC_HQ_OUT_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_HQ_IN_QTY                           / thp.PO_UNIT_QTY)) AS ACC_HQ_IN_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_STORE_MOVE_IN_QTY                   / thp.PO_UNIT_QTY)) AS ACC_STORE_MOVE_IN_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_STORE_MOVE_OUT_QTY                  / thp.PO_UNIT_QTY)) AS ACC_STORE_MOVE_OUT_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_DISUSE_QTY                          / thp.PO_UNIT_QTY)) AS ACC_DISUSE_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_ADJ_QTY                             / thp.PO_UNIT_QTY)) AS ACC_ADJ_QTY
                ,       SF_ZERO_TO_NULL(((tshsc.ACC_SET_IN_QTY + tshsc.ACC_SET_OUT_QTY)  / thp.PO_UNIT_QTY)) AS ACC_SET_IN_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_SALE_VENDR_OUT_QTY                  / thp.PO_UNIT_QTY)) AS ACC_SALE_VENDR_OUT_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_SALE_VENDR_IN_QTY                   / thp.PO_UNIT_QTY)) AS ACC_SALE_VENDR_IN_QTY
                </if>
                <if test='unitFg == "1"'>
                ,       thp.SAFE_STOCK_QTY AS SAFE_STOCK_QTY
                ,       SF_ZERO_TO_NULL((tshsc.CURR_QTY                               )) AS CURR_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_VENDR_IN_QTY                       )) AS ACC_VENDR_IN_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_VENDR_OUT_QTY                      )) AS ACC_VENDR_OUT_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_HQ_OUT_QTY                         )) AS ACC_HQ_OUT_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_HQ_IN_QTY                          )) AS ACC_HQ_IN_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_STORE_MOVE_IN_QTY                  )) AS ACC_STORE_MOVE_IN_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_STORE_MOVE_OUT_QTY                 )) AS ACC_STORE_MOVE_OUT_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_DISUSE_QTY                         )) AS ACC_DISUSE_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_ADJ_QTY                            )) AS ACC_ADJ_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_SET_IN_QTY + tshsc.ACC_SET_OUT_QTY )) AS ACC_SET_IN_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_SALE_VENDR_OUT_QTY                 )) AS ACC_SALE_VENDR_OUT_QTY
                ,       SF_ZERO_TO_NULL((tshsc.ACC_SALE_VENDR_IN_QTY                  )) AS ACC_SALE_VENDR_IN_QTY
                </if>
                ,       thp.PROD_CLASS_CD
                FROM    tb_st_hq_stock_cur tshsc

                ,       TB_HQ_PRODUCT thp
                ,       TB_HQ_PRODUCT_BARCD thpb
                ,       (   SELECT   thvp.PROD_CD
                            ,      LISTAGG(thv.VENDR_NM, ',') WITHIN GROUP (ORDER BY thv.VENDR_CD) AS VENDR_NM
                            FROM   TB_HQ_BRAND thb
                            ,      TB_HQ_VENDOR thv
                            ,      TB_HQ_VENDOR_PROD thvp
                            WHERE   thb.HQ_OFFICE_CD    =   #{hqOfficeCd}
                            AND     thv.HQ_BRAND_CD     =   thb.HQ_BRAND_CD
                            AND     thvp.HQ_BRAND_CD    =   thv.HQ_BRAND_CD
                            AND     thvp.VENDR_CD       =   thv.VENDR_CD
                            GROUP
                            BY      thvp.PROD_CD
                        ) thv
                WHERE   tshsc.HQ_OFFICE_CD    =   #{hqOfficeCd}
                AND     tshsc.STORAGE_CD      =   '999'
                AND     thp.HQ_OFFICE_CD      =   tshsc.HQ_OFFICE_CD

                AND     thp.PROD_CD           =   tshsc.PROD_CD
                AND     thp.STOCK_PROD_YN     =   'Y'
                AND     thp.USE_YN            =   'Y'
                AND     thpb.HQ_OFFICE_CD (+) =   tshsc.HQ_OFFICE_CD
                AND     thpb.PROD_CD      (+) =   tshsc.PROD_CD
                AND     thv.PROD_CD       (+) =   tshsc.PROD_CD
                <if test='safeStockFg == "0"'>
                  AND     tshsc.CURR_QTY <![CDATA[<]]> thp.SAFE_STOCK_QTY
                </if>
                ORDER BY tshsc.PROD_CD
              )   A
              LEFT
              OUTER
              JOIN    (
                    SELECT  B.HQ_OFFICE_CD
                    ,      B.PROD_CD
                    ,      SUM(DECODE(B.STORAGE_CD,'000',B.CURR_QTY,0))   AS   CURR_QTY_000
                    /* 동적 START */
                    ${sQuery2}
                    /* 동적 END */
                    FROM   (
                          SELECT   B.HQ_OFFICE_CD
                          ,      B.STORAGE_CD
                          ,      B.PROD_CD
                          ,      SUM(B.CURR_QTY)   AS   CURR_QTY
                          FROM   TB_ST_HQ_STOCK_CUR   B
                          WHERE   B.HQ_OFFICE_CD   =   #{hqOfficeCd}
                          AND      B.STORAGE_CD   >=   '000'
                          AND      B.STORAGE_CD   <![CDATA[<]]>    '999'
                          GROUP
                          BY      B.HQ_OFFICE_CD
                          ,      B.STORAGE_CD
                          ,      B.PROD_CD
                          )   B
                    GROUP
                    BY      B.HQ_OFFICE_CD
                    ,      B.PROD_CD
                    )   B
              ON      A.PROD_CD   =   B.PROD_CD
              LEFT
		      OUTER
		      JOIN	(
		        <![CDATA[
				SELECT  A.HQ_OFFICE_CD
				,       A.PROD_CLASS_CD
				,		NULL	LV1_CD
				,		NULL	LV2_CD
				,		NULL	LV3_CD
				,       DECODE	(A.LV ,1  ,SUBSTR(A.AC,INSTR(A.AC,'^',1,1)+1,LENGTH(A.AC))
				                    ,    SUBSTR(A.AC,INSTR(A.AC,'^',1,1)+1,INSTR(A.AC,'^',2,1)-2)
				             	)  AS  LV1_NM
				,       DECODE	(A.LV ,1  ,NULL
				                    ,2  ,SUBSTR(A.AC,INSTR(A.AC,'^',2,1)+1,LENGTH(A.AC))
				                    ,3  ,SUBSTR(A.AC,INSTR(A.AC,'^',1,2)+1,(INSTR(A.AC,'^',1,3)-1)-INSTR(A.AC,'^',1,2))
				              	)  AS  LV2_NM
				,       DECODE	(A.LV ,1  ,NULL
				                    ,2  ,NULL
				                    ,3  ,SUBSTR(A.AC,INSTR(A.AC,'^',1,3)+1)
				             	)  AS  LV3_NM
				FROM    (
				        SELECT  LEVEL LV,  HQ_OFFICE_CD,    PROD_CLASS_CD,   SYS_CONNECT_BY_PATH(PROD_CLASS_NM, '^')  AS AC
				        FROM    (
				                    SELECT  HQ_OFFICE_CD,   PROD_CLASS_CD, PROD_CLASS_NM, P_PROD_CLASS_CD
				                    FROM    TB_HQ_PRODUCT_CLASS
				                    WHERE   HQ_OFFICE_CD    =   #{hqOfficeCd}
				                )
				        START WITH  P_PROD_CLASS_CD ='00000'
                        AND         HQ_OFFICE_CD    =   #{hqOfficeCd}
				        CONNECT BY
				        PRIOR       PROD_CLASS_CD   =   P_PROD_CLASS_CD
                        AND         HQ_OFFICE_CD    =   #{hqOfficeCd}
				        )   A
	    		]]>
		      )	C
			ON	A.PROD_CLASS_CD = C.PROD_CLASS_CD
        WHERE 1=1
        <if test='prodCd != null and prodCd != ""'>
            AND A.PROD_CD = #{prodCd}
        </if>
        <if test='prodNm != null and prodNm != ""'>
            AND A.PROD_NM LIKE '%'||#{prodNm}||'%'
        </if>
        <if test='barcdCd != null and barcdCd != ""'>
            AND A.BARCD_CD = #{barcdCd}
        </if>
        <if test='prodClassCd != null and prodClassCd != ""'>
           AND A.PROD_CLASS_CD IN  (
                                       SELECT              PROD_CLASS_CD
                                       FROM                TB_HQ_PRODUCT_CLASS
                                       WHERE               HQ_OFFICE_CD        = B.HQ_OFFICE_CD
                                       START WITH          PROD_CLASS_CD   = #{prodClassCd}
                                       AND                 HQ_OFFICE_CD        = B.HQ_OFFICE_CD
                                       CONNECT BY PRIOR    PROD_CLASS_CD   = P_PROD_CLASS_CD
                                       AND                 HQ_OFFICE_CD        = B.HQ_OFFICE_CD
                                      )
        </if>
        <if test='arrVendrCd != null and arrVendrCd != ""'>
            AND A.PROD_CD IN     ( SELECT  PROD_CD
                                    FROM    TB_HQ_VENDOR_PROD
                                    WHERE   HQ_OFFICE_CD = B.HQ_OFFICE_CD
                                    AND     VENDR_CD IN
                                    <foreach collection="arrVendrCd" item="item" open="(" close=")" separator=",">
                                        #{item}
                                    </foreach>
                                  )
        </if>
        ORDER BY A.PROD_CD
    </select>

    <select id="getStorageStorageCurrExcelList" parameterType="storageHqCurrVO" resultType="DefaultMap">
        /* USE : HqCurrMapper.getStorageStorageCurrExcelList */
        SELECT A.PROD_CD             ,   A.PROD_NM
        ,   A.FIRST_IN_DATE       ,   A.LAST_IN_DATE
        ,   A.FIRST_SALE_DATE     ,   A.LAST_SALE_DATE
        ,   A.COST_UPRC
        ,   A.VENDR_NM
        ,   A.BARCD_CD
        ,   A.PO_UNIT_QTY
        ,   A.CURR_AMT
        ,   A.PO_UNIT_FG
        ,	(SELECT NMCODE_NM FROM TB_MS_STORE_NMCODE WHERE NMCODE_GRP_CD = '093' AND STORE_CD = #{storeCd} AND NMCODE_CD = A.PO_UNIT_FG)  AS PO_UNIT_FG_NM        /* 매장 가상로그인시 */
        ,   A.SAFE_STOCK_QTY
        ,   A.CURR_QTY
        /*,   A.ACC_VENDR_IN_QTY
        ,   A.ACC_VENDR_OUT_QTY */
        ,   A.ACC_STORE_OUT_QTY
        ,   A.ACC_STORE_IN_QTY
        ,   A.ACC_MOVE_IN_QTY
        ,   A.ACC_MOVE_OUT_QTY
        ,   A.ACC_DISUSE_QTY
        ,   A.ACC_ADJ_QTY
        /*,   A.ACC_SET_IN_QTY
        ,   A.ACC_SALE_VENDR_OUT_QTY
        ,   A.ACC_SALE_VENDR_IN_QTY  */
        ,   A.PROD_CLASS_CD
        ,   C.LV1_CD
        ,   C.LV1_NM
        ,   C.LV2_CD
        ,   C.LV2_NM
        ,   C.LV3_CD
        ,   C.LV3_NM
        ,   B.STORE_CD
		<if test='unitFg == "0"'>
        ,	SF_ZERO_TO_NULL((B.CURR_QTY_000 / A.PO_UNIT_QTY))	AS CURR_QTY_000
        </if>
        <if test='unitFg == "1"'>
        ,   SF_ZERO_TO_NULL(B.CURR_QTY_000)	AS CURR_QTY_000      --매대
        </if>
        /*   동적 START */
        ${sQuery1}
        /*   동적 END */
        FROM   (
                SELECT  tsssc.PROD_CD             ,   tmp.PROD_NM
                ,       tsssc.FIRST_IN_DATE ,   tsssc.LAST_IN_DATE
                /*,       tsssc.FIRST_HQ_OUT_DATE   ,   tsssc.LAST_HQ_OUT_DATE */
                ,       tsssc.FIRST_SALE_DATE     ,   tsssc.LAST_SALE_DATE
                ,       tmp.COST_UPRC
                ,       tmv.VENDR_NM
                ,       tmpb.BARCD_CD
                ,       tmp.PO_UNIT_QTY
                ,       ROUND(tsssc.CURR_QTY * tmp.COST_UPRC / tmp.PO_UNIT_QTY) AS CURR_AMT
                ,       tmp.STOCK_UNIT_FG AS PO_UNIT_FG
                <if test='unitFg == "0"'>
                ,       tmp.SAFE_STOCK_QTY AS SAFE_STOCK_QTY
                ,       SF_ZERO_TO_NULL((tsssc.CURR_QTY                                / tmp.PO_UNIT_QTY)) AS CURR_QTY
                /*,       SF_ZERO_TO_NULL((tsssc.ACC_VENDR_IN_QTY                        / tmp.PO_UNIT_QTY)) AS ACC_VENDR_IN_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_VENDR_OUT_QTY                       / tmp.PO_UNIT_QTY)) AS ACC_VENDR_OUT_QTY */
                ,       SF_ZERO_TO_NULL((tsssc.ACC_STORE_OUT_QTY                          / tmp.PO_UNIT_QTY)) AS ACC_STORE_OUT_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_STORE_IN_QTY                           / tmp.PO_UNIT_QTY)) AS ACC_STORE_IN_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_MOVE_IN_QTY                   / tmp.PO_UNIT_QTY)) AS ACC_MOVE_IN_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_MOVE_OUT_QTY                  / tmp.PO_UNIT_QTY)) AS ACC_MOVE_OUT_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_DISUSE_QTY                          / tmp.PO_UNIT_QTY)) AS ACC_DISUSE_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_ADJ_QTY                             / tmp.PO_UNIT_QTY)) AS ACC_ADJ_QTY
                /*,       SF_ZERO_TO_NULL((tsssc.ACC_SET_IN_QTY + tshsc.ACC_SET_OUT_QTY)  / tmp.PO_UNIT_QTY)) AS ACC_SET_IN_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_SALE_VENDR_OUT_QTY                  / tmp.PO_UNIT_QTY)) AS ACC_SALE_VENDR_OUT_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_SALE_VENDR_IN_QTY                   / tmp.PO_UNIT_QTY)) AS ACC_SALE_VENDR_IN_QTY */
                </if>
                <if test='unitFg == "1"'>
                ,       tmp.SAFE_STOCK_QTY AS SAFE_STOCK_QTY
                ,       SF_ZERO_TO_NULL((tsssc.CURR_QTY                               )) AS CURR_QTY
                /*,       SF_ZERO_TO_NULL((tsssc.ACC_VENDR_IN_QTY                       )) AS ACC_VENDR_IN_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_VENDR_OUT_QTY                      )) AS ACC_VENDR_OUT_QTY */
                ,       SF_ZERO_TO_NULL((tsssc.ACC_STORE_OUT_QTY                         )) AS ACC_STORE_OUT_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_STORE_IN_QTY                          )) AS ACC_STORE_IN_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_MOVE_IN_QTY                  )) AS ACC_MOVE_IN_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_MOVE_OUT_QTY                 )) AS ACC_MOVE_OUT_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_DISUSE_QTY                         )) AS ACC_DISUSE_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_ADJ_QTY                            )) AS ACC_ADJ_QTY
                /*,       SF_ZERO_TO_NULL((tsssc.ACC_SET_IN_QTY + tshsc.ACC_SET_OUT_QTY )) AS ACC_SET_IN_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_SALE_VENDR_OUT_QTY                 )) AS ACC_SALE_VENDR_OUT_QTY
                ,       SF_ZERO_TO_NULL((tsssc.ACC_SALE_VENDR_IN_QTY                  )) AS ACC_SALE_VENDR_IN_QTY */
                </if>
                ,       tmp.PROD_CLASS_CD
                FROM    tb_st_store_stock_cur tsssc

                ,       TB_MS_PRODUCT tmp
                ,       TB_MS_PRODUCT_BARCD tmpb
                ,       (   SELECT   tmvp.PROD_CD
                            ,      LISTAGG(tmv.VENDR_NM, ',') WITHIN GROUP (ORDER BY tmv.VENDR_CD) AS VENDR_NM
                            FROM   TB_MS_BRAND tmb
                            ,      TB_MS_VENDOR tmv
                            ,      TB_MS_VENDOR_PROD tmvp
                            WHERE   tmb.STORE_CD    =   #{storeCd}
                            --AND     tmv.MS_BRAND_CD     =   tmb.MS_BRAND_CD /* TB_MS_VENDOR 에 MS_BRAND_CD 없음 */
                            --AND     tmvp.MS_BRAND_CD    =   tmv.MS_BRAND_CD /* TB_MS_VENDOR_PROD 에 MS_BRAND_CD 없음 */
                            AND     tmvp.VENDR_CD       =   tmv.VENDR_CD
                            GROUP
                            BY      tmvp.PROD_CD
                        ) tmv
                WHERE   tsssc.STORE_CD    =   #{storeCd}
                AND     tsssc.STORAGE_CD      =   '999'
                AND     tmp.STORE_CD      =   tsssc.STORE_CD

                AND     tmp.PROD_CD           =   tsssc.PROD_CD
                AND     tmp.STOCK_PROD_YN     =   'Y'
                AND     tmp.USE_YN            =   'Y'
                AND     tmpb.STORE_CD (+) =   tsssc.STORE_CD
                AND     tmpb.PROD_CD      (+) =   tsssc.PROD_CD
                AND     tmv.PROD_CD       (+) =   tsssc.PROD_CD
                <if test='safeStockFg == "0"'>
                  AND     tsssc.CURR_QTY <![CDATA[<]]> tmp.SAFE_STOCK_QTY
                </if>
                ORDER BY tsssc.PROD_CD
              )   A
              LEFT
              OUTER
              JOIN    (
                    SELECT  B.STORE_CD
                    ,      B.PROD_CD
                    ,      SUM(DECODE(B.STORAGE_CD,'000',B.CURR_QTY,0))   AS   CURR_QTY_000
                    /* 동적 START */
                    ${sQuery2}
                    /* 동적 END */
                    FROM   (
                          SELECT   B.STORE_CD
                          ,      B.STORAGE_CD
                          ,      B.PROD_CD
                          ,      SUM(B.CURR_QTY)   AS   CURR_QTY
                          FROM   TB_ST_STORE_STOCK_CUR   B
                          WHERE   B.STORE_CD   =   #{storeCd}
                          AND      B.STORAGE_CD   >=   '000'
                          AND      B.STORAGE_CD   <![CDATA[<]]>    '999'
                          GROUP
                          BY      B.STORE_CD
                          ,      B.STORAGE_CD
                          ,      B.PROD_CD
                          )   B
                    GROUP
                    BY      B.STORE_CD
                    ,      B.PROD_CD
                    )   B
              ON      A.PROD_CD   =   B.PROD_CD
              LEFT
              OUTER
              JOIN	(
              			<![CDATA[
        				SELECT  A.STORE_CD
						,       A.PROD_CLASS_CD
						,		NULL	LV1_CD
						,		NULL	LV2_CD
						,		NULL	LV3_CD
						,       DECODE(A.LV ,1  ,SUBSTR(A.AC,INSTR(A.AC,'^',1,1)+1,LENGTH(A.AC))
						                    ,    SUBSTR(A.AC,INSTR(A.AC,'^',1,1)+1,INSTR(A.AC,'^',2,1)-2))  AS  LV1_NM
						,       DECODE(A.LV ,1  ,NULL
						                    ,2  ,SUBSTR(A.AC,INSTR(A.AC,'^',2,1)+1,LENGTH(A.AC))
						                    ,3  ,SUBSTR(A.AC,INSTR(A.AC,'^',1,2)+1,(INSTR(A.AC,'^',1,3)-1)-INSTR(A.AC,'^',1,2))
						              )  AS  LV2_NM
						,       DECODE(A.LV ,1  ,NULL
						                    ,2  ,NULL
						                    ,3  ,SUBSTR(A.AC,INSTR(A.AC,'^',1,3)+1))  AS  LV3_NM
						FROM    (
						        SELECT  LEVEL LV,  STORE_CD,    PROD_CLASS_CD,   SYS_CONNECT_BY_PATH(PROD_CLASS_NM, '^')  AS AC
						        FROM    (
						                    SELECT  STORE_CD,   PROD_CLASS_CD, PROD_CLASS_NM, P_PROD_CLASS_CD
						                    FROM    TB_MS_PRODUCT_CLASS
						                    WHERE   STORE_CD    =  #{storeCd}
						                )
						        START WITH  P_PROD_CLASS_CD ='00000'
                                AND         STORE_CD    =  #{storeCd}
						        CONNECT BY
						        PRIOR       PROD_CLASS_CD   =   P_PROD_CLASS_CD
                                AND         STORE_CD    =  #{storeCd}
						        )   A
        			]]>
              )	C
			ON A.PROD_CLASS_CD = C.PROD_CLASS_CD
        WHERE 1=1
        <if test='prodCd != null and prodCd != ""'>
            AND A.PROD_CD = #{prodCd}
        </if>
        <if test='prodNm != null and prodNm != ""'>
            AND A.PROD_NM LIKE '%'||#{prodNm}||'%'
        </if>
        <if test='barcdCd != null and barcdCd != ""'>
            AND A.BARCD_CD = #{barcdCd}
        </if>
        <if test='prodClassCd != null and prodClassCd != ""'>
           AND A.PROD_CLASS_CD IN  (
                                       SELECT              PROD_CLASS_CD
                                       FROM                TB_MS_PRODUCT_CLASS
                                       WHERE               STORE_CD        = B.STORE_CD
                                       START WITH          PROD_CLASS_CD   = #{prodClassCd}
                                       AND                 STORE_CD        = B.STORE_CD
                                       CONNECT BY PRIOR    PROD_CLASS_CD   = P_PROD_CLASS_CD
                                       AND                 STORE_CD        = B.STORE_CD
                                      )
        </if>
        <if test='arrVendrCd != null and arrVendrCd != ""'>
            AND A.PROD_CD IN     ( SELECT  PROD_CD
                                    FROM    TB_MS_VENDOR_PROD
                                    WHERE   STORE_CD = B.STORE_CD
                                    AND     VENDR_CD IN
                                    <foreach collection="arrVendrCd" item="item" open="(" close=")" separator=",">
                                        #{item}
                                    </foreach>
                                  )
        </if>
        ORDER BY A.PROD_CD
    </select>
</mapper>