<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    Prod.xml
    상품관리 sql
    ======================================================
    No  ||  수정자 ||  수정일자    ||  수정내역
    ======================================================
    1       노현수     2018.10.19     쿼리수정
-->
<mapper namespace="kr.co.solbipos.base.prod.prod.service.impl.ProdMapper">

    <!-- 상품 조회 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_HQ_PRODUCT_SALE_PRICE,
                   TB_MS_PRODUCT, TB_MS_PRODUCT_SALE_PRICE
        PARAM    : prodVO
        COMMENTS : 상품의 목록을 조회한다. ( 본사/매장 )
    -->
    <select id="getProdList" parameterType="prodVO" resultType="DefaultMap">
        /* USE : ProdMapper.getProdList */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                <include refid="CmmSQL.PagingTemplateHeader"/>
                SELECT
                    thp.HQ_OFFICE_CD,
                    thp.PROD_CD,
                    thp.PROD_NM,
                    thp.HQ_BRAND_CD,
                    thb.HQ_BRAND_NM,
                    thp.PROD_CLASS_CD,
                    ( SELECT SF_GET_PROD_CLASSES('H', thp.HQ_OFFICE_CD, thp.PROD_CLASS_CD) FROM DUAL ) AS PROD_CLASS_NM,
                    NVL(thp.COST_UPRC, 0) COST_UPRC,
                    NVL(thp.SPLY_UPRC, 0) SPLY_UPRC,
                    NVL(thpsp.SALE_UPRC, 0) AS SALE_UPRC, -- 판매단가
                    thp.ORGPLCE_CD, -- TODO 원산지명 조회 필요
                    thp.PO_UNIT_FG,
                    thp.REG_DT,
                    thp.USE_YN,
                   (SELECT COUNT(thps.STORE_CD) FROM TB_HQ_PRODUCT_STORE thps WHERE thps.HQ_OFFICE_CD = thp.HQ_OFFICE_CD AND thps.PROD_CD = thp.PROD_CD ) AS STORE_CNT
                    <include refid="CmmSQL.PagingTemplateCount"/>
                FROM
                    TB_HQ_PRODUCT thp
                LEFT OUTER JOIN (
                    SELECT
                        HQ_OFFICE_CD,
                        PROD_CD,
                        MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST
                            ORDER BY
                            START_DATE DESC ) AS SALE_UPRC
                    FROM
                        TB_HQ_PRODUCT_SALE_PRICE
                    WHERE
                        HQ_OFFICE_CD = #{hqOfficeCd}
                        <![CDATA[
                        AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        ]]>
                        AND SALE_PRC_FG = #{salePrcFg}
                    GROUP BY
                        HQ_OFFICE_CD, PROD_CD
                    ) thpsp ON
                    thp.HQ_OFFICE_CD = thpsp.HQ_OFFICE_CD
                    AND thp.PROD_CD = thpsp.PROD_CD
                LEFT OUTER JOIN TB_HQ_BRAND thb ON
                    thb.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
                    AND thb.HQ_BRAND_CD = thp.HQ_BRAND_CD
                WHERE
                    thp.HQ_OFFICE_CD = #{hqOfficeCd}
                <if test="chkDt == false">
                    <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
                        <![CDATA[
                        AND thp.REG_DT BETWEEN #{startDate}||'000000' AND #{endDate}||'235959'
                        ]]>
                    </if>
                </if>
                <if test="prodCd != null and prodCd != ''">
                    AND thp.PROD_CD LIKE '%'||#{prodCd}||'%' --상품코드
                </if>
                <if test="prodNm != null and prodNm != ''">
                    AND thp.PROD_NM LIKE '%'||#{prodNm}||'%' --상품명
                </if>
                <if test="barCd != null and barCd != ''">
                    AND EXISTS (
                                SELECT 1
                                FROM
                                    TB_HQ_PRODUCT_BARCD
                                WHERE
                                    HQ_OFFICE_CD = thp.HQ_OFFICE_CD
                                    AND PROD_CD = thp.PROD_CD
                                    AND BARCD_CD = #{barCd}
                                ) --바코드
                </if>
                <if test="prodClassCd != null and prodClassCd != ''">
                    AND thp.PROD_CLASS_CD IN (
                                                SELECT
                                                    PROD_CLASS_CD
                                                FROM
                                                    TB_HQ_PRODUCT_CLASS
                                                WHERE
                                                    HQ_OFFICE_CD = #{hqOfficeCd}
                                                START WITH
                                                    PROD_CLASS_CD = #{prodClassCd}
                                                    AND HQ_OFFICE_CD = #{hqOfficeCd}
                                                CONNECT BY
                                                    PRIOR PROD_CLASS_CD = P_PROD_CLASS_CD
                                                    AND HQ_OFFICE_CD = #{hqOfficeCd}
                                            )
                </if>
                <if test="useYn != null and useYn != ''">
                    AND thp.USE_YN = #{useYn} --사용여부
                </if>
                <if test="hqBrandNm != null and hqBrandNm != ''">
                    AND thb.HQ_BRAND_NM LIKE '%'||#{hqBrandNm}||'%' -- 브랜드명
                </if>
                    ORDER BY thp.PROD_CD ASC
                <include refid="CmmSQL.PagingTemplateBottom"/>
            </when>
            <!-- 가맹점 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                <include refid="CmmSQL.PagingTemplateHeader"/>
                SELECT
                    tmp.STORE_CD,
                    tmp.PROD_CD,
                    tmp.PROD_NM,
                    tms.HQ_OFFICE_CD,
                    tmp.HQ_BRAND_CD,
                    thb.HQ_BRAND_NM,
                    tmp.PROD_CLASS_CD,
                    ( SELECT SF_GET_PROD_CLASSES('S', tmp.STORE_CD, tmp.PROD_CLASS_CD) FROM DUAL ) AS PROD_CLASS_NM,
                    NVL(tmp.COST_UPRC, 0) COST_UPRC,
                    NVL(tmp.SPLY_UPRC, 0) SPLY_UPRC,
                    NVL(thpsp.SALE_UPRC, 0) AS SALE_UPRC, -- 판매단가
                    tmp.ORGPLCE_CD, -- TODO 원산지명 조회 필요
                    tmp.PO_UNIT_FG,
                    tmp.REG_DT,
                    tmp.USE_YN
                <include refid="CmmSQL.PagingTemplateCount"/>
                FROM
                    TB_MS_PRODUCT tmp
                LEFT OUTER JOIN (
                    SELECT
                        STORE_CD,
                        PROD_CD,
                        MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST
                            ORDER BY
                            START_DATE DESC ) AS SALE_UPRC
                    FROM
                        TB_MS_PRODUCT_SALE_PRICE
                    WHERE
                        STORE_CD = #{storeCd}
                        <![CDATA[
                        AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        ]]>
                        AND SALE_PRC_FG = #{salePrcFg}
                    GROUP BY
                        STORE_CD, PROD_CD
                    ) thpsp ON
                    tmp.STORE_CD = thpsp.STORE_CD
                    AND tmp.PROD_CD = thpsp.PROD_CD
                INNER JOIN TB_MS_STORE tms ON
                    tms.STORE_CD  = tmp.STORE_CD
                LEFT OUTER JOIN TB_HQ_BRAND thb ON
                    thb.HQ_OFFICE_CD = tms.HQ_OFFICE_CD
                    AND thb.HQ_BRAND_CD = tmp.HQ_BRAND_CD
                WHERE
                    tmp.STORE_CD = #{storeCd}
                <if test="chkDt == false">
                    <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
                        <![CDATA[
                        AND tmp.REG_DT BETWEEN #{startDate}||'000000' AND #{endDate}||'235959'
                        ]]>
                    </if>
                </if>
                <if test="prodCd != null and prodCd != ''">
                    AND tmp.PROD_CD LIKE '%'||#{prodCd}||'%' --상품코드
                </if>
                <if test="prodNm != null and prodNm != ''">
                    AND tmp.PROD_NM LIKE '%'||#{prodNm}||'%' --상품명
                </if>
                <if test="barCd != null and barCd != ''">
                    AND EXISTS (
                                SELECT 1
                                FROM
                                    TB_MS_PRODUCT_BARCD
                                WHERE
                                    STORE_CD = tmp.STORE_CD
                                    AND PROD_CD = tmp.PROD_CD
                                    AND BARCD_CD = #{barCd}
                                ) --바코드
                </if>
                <if test="prodClassCd != null and prodClassCd != ''">
                    AND tmp.PROD_CLASS_CD IN (
                                                SELECT
                                                    PROD_CLASS_CD
                                                FROM
                                                    TB_MS_PRODUCT_CLASS
                                                WHERE
                                                    STORE_CD = #{storeCd}
                                                START WITH
                                                    PROD_CLASS_CD = #{prodClassCd}
                                                    AND STORE_CD = #{storeCd}
                                                CONNECT BY
                                                    PRIOR PROD_CLASS_CD = P_PROD_CLASS_CD
                                                    AND STORE_CD = #{storeCd}
                                            )
                </if>
                <if test="useYn != null and useYn != ''">
                    AND tmp.USE_YN = #{useYn} --사용여부
                </if>
                  ORDER BY tmp.PROD_CD ASC
                <include refid="CmmSQL.PagingTemplateBottom"/>
            </when>
        </choose>
    </select>

    <!-- 상품 상세 조회 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_HQ_PRODUCT_SALE_PRICE,
                   TB_MS_PRODUCT, TB_MS_PRODUCT_SALE_PRICE
        PARAM    : prodVO
        COMMENTS : 상품의 상세정보를 조회한다. ( 본사/매장 )
    -->
    <select id="getProdDetail" parameterType="prodVO" resultType="DefaultMap">
        /* USE : ProdMapper.getProdDetail */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT
                    thp.HQ_OFFICE_CD,       -- 본사코드
                    thp.PROD_CD,            -- 상품코드
                    thp.PROD_NM,            -- 상품명
                    thp.PROD_CLASS_CD,      -- 상품분류코드
                    ( SELECT SF_GET_PROD_CLASSES('H', thp.HQ_OFFICE_CD, thp.PROD_CLASS_CD) FROM DUAL ) AS PROD_CLASS_CD_NM,
                    thp.CORNR_CD,           -- 코너코드
                    thp.ORGPLCE_CD,         -- 원산지 구분 -- TODO 원산지명 조회 필요
                    thp.SDATTR_CLASS_CD,    -- 사이드속성분류코드
                    thp.SDSEL_GRP_CD,       -- 사이드선택그룹코드
                    thp.POINT_SAVE_YN,
                    thp.PROD_DC_FG,
                    thp.VAT_FG,                                     -- 과세여부
                    thp.PROD_TIP_YN,
                    thp.PROD_PACK_AMT,
                    thp.PROD_DLVR_AMT,
                    thp.PROD_TYPE_FG,                               -- 상품유형구분
                    thp.SALE_PROD_YN,                               -- 판매상품여부
                    thp.STOCK_PROD_YN,                              -- 재고관리여부
                    thp.SIDE_PROD_YN,
                    thp.SET_PROD_FG,                                -- 세트상품구분
                    NVL(thpsp.SALE_UPRC, 0) AS SALE_UPRC,           -- 최초판매단가
                    NVL(thp.COST_UPRC, 0) AS COST_UPRC,             -- 원가단가
                    NVL(thp.LAST_COST_UPRC, 0) AS LAST_COST_UPRC,   -- 최종원가단가
                    NVL(thp.SPLY_UPRC, 0) AS SPLY_UPRC,             -- 판매단가
                    thp.SPLY_UPRC_USE_YN,
                    thp.PO_PROD_FG,                                 -- 주문상품구분
                    thp.PO_UNIT_FG,                                 -- 주문단위
                    thp.PO_UNIT_QTY,
                    thp.PO_UNIT_ALLOW_FG,
                    thp.PO_MIN_QTY,                 -- 최소주문
                    thp.SAFE_STOCK_QTY,             -- 안전재고
                    0 AS DEFAULT_STOCK,             -- todo 초기재고
                    thp.STOCK_UNIT_FG,
                    thp.USE_YN,                     -- 사용여부
                    NVL(thp.REMARK, '') AS REMARK,  -- 비고
                    thp.REG_DT
                FROM
                    TB_HQ_PRODUCT thp
                LEFT OUTER JOIN (
                    SELECT
                        HQ_OFFICE_CD,
                        PROD_CD,
                        MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST
                            ORDER BY
                            START_DATE DESC ) AS SALE_UPRC
                    FROM
                        TB_HQ_PRODUCT_SALE_PRICE
                    WHERE
                        HQ_OFFICE_CD = #{hqOfficeCd}
                        <![CDATA[
                        AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        ]]>
                        AND SALE_PRC_FG = #{salePrcFg}
                    GROUP BY
                        HQ_OFFICE_CD, PROD_CD
                    ) thpsp ON
                    thp.HQ_OFFICE_CD = thpsp.HQ_OFFICE_CD
                    AND thp.PROD_CD = thpsp.PROD_CD
                WHERE
                    thp.HQ_OFFICE_CD = #{hqOfficeCd}
                    AND thp.PROD_CD = #{prodCd}
            </when>
            <!-- 가맹점 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                SELECT
                    tmp.STORE_CD,           -- 매장코드
                    tmp.PROD_CD,            -- 상품코드
                    tmp.PROD_NM,            -- 상품명
                    tmp.PROD_CLASS_CD,      -- 상품분류코드
                    ( SELECT SF_GET_PROD_CLASSES('S', tmp.STORE_CD, tmp.PROD_CLASS_CD) FROM DUAL ) AS PROD_CLASS_CD_NM,
                    tmp.CORNR_CD,           -- 코너코드
                    tmp.ORGPLCE_CD,         -- 원산지 구분 -- TODO 원산지명 조회 필요
                    tmp.SDATTR_CLASS_CD,
                    tmp.SDSEL_GRP_CD,
                    tmp.POINT_SAVE_YN,
                    tmp.PROD_DC_FG,
                    tmp.VAT_FG,                                     -- 과세여부
                    tmp.PROD_TIP_YN,
                    tmp.PROD_PACK_AMT,
                    tmp.PROD_DLVR_AMT,
                    tmp.PROD_TYPE_FG,                               -- 상품유형
                    tmp.SALE_PROD_YN,                               -- 판매상품여부
                    tmp.STOCK_PROD_YN,                              -- 재고관리여부
                    tmp.SIDE_PROD_YN,
                    tmp.SET_PROD_FG,                                -- 세트상품구분
                    NVL(tmpsp.SALE_UPRC, 0) AS SALE_UPRC,           -- 최초판매단가
                    NVL(tmp.COST_UPRC, 0) AS COST_UPRC,             -- 원가단가
                    NVL(tmp.LAST_COST_UPRC, 0) AS LAST_COST_UPRC,   -- 최종원가단가
                    NVL(tmp.SPLY_UPRC, 0) AS SPLY_UPRC,             -- 판매단가
                    tmp.SPLY_UPRC_USE_YN,
                    tmp.PO_PROD_FG,                                 -- 주문상품구분
                    tmp.PO_UNIT_FG,                                 -- 주문단위
                    tmp.PO_UNIT_QTY,
                    tmp.PO_UNIT_ALLOW_FG,
                    tmp.PO_MIN_QTY,                 -- 최소주문
                    tmp.SAFE_STOCK_QTY,             -- 안전재고
                    0 AS DEFAULT_STOCK,             -- todo 초기재고
                    tmp.STOCK_UNIT_FG,
                    tmp.USE_YN,                     -- 사용여부
                    NVL(tmp.REMARK, '') AS REMARK,  -- 비고
                    tmp.REG_DT
                FROM
                    TB_MS_PRODUCT tmp
                LEFT OUTER JOIN (
                    SELECT
                        STORE_CD,
                        PROD_CD,
                        MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST
                            ORDER BY
                            START_DATE DESC ) AS SALE_UPRC
                    FROM
                        TB_MS_PRODUCT_SALE_PRICE
                    WHERE
                        STORE_CD = #{storeCd}
                        <![CDATA[
                        AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        ]]>
                        AND SALE_PRC_FG = #{salePrcFg}
                    GROUP BY
                        STORE_CD, PROD_CD
                    ) tmpsp ON
                    tmp.STORE_CD = tmpsp.STORE_CD
                    AND tmp.PROD_CD = tmpsp.PROD_CD
                WHERE
                    tmp.STORE_CD = #{storeCd}
                    AND tmp.PROD_CD = #{prodCd}
        </when>
        </choose>
    </select>

    <!-- 연결 상품 조회 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_UNITST_PROD, TB_MS_PRODUCT_UNITST_PROD,
        PARAM    : prodVO
        COMMENTS : 상품의 연결상품을 조회한다. ( 본사/매장 )
    -->
    <select id="getLinkedProdList" parameterType="prodVO" resultType="DefaultMap">
        /* USE : ProdMapper.getLinkedProdList */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT
                    thpup.HQ_OFFICE_CD,
                    thpup.PROD_CD,
                    thpup.UNIT_PROD_CD,
                    thpup.SET_PROD_FG,
                    thpup.UNIT_PROD_QTY,
                    thpup.DISP_SEQ
                FROM
                    TB_HQ_PRODUCT_UNITST_PROD thpup
                WHERE
                    thpup.HQ_OFFICE_CD = #{hqOfficeCd}
                    AND thpup.PROD_CD = #{prodCd}
                ORDER BY
                    thpup.DISP_SEQ
            </when>
            <!-- 가맹점 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                SELECT
                    tmpup.STORE_CD,
                    tmpup.PROD_CD,
                    tmpup.UNIT_PROD_CD,
                    tmpup.SET_PROD_FG,
                    tmpup.UNIT_PROD_QTY,
                    tmpup.DISP_SEQ
                FROM
                    TB_MS_PRODUCT_UNITST_PROD tmpup
                WHERE
                    tmpup.STORE_CD = #{storeCd}
                    AND tmpup.PROD_CD = #{prodCd}
                ORDER BY
                    tmpup.DISP_SEQ
            </when>
        </choose>
    </select>

    <!-- 상품코드 조회 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_MS_PRODUCT
        PARAM    : prodVO
        COMMENTS : 본사/매장의 상품정보를 생성/수정 한다.
    -->
    <select id="getProdCd" parameterType="prodVO" resultType="String">
        /* ProdMapper.getProdCd */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT LPAD(NVL(MAX(TO_NUMBER(PROD_CD)),0) + 1, 13, '0') AS PROD_CD
                  FROM TB_HQ_PRODUCT
                 WHERE HQ_OFFICE_CD = #{hqOfficeCd}
            </when>
            <!-- 가맹점 (매장 등록 상품의 경우 상품코드가 '9'로 시작) -->
            <when test='orgnFg != null and orgnFg == "S"'>
                <!-- 단독매장 -->
                <if test='hqOfficeCd != null and hqOfficeCd == "0000"'>
                    SELECT LPAD(NVL(MAX(TO_NUMBER(PROD_CD)),0) + 1, 13, '0') AS PROD_CD
                      FROM TB_MS_PRODUCT
                     WHERE STORE_CD = #{storeCd}
                </if>
                <!-- 단독매장이 아닐 경우 -->
                <if test='hqOfficeCd != null and hqOfficeCd != "0000"'>
                SELECT '9' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(PROD_CD, 2, 13))),0) + 1, 12, '0') AS PROD_CD
                  FROM TB_MS_PRODUCT
                 WHERE STORE_CD = #{storeCd}
                   AND PROD_CD LIKE '9%'
                </if>
            </when>
        </choose>
    </select>

    <!-- 상품정보 저장 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_MS_PRODUCT
        PARAM    : prodVO
        COMMENTS : 본사/매장의 상품정보를 생성/수정 한다.
    -->
    <update id="saveProductInfo" parameterType="prodVO">
        /* ProdMapper.saveProductInfo */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                MERGE INTO
                    TB_HQ_PRODUCT thp
                USING DUAL ON
                    (
                        thp.HQ_OFFICE_CD = #{hqOfficeCd}
                        AND thp.PROD_CD = #{prodCd}
                    )
                WHEN MATCHED THEN
                    UPDATE
                    SET
                        PROD_NM = #{prodNm},
                        PROD_CLASS_CD  = #{prodClassCd},
                        CORNR_CD = #{cornrCd},
                        ORGPLCE_CD = #{orgplceCd},
                        SDATTR_CLASS_CD = #{sdattrClassCd},
                        SDSEL_GRP_CD = #{sdselGrpCd},
                        POINT_SAVE_YN = #{pointSaveYn, jdbcType=VARCHAR},
                        PROD_DC_FG = #{prodDcFg},
                        VAT_FG = #{vatFg},
                        PROD_TIP_YN = #{prodTipYn, jdbcType=VARCHAR},
                        PROD_PACK_AMT = #{prodPackAmt, jdbcType=NUMERIC},
                        PROD_DLVR_AMT = #{prodDlvrAmt, jdbcType=NUMERIC},
                        PROD_TYPE_FG = #{prodTypeFg},
                        SALE_PROD_YN = #{saleProdYn},
                        STOCK_PROD_YN = #{stockProdYn},
                        SIDE_PROD_YN = #{sideProdYn, jdbcType=VARCHAR},
                        SET_PROD_FG = #{setProdFg},
                        COST_UPRC = #{costUprc, jdbcType=NUMERIC},
                        LAST_COST_UPRC = #{lastCostUprc, jdbcType=NUMERIC},
                        SPLY_UPRC = #{splyUprc, jdbcType=NUMERIC},
                        SPLY_UPRC_USE_YN = #{splyUprcUseYn, jdbcType=VARCHAR},
                        PO_PROD_FG = #{poProdFg},
                        PO_UNIT_FG = #{poUnitFg},
                        PO_UNIT_QTY = #{poUnitQty, jdbcType=NUMERIC},
                        PO_UNIT_ALLOW_FG = #{poUnitAllowFg},
                        PO_MIN_QTY = #{poMinQty, jdbcType=NUMERIC},
                        SAFE_STOCK_QTY = #{safeStockQty, jdbcType=NUMERIC},
                        STOCK_UNIT_FG = #{stockUnitFg},
                        USE_YN = #{useYn},
                        REMARK = #{remark},
                        MOD_DT = #{modDt},
                        MOD_ID = #{modId}
                  WHEN NOT MATCHED THEN
                    INSERT
                    (
                        HQ_OFFICE_CD,
                        PROD_CD,
                        PROD_NM,
                        PROD_CLASS_CD,
                        CORNR_CD,
                        ORGPLCE_CD,
                        SDATTR_CLASS_CD,
                        SDSEL_GRP_CD,
                        POINT_SAVE_YN,
                        PROD_DC_FG,
                        VAT_FG,
                        PROD_TIP_YN,
                        PROD_PACK_AMT,
                        PROD_DLVR_AMT,
                        PROD_TYPE_FG,
                        SALE_PROD_YN,
                        STOCK_PROD_YN,
                        SIDE_PROD_YN,
                        SET_PROD_FG,
                        COST_UPRC,
                        LAST_COST_UPRC,
                        SPLY_UPRC,
                        SPLY_UPRC_USE_YN,
                        PO_PROD_FG,
                        PO_UNIT_FG,
                        PO_UNIT_QTY,
                        PO_UNIT_ALLOW_FG,
                        PO_MIN_QTY,
                        SAFE_STOCK_QTY,
                        STOCK_UNIT_FG,
                        USE_YN,
                        REMARK,
                        REG_DT,
                        REG_ID,
                        MOD_DT,
                        MOD_ID
                    ) VALUES (
                        #{hqOfficeCd},
                        #{prodCd},
                        #{prodNm},
                        #{prodClassCd},
                        '00',
                        #{orgplceCd},
                        #{sdattrClassCd},
                        #{sdselGrpCd},
                        #{pointSaveYn, jdbcType=VARCHAR},
                        #{prodDcFg},
                        #{vatFg},
                        #{prodTipYn, jdbcType=VARCHAR},
                        #{prodPackAmt, jdbcType=NUMERIC},
                        #{prodDlvrAmt, jdbcType=NUMERIC},
                        #{prodTypeFg},
                        #{saleProdYn},
                        #{stockProdYn},
                        #{sideProdYn, jdbcType=VARCHAR},
                        #{setProdFg},
                        #{costUprc, jdbcType=NUMERIC},
                        #{lastCostUprc, jdbcType=NUMERIC},
                        #{splyUprc, jdbcType=NUMERIC},
                        #{splyUprcUseYn, jdbcType=VARCHAR},
                        #{poProdFg},
                        #{poUnitFg},
                        #{poUnitQty, jdbcType=NUMERIC},
                        #{poUnitAllowFg},
                        #{poMinQty, jdbcType=NUMERIC},
                        #{safeStockQty, jdbcType=NUMERIC},
                        #{stockUnitFg},
                        #{useYn},
                        #{remark},
                        #{regDt},
                        #{regId},
                        #{modDt},
                        #{modId}
                    )
            </when>
            <!-- 가맹점 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                MERGE INTO
                    TB_MS_PRODUCT tmp
                USING DUAL ON
                    (
                        tmp.STORE_CD = #{storeCd}
                        AND tmp.PROD_CD = #{prodCd}
                    )
                WHEN MATCHED THEN
                    UPDATE
                    SET
                        PROD_NM = #{prodNm},
                        PROD_CLASS_CD  = #{prodClassCd},
                        CORNR_CD = #{cornrCd},
                        ORGPLCE_CD = #{orgplceCd},
                        SDATTR_CLASS_CD = #{sdattrClassCd},
                        SDSEL_GRP_CD = #{sdselGrpCd},
                        POINT_SAVE_YN = #{pointSaveYn},
                        PROD_DC_FG = #{prodDcFg},
                        VAT_FG = #{vatFg},
                        PROD_TIP_YN = #{prodTipYn},
                        PROD_PACK_AMT = #{prodPackAmt, jdbcType=NUMERIC},
                        PROD_DLVR_AMT = #{prodDlvrAmt, jdbcType=NUMERIC},
                        PROD_TYPE_FG = #{prodTypeFg},
                        SALE_PROD_YN = #{saleProdYn},
                        STOCK_PROD_YN = #{stockProdYn},
                        SIDE_PROD_YN = #{sideProdYn},
                        SET_PROD_FG = #{setProdFg},
                        PRC_CTRL_FG = #{prcCtrlFg},
                        COST_UPRC = #{costUprc},
                        LAST_COST_UPRC = #{lastCostUprc},
                        SPLY_UPRC = #{splyUprc},
                        SPLY_UPRC_USE_YN = #{splyUprcUseYn},
                        PO_PROD_FG = #{poProdFg},
                        PO_UNIT_FG = #{poUnitFg},
                        PO_UNIT_QTY = #{poUnitQty},
                        PO_UNIT_ALLOW_FG = #{poUnitAllowFg},
                        PO_MIN_QTY = #{poMinQty},
                        SAFE_STOCK_QTY = #{safeStockQty},
                        STOCK_UNIT_FG = #{stockUnitFg},
                        USE_YN = #{useYn},
                        REMARK = #{remark},
                        MOD_DT = #{modDt},
                        MOD_ID = #{modId}
                WHEN NOT MATCHED THEN
                    INSERT
                    (
                        STORE_CD,
                        PROD_CD,
                        PROD_NM,
                        PROD_CLASS_CD,
                        CORNR_CD,
                        ORGPLCE_CD,
                        SDATTR_CLASS_CD,
                        SDSEL_GRP_CD,
                        POINT_SAVE_YN,
                        PROD_DC_FG,
                        VAT_FG,
                        PROD_TIP_YN,
                        PROD_PACK_AMT,
                        PROD_DLVR_AMT,
                        PROD_TYPE_FG,
                        SALE_PROD_YN,
                        STOCK_PROD_YN,
                        SIDE_PROD_YN,
                        SET_PROD_FG,
                        PRC_CTRL_FG,
                        COST_UPRC,
                        LAST_COST_UPRC,
                        SPLY_UPRC,
                        SPLY_UPRC_USE_YN,
                        PO_PROD_FG,
                        PO_UNIT_FG,
                        PO_UNIT_QTY,
                        PO_UNIT_ALLOW_FG,
                        PO_MIN_QTY,
                        SAFE_STOCK_QTY,
                        STOCK_UNIT_FG,
                        USE_YN,
                        REMARK,
                        REG_DT,
                        REG_ID,
                        MOD_DT,
                        MOD_ID
                    ) VALUES (
                        #{storeCd},
                        #{prodCd},
                        #{prodNm},
                        #{prodClassCd},
                        '00',
                        #{orgplceCd},
                        #{sdattrClassCd},
                        #{sdselGrpCd},
                        'N',
                        #{prodDcFg},
                        #{vatFg},
                        #{prodTipYn},
                        #{prodPackAmt, jdbcType=NUMERIC},
                        #{prodDlvrAmt, jdbcType=NUMERIC},
                        #{prodTypeFg},
                        #{saleProdYn},
                        #{stockProdYn},
                        'N',
                        #{setProdFg},
                        #{prcCtrlFg},
                        #{costUprc},
                        #{lastCostUprc},
                        #{splyUprc},
                        #{splyUprcUseYn},
                        #{poProdFg},
                        #{poUnitFg},
                        #{poUnitQty},
                        #{poUnitAllowFg},
                        #{poMinQty},
                        #{safeStockQty},
                        #{stockUnitFg},
                        #{useYn},
                        #{remark},
                        #{regDt},
                        #{regId},
                        #{modDt},
                        #{modId}
                    )
            </when>
        </choose>
    </update>

    <!-- 상품 판매가 저장 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_SALE_PRICE
        PARAM    : prodVO
        COMMENTS : 본사/매장의 상품 최종 판매가를 저장한다.
    -->
    <update id="saveSalePrice" parameterType="prodVO">
        /* ProdMapper.saveSalePrice */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                <![CDATA[
                MERGE INTO TB_HQ_PRODUCT_SALE_PRICE thpsp
                USING DUAL ON
                (
                    thpsp.HQ_OFFICE_CD = #{hqOfficeCd}
                AND thpsp.PROD_CD = #{prodCd}
                AND thpsp.SALE_PRC_FG = #{salePrcFg}
                AND thpsp.START_DATE <= SYSDATE
                AND thpsp.end_date >= SYSDATE
                )
                WHEN MATCHED THEN
                UPDATE
                   SET SALE_UPRC = #{lastCostUprc},
                       MOD_DT = #{modDt},
                       MOD_ID = #{modId}
                WHEN NOT MATCHED THEN
                INSERT
                (
                    HQ_OFFICE_CD,
                    PROD_CD,
                    SALE_PRC_FG,
                    START_DATE,
                    END_DATE,
                    SALE_UPRC,
                    REG_DT,
                    REG_ID,
                    MOD_DT,
                    MOD_ID
                ) VALUES (
                    #{hqOfficeCd},
                    #{prodCd},
                    #{salePrcFg},
                    #{startDate},
                    #{endDate},
                    #{lastCostUprc},
                    #{regDt},
                    #{regId},
                    #{modDt},
                    #{modId}
                )
                ]]>
            </when>
            <!-- 가맹점 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                <![CDATA[
                MERGE INTO TB_MS_PRODUCT_SALE_PRICE thpsp
                USING DUAL ON
                (
                    thpsp.STORE_CD = #{storeCd}
                AND thpsp.PROD_CD = #{prodCd}
                AND thpsp.SALE_PRC_FG = #{salePrcFg}
                AND thpsp.START_DATE <= SYSDATE
                AND thpsp.end_date >= SYSDATE
                )
                WHEN MATCHED THEN
                UPDATE
                   SET SALE_UPRC = #{lastCostUprc},
                       MOD_DT = #{modDt},
                       MOD_ID = #{modId}
                WHEN NOT MATCHED THEN
                INSERT
                (
                    STORE_CD,
                    PROD_CD,
                    SALE_PRC_FG,
                    START_DATE,
                    END_DATE,
                    SALE_UPRC,
                    REG_DT,
                    REG_ID,
                    MOD_DT,
                    MOD_ID
                ) VALUES (
                    #{storeCd},
                    #{prodCd},
                    #{salePrcFg},
                    #{startDate},
                    #{endDate},
                    #{lastCostUprc},
                    #{regDt},
                    #{regId},
                    #{modDt},
                    #{modId}
                )
                ]]>
            </when>
        </choose>
    </update>


    <!-- 상품 판매가 변경 히스토리 저장 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_SALE_PRICE_HISTORY
        COMMENTS : 상품 판매가 변경 히스토리 저장한다.
    -->
    <insert id="saveSalePriceHistory" parameterType="prodVO">
        /* ProdMapper.saveSalePriceHistory */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                <![CDATA[
                INSERT INTO TB_HQ_PRODUCT_SALE_PRICE_HISTORY
                (
                    HIS_SEQ,
                    HQ_OFFICE_CD,
                    PROD_CD,
                    SALE_PRC_FG,
                    START_DATE,
                    END_DATE,
                    SALE_UPRC,
                    REG_DT,
                    REG_ID
                ) VALUES (
                    SQ_HQ_PRODUCT_SALE_PRICE_HISTORY.NEXTVAL,
                    #{hqOfficeCd},
                    #{prodCd},
                    #{salePrcFg},
                    #{startDate},
                    #{endDate},
                    #{lastCostUprc},
                    #{regDt},
                    #{regId}
                )
                ]]>
            </when>
            <!-- 가맹점 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                <![CDATA[
                INSERT INTO TB_MS_PRODUCT_SALE_PRICE_HISTORY
                (
                    HIS_SEQ,
                    STORE_CD,
                    PROD_CD,
                    SALE_PRC_FG,
                    START_DATE,
                    END_DATE,
                    SALE_UPRC,
                    REG_DT,
                    REG_ID
                ) VALUES (
                    SQ_MS_PRODUCT_SALE_PRICE_HISTORY.NEXTVAL,
                    #{storeCd},
                    #{prodCd},
                    #{salePrcFg},
                    #{startDate},
                    #{endDate},
                    #{lastCostUprc},
                    #{regDt},
                    #{regId}
                )
                ]]>
            </when>
        </choose>
    </insert>


    <!-- 상품존재여부 확인 (본사) -->
    <!--
        TABLE    : TB_HQ_PRODUCT
        PARAM    : prodVO
        COMMENTS : 상품의 존재여부를 확인하기 위해 COUNT 를 리턴한다.
    -->
    <select id="getProdExistInfo" parameterType="prodVO" resultType="Integer" >
        /* USE : ProdMapper.getProdExistInfo */
        SELECT
            COUNT(*) AS PROD_COUNT
          FROM
            TB_HQ_PRODUCT thp
         WHERE
            thp.HQ_OFFICE_CD = #{hqOfficeCd}
            AND thp.PROD_CD = #{prodCd}
    </select>


    <!-- 본사 상품 등록시, 매장 상품 등록 프로시져 호출 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_MS_PRODUCT
        PARAM    : prodVO
        COMMENTS : 본사 쿠폰분류를 매장 쿠폰분류에 적용시킨다.
    -->
    <select id="insertHqProdToStoreProd" statementType="CALLABLE"  parameterType="prodVO" resultType="String">
        /* USE : ProdMapper.insertHqProdToStoreProd */
        {
          CALL PKG_HQ_PRODUCT.SP_HQ_PRODUCT_I
          (
            #{hqOfficeCd},
            #{storeCd},
            #{prodCd},
            #{regId},
            #{result, mode=OUT, jdbcType=VARCHAR}
          )
        }
    </select>

    <!-- 본사 상품 수정시, 매장 상품 수정 프로시져 호출 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_MS_PRODUCT
        PARAM    : prodVO
        COMMENTS : 본사 쿠폰분류를 매장 쿠폰분류에 적용시킨다.
    -->
    <select id="updateHqProdToStoreProd" statementType="CALLABLE"  parameterType="prodVO" resultType="String">
        /* USE : ProdMapper.updateHqProdToStoreProd */
        {
          CALL PKG_HQ_PRODUCT.SP_HQ_PRODUCT_U
          (
            #{hqOfficeCd},
            #{prodCd},
            #{regId},
            #{result, mode=OUT, jdbcType=VARCHAR}
          )
        }
    </select>


    <!-- 상품 적용/미적용 매장 조회 -->
    <!--
        TABLE    : TB_MS_STORE, TB_HQ_PRODUCT_STORE
        PARAM    : prodVO
        COMMENTS : 상품 적용 대상인 매장을 조회한다.
    -->
    <select id="getStoreList" parameterType="prodVO" resultType="DefaultMap">
        /* USE : ProdMapper.getStoreList */
        SELECT tms.HQ_OFFICE_CD,
               tho.HQ_OFFICE_NM,
               tms.STORE_CD,
               tms.STORE_NM,
               NVL2(thps.STORE_CD, 'Y', 'N') AS REG_YN,
               thpsp.SALE_UPRC AS HQ_SALE_UPRC,
               tmpsp.SALE_UPRC AS STORE_SALE_UPRC,
           <if test='storeRegFg != null and storeRegFg.toString() == "Y"'>
               tmpsp.SALE_UPRC AS SALE_UPRC, -- 등록매장은 매장판매가
               tmpsp.SALE_UPRC AS SALE_UPRC_B,
           </if>
           <if test='storeRegFg != null and storeRegFg.toString() == "N"'>
               CASE WHEN tmpsp.SALE_UPRC IS NULL THEN thpsp.SALE_UPRC
                    ELSE tmpsp.SALE_UPRC END AS SALE_UPRC, -- 미등록매장은 매장판매가 우선, 없으면 본사판매가
               CASE WHEN tmpsp.SALE_UPRC IS NULL THEN thpsp.SALE_UPRC
                    ELSE tmpsp.SALE_UPRC END AS SALE_UPRC_B,
           </if>
               thps.STORE_CD
          FROM TB_MS_STORE tms,
               TB_HQ_OFFICE tho,
               TB_HQ_PRODUCT_STORE thps,
               (
               SELECT thp.HQ_OFFICE_CD ,
                      thp.PROD_CD,
                      thpsp.SALE_UPRC
                 FROM TB_HQ_PRODUCT thp,
                      (
                       SELECT HQ_OFFICE_CD , PROD_CD,
                              MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC
                         FROM TB_HQ_PRODUCT_SALE_PRICE
                        WHERE 1 = 1
                         <![CDATA[
                          AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                          AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                          ]]>
                          AND SALE_PRC_FG = '1'
                        GROUP BY HQ_OFFICE_CD, PROD_CD
                      ) thpsp
                WHERE 1=1
                  AND thpsp.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
                  AND thpsp.PROD_CD = thp.PROD_CD
               ) thpsp, -- 본사 판매가
               (
               SELECT thp.HQ_OFFICE_CD ,
                      tmpsp.STORE_CD,
                      thp.PROD_CD,
                      tmpsp.SALE_UPRC
                 FROM TB_HQ_PRODUCT thp,
                      (
                      SELECT STORE_CD , PROD_CD,
                             MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC
                        FROM TB_MS_PRODUCT_SALE_PRICE
                       WHERE 1 = 1
                        <![CDATA[
                         AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                         AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                         ]]>
                         AND SALE_PRC_FG = '1'
                       GROUP BY STORE_CD, PROD_CD
                      ) tmpsp
                WHERE 1=1
                  AND thp.HQ_OFFICE_CD = #{hqOfficeCd}
                  AND tmpsp.STORE_CD IN (SELECT store_cd FROM TB_MS_STORE  WHERE HQ_OFFICE_CD = thp.HQ_OFFICE_CD)
                  AND tmpsp.PROD_CD = thp.PROD_CD
               ) tmpsp
         WHERE tho.HQ_OFFICE_CD = tms.HQ_OFFICE_CD
           AND tms.HQ_OFFICE_CD = #{hqOfficeCd}
           AND thps.HQ_OFFICE_CD (+)= tms.HQ_OFFICE_CD
           AND thps.STORE_CD (+)= tms.STORE_CD
           AND thps.PROD_CD (+)= #{prodCd}
           AND thpsp.HQ_OFFICE_CD (+)= tho.HQ_OFFICE_CD
           AND thpsp.PROD_CD (+)= #{prodCd}
           AND tmpsp.HQ_OFFICE_CD (+)= #{hqOfficeCd}
           AND tmpsp.STORE_CD (+)= tms.STORE_CD
           AND tmpsp.PROD_CD (+)= #{prodCd}
        <if test='storeCd != null and storeCd.toString() != ""'>
           AND tms.STORE_CD = #{storeCd}
        </if>
        <if test='storeNm != null and storeNm.toString() != ""'>
           AND tms.STORE_NM LIKE '%'||#{storeNm}||'%'
        </if>
        <if test='storeRegFg != null and storeRegFg.toString() == "Y"'>
           AND thps.STORE_CD IS NOT NULL
        </if>
        <if test='storeRegFg != null and storeRegFg.toString() == "N"'>
           AND thps.STORE_CD IS NULL
        </if>
         ORDER BY tms.STORE_CD ASC
    </select>

    <!-- 상품 적용 매장 등록 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_STORE
        PARAM    : prodVO
        COMMENTS : 본사 상품을 적용할 매장을 등록한다.
    -->
    <insert id="insertProdStore" parameterType="prodVO">

        /* USE : ProdMapper.insertProdStore */
        INSERT INTO TB_HQ_PRODUCT_STORE
        (
          HQ_OFFICE_CD,
          PROD_CD,
          STORE_CD,
          REG_DT,
          REG_ID,
          MOD_DT,
          MOD_ID
        )
        VALUES
        (
          #{hqOfficeCd},
          #{prodCd},
          #{storeCd},
          #{regDt},
          #{regId},
          #{modDt},
          #{modId}
        )
    </insert>

    <!-- 상품 적용 매장 등록시, 본사의 상품 매장으로 등록 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_MS_PRODUCT
        PARAM    : prodVO
        COMMENTS : 상품 적용 매장 등록시, 본사의 상품 매장으로 등록
    -->
    <insert id="insertProdStoreDetail" parameterType="prodVO">
        /* USE : ProdMapper.insertProdStoreDetail */
        MERGE INTO TB_MS_PRODUCT tmp
        USING ( SELECT
                    #{storeCd} AS STORE_CD,
                    thp.HQ_OFFICE_CD,
                    thp.PROD_CD,
                    thp.PROD_NM,
                    thp.PROD_CLASS_CD,
                    thp.CORNR_CD,
                    thp.ORGPLCE_CD,
                    thp.SDATTR_CLASS_CD,
                    thp.SDSEL_GRP_CD,
                    thp.POINT_SAVE_YN,
                    thp.PROD_DC_FG,
                    thp.VAT_FG,
                    thp.PROD_TIP_YN,
                    thp.PROD_PACK_AMT,
                    thp.PROD_DLVR_AMT,
                    thp.PROD_TYPE_FG,
                    thp.SALE_PROD_YN,
                    thp.STOCK_PROD_YN,
                    thp.SIDE_PROD_YN,
                    thp.SET_PROD_FG,
                    thp.COST_UPRC,
                    thp.LAST_COST_UPRC,
                    thp.SPLY_UPRC,
                    thp.SPLY_UPRC_USE_YN,
                    thp.PO_PROD_FG,
                    thp.PO_UNIT_FG,
                    thp.PO_UNIT_QTY,
                    thp.PO_UNIT_ALLOW_FG,
                    thp.PO_MIN_QTY,
                    thp.SAFE_STOCK_QTY,
                    thp.STOCK_UNIT_FG,
                    thp.USE_YN,
                    thp.REMARK,
                    thp.REG_DT,
                    thp.REG_ID,
                    thp.MOD_DT,
                    thp.MOD_ID
               FROM
                   TB_HQ_PRODUCT thp
               WHERE
                   thp.HQ_OFFICE_CD = #{hqOfficeCd}
                   AND thp.PROD_CD = #{prodCd} ) thp
           ON ( tmp.STORE_CD = thp.STORE_CD
            AND tmp.PROD_CD  = thp.PROD_CD )
        WHEN MATCHED THEN
        UPDATE
           SET tmp.PROD_NM             = thp.PROD_NM,
               tmp.PROD_CLASS_CD       = thp.PROD_CLASS_CD,
               tmp.CORNR_CD            = thp.CORNR_CD,
               tmp.ORGPLCE_CD          = thp.ORGPLCE_CD,
               tmp.SDATTR_CLASS_CD     = thp.SDATTR_CLASS_CD,
               tmp.SDSEL_GRP_CD        = thp.SDSEL_GRP_CD,
               tmp.POINT_SAVE_YN       = thp.POINT_SAVE_YN,
               tmp.PROD_DC_FG          = thp.PROD_DC_FG,
               tmp.VAT_FG              = thp.VAT_FG,
               tmp.PROD_TIP_YN         = thp.PROD_TIP_YN,
               tmp.PROD_PACK_AMT       = thp.PROD_PACK_AMT,
               tmp.PROD_DLVR_AMT       = thp.PROD_DLVR_AMT,
               tmp.PROD_TYPE_FG        = thp.PROD_TYPE_FG,
               tmp.SALE_PROD_YN        = thp.SALE_PROD_YN,
               tmp.STOCK_PROD_YN       = thp.STOCK_PROD_YN,
               tmp.SIDE_PROD_YN        = thp.SIDE_PROD_YN,
               tmp.SET_PROD_FG         = thp.SET_PROD_FG,
               tmp.PRC_CTRL_FG         = 'H',           -- 가격관리구분 (본사에서 매장으로 내려줌)
               tmp.COST_UPRC           = thp.COST_UPRC,
               tmp.LAST_COST_UPRC      = thp.LAST_COST_UPRC,
               tmp.SPLY_UPRC           = thp.SPLY_UPRC,
               tmp.SPLY_UPRC_USE_YN    = thp.SPLY_UPRC_USE_YN,
               tmp.PO_PROD_FG          = thp.PO_PROD_FG,
               tmp.PO_UNIT_FG          = thp.PO_UNIT_FG,
               tmp.PO_UNIT_QTY         = thp.PO_UNIT_QTY,
               tmp.PO_UNIT_ALLOW_FG    = thp.PO_UNIT_ALLOW_FG,
               tmp.PO_MIN_QTY          = thp.PO_MIN_QTY,
               tmp.SAFE_STOCK_QTY      = thp.SAFE_STOCK_QTY,
               tmp.STOCK_UNIT_FG       = thp.STOCK_UNIT_FG,
               tmp.USE_YN              = thp.USE_YN,
               tmp.REMARK              = thp.REMARK,
               tmp.MOD_DT              = #{modDt},
               tmp.MOD_ID              = #{modId}
        WHEN NOT MATCHED THEN
        INSERT
        (
            tmp.STORE_CD,
            tmp.PROD_CD,
            tmp.PROD_NM,
            tmp.PROD_CLASS_CD,
            tmp.CORNR_CD,
            tmp.ORGPLCE_CD,
            tmp.SDATTR_CLASS_CD,
            tmp.SDSEL_GRP_CD,
            tmp.POINT_SAVE_YN,
            tmp.PROD_DC_FG,
            tmp.VAT_FG,
            tmp.PROD_TIP_YN,
            tmp.PROD_PACK_AMT,
            tmp.PROD_DLVR_AMT,
            tmp.PROD_TYPE_FG,
            tmp.SALE_PROD_YN,
            tmp.STOCK_PROD_YN,
            tmp.SIDE_PROD_YN,
            tmp.SET_PROD_FG,
            tmp.PRC_CTRL_FG,
            tmp.COST_UPRC,
            tmp.LAST_COST_UPRC,
            tmp.SPLY_UPRC,
            tmp.SPLY_UPRC_USE_YN,
            tmp.PO_PROD_FG,
            tmp.PO_UNIT_FG,
            tmp.PO_UNIT_QTY,
            tmp.PO_UNIT_ALLOW_FG,
            tmp.PO_MIN_QTY,
            tmp.SAFE_STOCK_QTY,
            tmp.STOCK_UNIT_FG,
            tmp.USE_YN,
            tmp.REMARK,
            tmp.REG_DT,
            tmp.REG_ID,
            tmp.MOD_DT,
            tmp.MOD_ID
        )
        VALUES
        (
            thp.STORE_CD,
            thp.PROD_CD,
            thp.PROD_NM,
            thp.PROD_CLASS_CD,
            thp.CORNR_CD,
            thp.ORGPLCE_CD,
            thp.SDATTR_CLASS_CD,
            thp.SDSEL_GRP_CD,
            thp.POINT_SAVE_YN,
            thp.PROD_DC_FG,
            thp.VAT_FG,
            thp.PROD_TIP_YN,
            thp.PROD_PACK_AMT,
            thp.PROD_DLVR_AMT,
            thp.PROD_TYPE_FG,
            thp.SALE_PROD_YN,
            thp.STOCK_PROD_YN,
            thp.SIDE_PROD_YN,
            thp.SET_PROD_FG,
            'H',                -- 가격관리구분 (본사에서 매장으로 내려줌)
            thp.COST_UPRC,
            thp.LAST_COST_UPRC,
            thp.SPLY_UPRC,
            thp.SPLY_UPRC_USE_YN,
            thp.PO_PROD_FG,
            thp.PO_UNIT_FG,
            thp.PO_UNIT_QTY,
            thp.PO_UNIT_ALLOW_FG,
            thp.PO_MIN_QTY,
            thp.SAFE_STOCK_QTY,
            thp.STOCK_UNIT_FG,
            thp.USE_YN,
            thp.REMARK,
            #{regDt},
            #{regId},
            #{modDt},
            #{modId}
        )
    </insert>

    <!-- 상품판매가 본사통제여부가 본사인 경우, 본사 판매가 등록시 매장 판매가 등록 -->
    <!--
        TABLE    : TB_MS_PRODUCT_SALE_PRICE, TB_MS_PRODUCT_SALE_PRICE_HISTORY
        PARAM    : prodVO
        COMMENTS : 상품판매가 본사통제여부가 본사인 경우, 본사 판매가 등록시 매장 판매가 등록
    -->
    <select id="saveStoreSalePrice" statementType="CALLABLE"  parameterType="prodVO">
        /* USE : ProdMapper.saveStoreSalePrice */
        {
          CALL PKG_HQ_PRODUCT_SALE_PRICE.SP_HQ_PRODUCT_SALE_PRICE_I
          (
            #{hqOfficeCd},
            #{prodCd},
            #{storeCd},
            #{workMode},
            #{result, mode=OUT, jdbcType=VARCHAR}
          )
        }
    </select>

    <!-- 상품 적용 매장 삭제 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_STORE
        PARAM    : prodVO
        COMMENTS : 본사 쿠폰을 적용한 매장을 삭제한다.
    -->
    <delete id="deleteProdStore" parameterType="prodVO">
        /* USE : ProdMapper.deleteProdStore */
        DELETE TB_HQ_PRODUCT_STORE
         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
           AND PROD_CD = #{prodCd}
           AND STORE_CD = #{storeCd}
    </delete>

    <!-- 상품 매장 적용 삭제시, 해당 상품의 USE_YN 값 변경 -->
    <!--
        TABLE    : TB_MS_PRODUCT
        PARAM    : prodVO
        COMMENTS : 상품 매장 적용 삭제시, 해당 상품의 USE_YN 값 변경
    -->
    <update id="deleteProdStoreDetail" parameterType="prodVO">
        /* USE : ProdMapper.deleteProdStoreDetail */
        UPDATE TB_MS_PRODUCT
           SET USE_YN = 'N'
         WHERE STORE_CD = #{storeCd}
           AND PROD_CD = #{prodCd}
    </update>

    <!-- 판매가 히스토리 등록을 위한 COUNT 조회 -->
    <!--
        TABLE    : TB_MS_PRODUCT_SALE_PRICE
        COMMENTS : 판매가 히스토리 등록을 위한 COUNT 조회한다.
    -->
    <select id="getRegistProdCount" parameterType="salePriceVO" resultType="Integer">
        /* USE : ProdMapper.getRegistProdCount */
        SELECT COUNT(SALE_UPRC) AS CNT
          FROM (
                SELECT STORE_CD, PROD_CD, SALE_PRC_FG,
                       MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC
                  FROM TB_MS_PRODUCT_SALE_PRICE
                 WHERE 1 = 1
                <![CDATA[
                   AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                   AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                ]]>
                   AND SALE_PRC_FG = #{salePrcFg}
                 GROUP BY STORE_CD, PROD_CD, SALE_PRC_FG
               )
         WHERE STORE_CD = #{storeCd}
           AND PROD_CD = #{prodCd}
           AND SALE_UPRC = ${saleUprc}
    </select>


    <!-- 매장 상품 판매가 변경 히스토리 등록 -->
    <!--
        TABLE    : TB_MS_PRODUCT_SALE_PRICE_HISTORY
        COMMENTS : 판매가 변경 히스토리를 등록한다.
    -->
    <insert id="updateStoreSaleUprcHistory"  parameterType="prodVO" >
        /* USE : ProdMapper.updateStoreSaleUprcHistory */
        <![CDATA[
        INSERT INTO TB_MS_PRODUCT_SALE_PRICE_HISTORY
        SELECT SQ_MS_PRODUCT_SALE_PRICE_HISTORY.NEXTVAL,
               STORE_CD,
               PROD_CD,
               SALE_PRC_FG,
               START_DATE,
               END_DATE,
               SALE_UPRC,
               #{regDt},
               #{regId}
          FROM TB_MS_PRODUCT_SALE_PRICE
         WHERE STORE_CD = #{storeCd}
           AND PROD_CD = #{prodCd}
           AND SALE_PRC_FG = #{salePrcFg}
           AND START_DATE = #{startDate}
          ]]>
    </insert>

    <!-- 매장 판매가 변경 -->
    <!--
        TABLE    : TB_MS_PRODUCT_SALE_PRICE
        COMMENTS : 매장 판매가를 일괄 변경한다.
    -->
    <insert id="updateStoreSaleUprc"  parameterType="prodVO" >
        /* USE : ProdMapper.updateStoreSaleUprc */
        MERGE INTO TB_MS_PRODUCT_SALE_PRICE tmpsp
        USING DUAL
        ON (
            tmpsp.STORE_CD = #{storeCd}
            AND tmpsp.PROD_CD = #{prodCd}
            AND tmpsp.SALE_PRC_FG = #{salePrcFg}
            AND tmpsp.START_DATE = TO_CHAR(SYSDATE, 'yyyyMMdd')
        )
        WHEN MATCHED THEN
        UPDATE
        SET
            tmpsp.SALE_UPRC = #{saleUprc},
            tmpsp.MOD_DT = #{modDt},
            tmpsp.MOD_ID = #{modId}
        WHEN NOT MATCHED THEN
        INSERT
        (
            STORE_CD,
            PROD_CD,
            SALE_PRC_FG,
            START_DATE,
            END_DATE,
            SALE_UPRC,
            REG_DT,
            REG_ID,
            MOD_DT,
            MOD_ID
        ) VALUES (
            #{storeCd},
            #{prodCd},
            #{salePrcFg},
            #{startDate},
            #{endDate},
            #{saleUprc},
            #{regDt},
            #{regId},
            #{modDt},
            #{modId}
        )
    </insert>


</mapper>
