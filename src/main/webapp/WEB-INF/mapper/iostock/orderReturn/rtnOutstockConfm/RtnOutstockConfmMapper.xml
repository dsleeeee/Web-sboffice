<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.solbipos.iostock.orderReturn.rtnOutstockConfm.service.impl.RtnOutstockConfmMapper">
    <!-- 반품매장출고 - 매장요청 미확정건, 출고자료 미생성건 조회 -->
    <!--
        TABLE    : TB_MS_STORE, TB_PO_HQ_STORE_ORDER, TB_PO_HQ_STORE_DISTRIBUTE
        PARAM    : rtnOutstockConfmVO
        COMMENTS : 반품매장출고 - 매장요청 미확정건, 출고자료 미생성건을 조회한다.
    -->
    <select id="getReqNoConfirmCnt" parameterType="rtnOutstockConfmVO" resultType="DefaultMap">
        /* USE : RtnOutstockConfmMapper.getReqNoConfirmCnt */
        <![CDATA[
        SELECT	tphso.REQ_NO_CONFIRM_CNT, tphsd.OUTSTOCK_NO_CREATE_CNT
        FROM	(	SELECT  COUNT(*) AS REQ_NO_CONFIRM_CNT
                    FROM    TB_MS_STORE tms
                    ,       TB_PO_HQ_STORE_ORDER tphso
                    WHERE   tms.HQ_OFFICE_CD    =   #{hqOfficeCd}
                    AND     tphso.STORE_CD      =   tms.STORE_CD
                    AND     REQ_DATE    BETWEEN #{startDate} AND #{endDate}
                    AND     PROC_FG     IN      ('00','10')
                ) tphso
        ,		(	SELECT  COUNT(*) AS OUTSTOCK_NO_CREATE_CNT
                    FROM    (   SELECT  tphso.STORE_CD
                                FROM    TB_PO_HQ_STORE_DISTRIBUTE tphso
                                WHERE   tphso.HQ_OFFICE_CD	=       #{hqOfficeCd}
                                AND     tphso.REQ_DATE      BETWEEN #{startDate} AND #{endDate}
                                AND     tphso.SLIP_FG       =       #{slipFg}
                                AND     tphso.PROC_FG       IN      ('00','10','20')
                                GROUP
                                BY      tphso.STORE_CD
                            )
                ) tphsd
        ]]>
    </select>

    <!-- 반품매장출고 - 반품매장출고 리스트 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_OUTSTOCK, TB_MS_STORE, TB_MS_EMPLOYEE
        PARAM    : rtnOutstockConfmVO
        COMMENTS : 반품매장출고 - 반품매장출고 리스트를 조회한다.
    -->
    <select id="getRtnOutstockConfmList" parameterType="rtnOutstockConfmVO" resultType="DefaultMap">
        /* USE : RtnOutstockConfmMapper.getRtnOutstockConfmList */
        <![CDATA[
        SELECT   tphso.SLIP_NO, tphso.VENDR_CD, tphso.SLIP_FG, tphso.SLIP_KIND, tphso.PROC_FG, tphso.STORE_CD, tms.STORE_NM
        ,        tphso.ORDER_TOT_QTY*tphso.SLIP_FG AS ORDER_TOT_QTY, tphso.ORDER_AMT*tphso.SLIP_FG AS ORDER_AMT
        ,        tphso.ORDER_TOT_QTY*tphso.SLIP_FG AS ORDER_TOT_QTY, tphso.ORDER_VAT*tphso.SLIP_FG AS ORDER_VAT
        ,        tphso.ORDER_TOT_QTY*tphso.SLIP_FG AS ORDER_TOT_QTY, tphso.ORDER_TOT*tphso.SLIP_FG AS ORDER_TOT
        ,        tphso.MGR_TOT_QTY  *tphso.SLIP_FG AS MGR_TOT_QTY  , tphso.MGR_AMT  *tphso.SLIP_FG AS MGR_AMT
        ,        tphso.MGR_TOT_QTY  *tphso.SLIP_FG AS MGR_TOT_QTY  , tphso.MGR_VAT  *tphso.SLIP_FG AS MGR_VAT
        ,        tphso.MGR_TOT_QTY  *tphso.SLIP_FG AS MGR_TOT_QTY  , tphso.MGR_TOT  *tphso.SLIP_FG AS MGR_TOT
        ,        (CASE WHEN tphso.PROC_FG <  '20' THEN tphso.OUT_DATE                  ELSE NULL END) AS REQ_DATE
        ,        (CASE WHEN tphso.PROC_FG >= '20' THEN tphso.OUT_DATE                  ELSE NULL END) AS OUT_DATE
        ,        (CASE WHEN tphso.PROC_FG >= '20' THEN tphso.OUT_TOT_QTY*tphso.SLIP_FG ELSE NULL END) AS OUT_TOT_QTY
        ,        (CASE WHEN tphso.PROC_FG >= '20' THEN tphso.OUT_AMT*tphso.SLIP_FG     ELSE NULL END) AS OUT_AMT
        ,        (CASE WHEN tphso.PROC_FG >= '20' THEN tphso.OUT_VAT*tphso.SLIP_FG     ELSE NULL END) AS OUT_VAT
        ,        (CASE WHEN tphso.PROC_FG >= '20' THEN tphso.OUT_TOT*tphso.SLIP_FG     ELSE NULL END) AS OUT_TOT
        ,        (CASE WHEN tphso.PROC_FG >= '30' THEN tphso.IN_DATE                   ELSE NULL END) AS IN_DATE
        ,        (CASE WHEN tphso.PROC_FG >= '30' THEN tphso.IN_TOT_QTY *tphso.SLIP_FG ELSE NULL END) AS IN_TOT_QTY
        ,        (CASE WHEN tphso.PROC_FG >= '30' THEN tphso.IN_AMT *tphso.SLIP_FG     ELSE NULL END) AS IN_AMT
        ,        (CASE WHEN tphso.PROC_FG >= '30' THEN tphso.IN_VAT *tphso.SLIP_FG     ELSE NULL END) AS IN_VAT
        ,        (CASE WHEN tphso.PROC_FG >= '30' THEN tphso.IN_TOT *tphso.SLIP_FG     ELSE NULL END) AS IN_TOT
        ,        (CASE WHEN tphso.PROC_FG >= '20' THEN tphso.OUT_DT                    ELSE NULL END) AS OUT_DT
        ,        (CASE WHEN tphso.PROC_FG >= '20' THEN userInfo.EMP_NM                 ELSE NULL END) AS OUT_NM
        ,        tphso.REMARK, tphso.HQ_REMARK, tphso.DLVR_CD, tphdc.DLVR_NM
        ,        tphsod.PENALTY_AMT
        ,        NVL((SELECT VENDR_NM FROM TB_HQ_VENDOR WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND VENDR_CD = tphso.VENDR_CD), '본사') AS VENDR_NM
        FROM     TB_PO_HQ_STORE_OUTSTOCK tphso
        ,        (  SELECT  tphsod.HQ_OFFICE_CD, tphsod.SLIP_NO, SUM(tphsod.PENALTY_AMT) AS PENALTY_AMT
                    FROM    TB_PO_HQ_STORE_OUTSTOCK tphso
                    ,       TB_PO_HQ_STORE_OUTSTOCK_DTL tphsod
                    WHERE   tphso.HQ_OFFICE_CD  =       #{hqOfficeCd}
                    AND     tphso.OUT_DATE      BETWEEN #{startDate} AND #{endDate}
                    AND     tphsod.HQ_OFFICE_CD = tphso.HQ_OFFICE_CD
                    AND     tphsod.SLIP_NO      = tphso.SLIP_NO
                    ]]>
                    <if test='slipFg != null and slipFg != ""'>
                        AND tphso.SLIP_FG = #{slipFg}
                    </if>
                    <if test='slipKind != null and slipKind != ""'>
                        AND tphso.SLIP_KIND = #{slipKind}
                    </if>
                    <if test='procFg != null and procFg != ""'>
                        AND tphso.PROC_FG = #{procFg}
                    </if>
                    <choose>
                        <when test='vendrCd != null and vendrCd != ""'>
                          AND tphso.VENDR_CD = #{vendrCd}
                        </when>
                        <otherwise>
                          AND tphso.VENDR_CD IS NULL
                        </otherwise>
                    </choose>
                    <if test='dlvrCd != null and dlvrCd != ""'>
                        AND tphso.DLVR_CD = #{dlvrCd}
                    </if>
                    <![CDATA[
                    GROUP
                    BY      tphsod.HQ_OFFICE_CD, tphsod.SLIP_NO
                 ) tphsod
        ,        TB_MS_STORE tms
        ,        (  SELECT  tme.USER_ID, tme.EMP_NM
                    FROM    TB_MS_STORE tms
                    ,       TB_MS_EMPLOYEE tme
                    WHERE   tms.HQ_OFFICE_CD    =   #{hqOfficeCd}
                    AND     tme.STORE_CD        =   tms.STORE_CD
                    UNION
                    SELECT  the.USER_ID, the.EMP_NM
                    FROM    TB_HQ_EMPLOYEE the
                    WHERE   the.HQ_OFFICE_CD    =   #{hqOfficeCd}
                 ) userInfo
        ,        TB_PO_HQ_DELIVERY_CHARGER tphdc
        WHERE    tphso.HQ_OFFICE_CD     =       #{hqOfficeCd}
        AND      tphso.OUT_DATE         BETWEEN #{startDate} AND #{endDate}
        AND      tphsod.HQ_OFFICE_CD    =   tphso.HQ_OFFICE_CD
        AND      tphsod.SLIP_NO         =   tphso.SLIP_NO
        AND      tms.STORE_CD           =   tphso.STORE_CD
        AND      userInfo.USER_ID   (+) =   tphso.MOD_ID
        AND      tphdc.HQ_OFFICE_CD (+) =   tphso.HQ_OFFICE_CD
        AND      tphdc.DLVR_CD      (+) =   tphso.DLVR_CD
        ]]>
        <if test='slipFg != null and slipFg != ""'>
            AND tphso.SLIP_FG = #{slipFg}
        </if>
        <if test='slipKind != null and slipKind != ""'>
            AND tphso.SLIP_KIND = #{slipKind}
        </if>
        <if test='procFg != null and procFg != ""'>
            AND tphso.PROC_FG = #{procFg}
        </if>
        <choose>
            <when test='vendrCd != null and vendrCd != ""'>
              AND tphso.VENDR_CD = #{vendrCd}
            </when>
            <otherwise>
              AND tphso.VENDR_CD IS NULL
            </otherwise>
        </choose>
        <if test='dlvrCd != null and dlvrCd != ""'>
            AND tphso.DLVR_CD = #{dlvrCd}
        </if>
        <if test='storeCd != null and storeCd != ""'>
            AND tms.STORE_CD = #{storeCd}
        </if>
        <if test='storeNm != null and storeNm != ""'>
            AND tms.STORE_NM LIKE '%'||#{storeNm}||'%'
        </if>
        ORDER BY tphso.SLIP_NO
    </select>

    <!-- 반품매장출고 - 전표상세 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_OUTSTOCK, TB_MS_STORE, TB_CM_NMCODE, TB_PO_HQ_DELIVERY_CHARGER
        PARAM    : rtnOutstockConfmVO
        COMMENTS : 반품매장출고 - 전표상세 내역을 조회한다.
    -->
    <select id="getSlipNoInfo" parameterType="rtnOutstockConfmVO" resultType="DefaultMap">
        /* USE : RtnOutstockConfmMapper.getSlipNoInfo */
        <![CDATA[
        SELECT  tphso.*
        ,       tms.STORE_NM
        ,       tcn.NMCODE_NM AS SLIP_KIND_NM
        ,       tphdc.DLVR_NM
        FROM    TB_PO_HQ_STORE_OUTSTOCK tphso
        ,       TB_MS_STORE tms
        ,       TB_CM_NMCODE tcn
        ,       TB_PO_HQ_DELIVERY_CHARGER tphdc
        WHERE   tphso.HQ_OFFICE_CD      =   #{hqOfficeCd}
        AND     tphso.SLIP_NO           =   #{slipNo}
        AND     tms.STORE_CD            =   tphso.STORE_CD
        AND     tcn.NMCODE_GRP_CD   (+) =   '114'
        AND     tcn.NMCODE_CD       (+) =   tphso.SLIP_KIND
        AND     tphdc.HQ_OFFICE_CD  (+) =   tphso.HQ_OFFICE_CD
        AND     tphdc.DLVR_CD       (+) =   tphso.DLVR_CD
        ]]>
    </select>

    <!-- 반품매장출고 - 반품매장출고 DTL 리스트 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_OUTSTOCK, TB_MS_STORE, TB_CM_NMCODE, TB_PO_HQ_DELIVERY_CHARGER
        PARAM    : rtnOutstockConfmVO
        COMMENTS : 반품매장출고 - 반품매장출고 DTL 리스트를 조회한다.
    -->
    <select id="getRtnOutstockConfmDtlList" parameterType="rtnOutstockConfmVO" resultType="DefaultMap">
        /* USE : RtnOutstockConfmMapper.getRtnOutstockConfmDtlList */
        <!--
        SELECT A.SLIP_NO
		      , A.SLIP_FG
		      , A.PROD_CD
		      , A.PROD_NM
		      , A.SEQ
		      , A.PO_UNIT_FG
		      , A.PO_UNIT_QTY
		      , A.PO_UNIT_ALLOW_FG
		      , A.VAT_FG01
		      , A.ORDER_SPLY_UPRC
		      , A.ORDER_UNIT_QTY
		      , A.ORDER_ETC_QTY
		      , A.ORDER_AMT
		      , A.ORDER_VAT
		      , A.ORDER_TOT
		      , A.MGR_SPLY_UPRC
		      , A.MGR_UNIT_QTY
		      , A.MGR_ETC_QTY
		      , A.MGR_AMT
		      , A.MGR_VAT
		      , A.MGR_TOT
		      , A. OUT_SPLY_UPRC
		      , A.OUT_UNIT_QTY
		      , A.OUT_ETC_QTY
		      , A.OUT_TOT_QTY
		      , A.OUT_AMT
		      , A.OUT_VAT
		      , A.OUT_TOT
		      , A.IN_SPLY_UPRC
		      , A.IN_UNIT_QTY
		      , A.IN_ETC_QTY
		      , A.IN_AMT
		      , A.IN_VAT
		      , A.IN_TOT
		      , A.REMARK
		      , A.ENVST0011
		      , A.BARCD_CD
		      , LISTAGG(                                     A.A_STORAGE_CD,                     '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_STORAGE_CD
		      , LISTAGG(                                     A.A_STORAGE_NM,                     '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_STORAGE_NM
		      , LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_UNIT_QTY    ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_UNIT_QTY
		      , LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_ETC_QTY     ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_ETC_QTY
		      , LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_TOT_QTY     ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_TOT_QTY
		      , LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_AMT         ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_AMT
		      , LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_VAT         ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_VAT
		      , LISTAGG(CASE A.PROD_CD WHEN A.A_PROD_CD THEN A.A_ORDER_TOT         ELSE 0 END,   '^')  WITHIN GROUP(ORDER BY A.A_STORAGE_CD)   AS ARR_ORDER_TOT
		FROM(
			SELECT A.SLIP_NO
	              , A.SLIP_FG
	              , A.PROD_CD
	              , A.PROD_NM
	              , A.SEQ
	              , A.PO_UNIT_FG
	              , A.PO_UNIT_QTY
	              , A.PO_UNIT_ALLOW_FG
	              , A.VAT_FG01
	              , A.ORDER_SPLY_UPRC
	              , A.ORDER_UNIT_QTY
	              , A.ORDER_ETC_QTY
	              , A.ORDER_AMT
	              , A.ORDER_VAT
	              , A.ORDER_TOT
	              , A.MGR_SPLY_UPRC
	              , A.MGR_UNIT_QTY
	              , A.MGR_ETC_QTY
	              , A.MGR_AMT
	              , A.MGR_VAT
	              , A.MGR_TOT
	              , A.OUT_SPLY_UPRC
	              , A.OUT_UNIT_QTY
	              , A.OUT_ETC_QTY
	              , A.OUT_TOT_QTY
	              , A.OUT_AMT
	              , A.OUT_VAT
	              , A.OUT_TOT
	              , A.IN_SPLY_UPRC
	              , A.IN_UNIT_QTY
	              , A.IN_ETC_QTY
	              , A.IN_AMT
	              , A.IN_VAT
	              , A.IN_TOT
	              , A.REMARK
	              , A.ENVST0011
	              , A.BARCD_CD
	              , B.PROD_CD       AS  A_PROD_CD
	              , B.STORAGE_CD    AS  A_STORAGE_CD
	              , B.STORAGE_NM    AS  A_STORAGE_NM
	              , B.ORDER_UNIT_QTY   AS  A_ORDER_UNIT_QTY
	              , B.ORDER_ETC_QTY    AS  A_ORDER_ETC_QTY
	              , B.ORDER_TOT_QTY    AS  A_ORDER_TOT_QTY
	              , B.ORDER_AMT        AS  A_ORDER_AMT
	              , B.ORDER_VAT        AS  A_ORDER_VAT
	              , B.ORDER_TOT        AS  A_ORDER_TOT
			FROM(
			        SELECT   tphsod.STORE_CD
			        ,        tphsod.REQ_DATE
			        ,        tphsod.SLIP_NO
			        , 		 tphsod.SLIP_FG
			        , 		 tphsod.PROD_CD
			        , 		 thp.PROD_NM
			        , 		 tphsod.SEQ
			        ,        tphsod.PO_UNIT_FG, tphsod.PO_UNIT_QTY, thp.PO_UNIT_ALLOW_FG
			        ,        DECODE(thp.VAT_FG, '1', 1, 0) AS VAT_FG01
			        ,        tphsod.ORDER_SPLY_UPRC                                                               AS ORDER_SPLY_UPRC
			        ,        TO_NUMBER(DECODE(tphsod.ORDER_UNIT_QTY,0,NULL,tphsod.ORDER_UNIT_QTY*tphsod.SLIP_FG)) AS ORDER_UNIT_QTY
			        ,        TO_NUMBER(DECODE(tphsod.ORDER_ETC_QTY ,0,NULL,tphsod.ORDER_ETC_QTY *tphsod.SLIP_FG)) AS ORDER_ETC_QTY
			        ,        tphsod.ORDER_AMT *tphsod.SLIP_FG                                                     AS ORDER_AMT
			        ,        tphsod.ORDER_VAT *tphsod.SLIP_FG                                                     AS ORDER_VAT
			        ,        tphsod.ORDER_TOT *tphsod.SLIP_FG                                                     AS ORDER_TOT
			        ,        tphsod.MGR_SPLY_UPRC                                                                 AS MGR_SPLY_UPRC
			        ,        TO_NUMBER(DECODE(tphsod.MGR_UNIT_QTY,0,NULL,tphsod.MGR_UNIT_QTY*tphsod.SLIP_FG))     AS MGR_UNIT_QTY
			        ,        TO_NUMBER(DECODE(tphsod.MGR_ETC_QTY ,0,NULL,tphsod.MGR_ETC_QTY *tphsod.SLIP_FG))     AS MGR_ETC_QTY
			        ,        tphsod.MGR_AMT *tphsod.SLIP_FG                                                       AS MGR_AMT
			        ,        tphsod.MGR_VAT *tphsod.SLIP_FG                                                       AS MGR_VAT
			        ,        tphsod.MGR_TOT *tphsod.SLIP_FG                                                       AS MGR_TOT
			        ,        tphsod.OUT_SPLY_UPRC                                                                 AS OUT_SPLY_UPRC
			        ,        TO_NUMBER(DECODE(tphsod.OUT_UNIT_QTY,0,NULL,tphsod.OUT_UNIT_QTY*tphsod.SLIP_FG))     AS OUT_UNIT_QTY
			        ,        TO_NUMBER(DECODE(tphsod.OUT_ETC_QTY ,0,NULL,tphsod.OUT_ETC_QTY *tphsod.SLIP_FG))     AS OUT_ETC_QTY
			        ,        TO_NUMBER(DECODE(tphsod.OUT_TOT_QTY ,0,NULL,tphsod.OUT_TOT_QTY *tphsod.SLIP_FG))     AS OUT_TOT_QTY
			        ,        tphsod.OUT_AMT *tphsod.SLIP_FG                                                       AS OUT_AMT
			        ,        tphsod.OUT_VAT *tphsod.SLIP_FG                                                       AS OUT_VAT
			        ,        tphsod.OUT_TOT *tphsod.SLIP_FG                                                       AS OUT_TOT
			        ,        tphsod.IN_SPLY_UPRC                                                                  AS IN_SPLY_UPRC
			        ,        TO_NUMBER(DECODE(tphsod.IN_UNIT_QTY ,0,NULL,tphsod.IN_UNIT_QTY*tphsod.SLIP_FG))      AS IN_UNIT_QTY
			        ,        TO_NUMBER(DECODE(tphsod.IN_ETC_QTY  ,0,NULL,tphsod.IN_ETC_QTY *tphsod.SLIP_FG))      AS IN_ETC_QTY
			        ,        tphsod.IN_AMT  *tphsod.SLIP_FG                                                       AS IN_AMT
			        ,        tphsod.IN_VAT  *tphsod.SLIP_FG                                                       AS IN_VAT
			        ,        tphsod.IN_TOT  *tphsod.SLIP_FG                                                       AS IN_TOT
			        ,        tphsod.REMARK
			        ,        the.ENVST_VAL AS ENVST0011
			        ,        thpb.BARCD_CD
			        FROM     TB_PO_HQ_STORE_OUTSTOCK_DTL tphsod
			        ,        TB_HQ_PRODUCT thp
			        ,        TB_HQ_PRODUCT_BARCD thpb
			        ,        TB_HQ_ENVST the
			        WHERE    tphsod.HQ_OFFICE_CD    =   #{hqOfficeCd}
			        AND      tphsod.SLIP_NO         =   #{slipNo}
			        AND      thp.HQ_OFFICE_CD       =   tphsod.HQ_OFFICE_CD
			        AND      thp.PROD_CD            =   tphsod.PROD_CD
			        AND      thpb.HQ_OFFICE_CD  (+) =   tphsod.HQ_OFFICE_CD
			        AND      thpb.PROD_CD       (+) =   tphsod.PROD_CD
			        AND      the.HQ_OFFICE_CD       =   #{hqOfficeCd}
			        AND      the.ENVST_CD           =   '0011'
				) A
				LEFT OUTER JOIN
		         (
		             SELECT  X.STORE_CD,
		                     X.STORAGE_CD,
		                     X.STORAGE_NM,
		                     Y.PROD_CD,
		                     #{hqOfficeCd}					AS   HQ_OFFICE_CD,
		                     NVL(Y.REQ_DATE, #{reqDate})   	AS   REQ_DATE,
                         	 NVL(Y.SLIP_FG, 1)         		AS   SLIP_FG,
		                     NVL(Y.ORDER_UNIT_QTY,   0)   	AS   ORDER_UNIT_QTY,
                         	 NVL(Y.ORDER_ETC_QTY,   0)   	AS   ORDER_ETC_QTY,
                         	 NVL(Y.ORDER_TOT_QTY,   0)   	AS   ORDER_TOT_QTY,
                         	 NVL(Y.ORDER_AMT,   0)      	AS   ORDER_AMT,
                         	 NVL(Y.ORDER_VAT,   0)      	AS   ORDER_VAT,
                         	 NVL(Y.ORDER_TOT,   0)      	AS   ORDER_TOT
		              FROM   TB_MS_STORAGE                     X
		             LEFT OUTER JOIN    (
                                SELECT  X.STORE_CD
                                ,       X.PROD_CD
                                ,       NVL(Y.REQ_DATE, #{reqDate})      AS   REQ_DATE
                                ,       NVL(Y.STORAGE_CD, X.STORAGE_CD)  AS STORAGE_CD
                                ,       NVL(Y.SLIP_FG, 1)                AS   SLIP_FG
                                ,       0       AS   ORDER_UNIT_QTY
                                ,       0        AS   ORDER_ETC_QTY
                                ,       0        AS   ORDER_TOT_QTY
                                ,       0            AS   ORDER_AMT
                                ,       0            AS   ORDER_VAT
                                ,       0            AS   ORDER_TOT
                                FROM    TB_ST_STORE_STOCK_CUR    X
                                ,       TB_PO_HQ_STORE_ORDER_PROD       Y
                                WHERE   Y.STORE_CD(+) 		=   X.STORE_CD
                                AND     Y.PROD_CD(+)  	  	=   X.PROD_CD
                                AND     Y.STORAGE_CD(+)   	=   X.STORAGE_CD
                                AND     Y.REQ_DATE(+) 	  	=   #{reqDate}
                                AND     Y.STORE_CD(+) 		=   #{storeCd}
                                AND     X.STORE_CD  		=   #{storeCd}
                                AND     X.STORAGE_CD   		<![CDATA[ >= ]]>  '001'
                                AND     X.STORAGE_CD   		<![CDATA[ <  ]]>  '999'
                     )  Y
                    ON      X.STORE_CD      =   Y.STORE_CD
                    AND     X.STORAGE_CD    =   Y.STORAGE_CD
                    AND     Y.REQ_DATE      =   #{reqDate}
                    AND     Y.STORE_CD      =   #{storeCd}
                    WHERE   X.STORE_CD      =   #{storeCd}
                    AND     X.USE_YN        =   'Y'
                    AND     X.STORAGE_CD   		<![CDATA[ >= ]]>  '001'
                    AND     X.STORAGE_CD   		<![CDATA[ <  ]]>  '999'
		         )   B
				 ON       A.REQ_DATE     =   B.REQ_DATE
         AND      A.STORE_CD     =   B.STORE_CD
         AND      A.PROD_CD      =   (CASE NVL(B.PROD_CD,'X') WHEN 'X' THEN A.PROD_CD ELSE B.PROD_CD END)
		) A
		GROUP BY A.SLIP_NO
	      , A.SLIP_FG
	      , A.PROD_CD
	      , A.PROD_NM
	      , A.SEQ
	      , A.PO_UNIT_FG
	      , A.PO_UNIT_QTY
	      , A.PO_UNIT_ALLOW_FG
	      , A.VAT_FG01
	      , A.ORDER_SPLY_UPRC
	      , A.ORDER_UNIT_QTY
	      , A.ORDER_ETC_QTY
	      , A.ORDER_AMT
	      , A.ORDER_VAT
	      , A.ORDER_TOT
	      , A.MGR_SPLY_UPRC
	      , A.MGR_UNIT_QTY
	      , A.MGR_ETC_QTY
	      , A.MGR_AMT
	      , A.MGR_VAT
	      , A.MGR_TOT
	      , A.OUT_SPLY_UPRC
	      , A.OUT_UNIT_QTY
	      , A.OUT_ETC_QTY
	      , A.OUT_TOT_QTY
	      , A.OUT_AMT
	      , A.OUT_VAT
	      , A.OUT_TOT
	      , A.IN_SPLY_UPRC
	      , A.IN_UNIT_QTY
	      , A.IN_ETC_QTY
	      , A.IN_AMT
	      , A.IN_VAT
	      , A.IN_TOT
	      , A.REMARK
	      , A.ENVST0011
	      , A.BARCD_CD
		ORDER BY       A.PROD_CD, A.SEQ
		-->
			SELECT A.SLIP_NO
	              , A.SLIP_FG
	              , A.PROD_CD
	              , A.PROD_NM
	              , A.SEQ
	              , A.PO_UNIT_FG
	              , A.PO_UNIT_QTY
	              , A.PO_UNIT_ALLOW_FG
	              , A.VAT_FG01
	              , A.ORDER_SPLY_UPRC
	              , A.ORDER_UNIT_QTY
	              , A.ORDER_ETC_QTY
	              , A.ORDER_AMT
	              , A.ORDER_VAT
	              , A.ORDER_TOT
	              , A.MGR_SPLY_UPRC
	              , A.MGR_UNIT_QTY
	              , A.MGR_ETC_QTY
	              , A.MGR_AMT
	              , A.MGR_VAT
	              , A.MGR_TOT
	              , A.OUT_SPLY_UPRC
	              , A.OUT_UNIT_QTY
	              , A.OUT_ETC_QTY
	              , A.OUT_TOT_QTY
	              , A.OUT_AMT
	              , A.OUT_VAT
	              , A.OUT_TOT
	              , A.IN_SPLY_UPRC
	              , A.IN_UNIT_QTY
	              , A.IN_ETC_QTY
	              , A.IN_AMT
	              , A.IN_VAT
	              , A.IN_TOT
	              , A.REMARK
	              , A.ENVST0011
	              , A.BARCD_CD
			FROM(
			        SELECT   tphsod.STORE_CD
			        ,        tphsod.REQ_DATE
			        ,        tphsod.SLIP_NO
			        , 		 tphsod.SLIP_FG
			        , 		 tphsod.PROD_CD
			        , 		 thp.PROD_NM
			        , 		 tphsod.SEQ
			        ,        tphsod.PO_UNIT_FG, tphsod.PO_UNIT_QTY, thp.PO_UNIT_ALLOW_FG
			        ,        DECODE(thp.VAT_FG, '1', 1, 0) AS VAT_FG01
			        ,        tphsod.ORDER_SPLY_UPRC                                                               AS ORDER_SPLY_UPRC
			        ,        TO_NUMBER(DECODE(tphsod.ORDER_UNIT_QTY,0,NULL,tphsod.ORDER_UNIT_QTY*tphsod.SLIP_FG)) AS ORDER_UNIT_QTY
			        ,        TO_NUMBER(DECODE(tphsod.ORDER_ETC_QTY ,0,NULL,tphsod.ORDER_ETC_QTY *tphsod.SLIP_FG)) AS ORDER_ETC_QTY
			        ,        tphsod.ORDER_AMT *tphsod.SLIP_FG                                                     AS ORDER_AMT
			        ,        tphsod.ORDER_VAT *tphsod.SLIP_FG                                                     AS ORDER_VAT
			        ,        tphsod.ORDER_TOT *tphsod.SLIP_FG                                                     AS ORDER_TOT
			        ,        tphsod.MGR_SPLY_UPRC                                                                 AS MGR_SPLY_UPRC
			        ,        TO_NUMBER(DECODE(tphsod.MGR_UNIT_QTY,0,NULL,tphsod.MGR_UNIT_QTY*tphsod.SLIP_FG))     AS MGR_UNIT_QTY
			        ,        TO_NUMBER(DECODE(tphsod.MGR_ETC_QTY ,0,NULL,tphsod.MGR_ETC_QTY *tphsod.SLIP_FG))     AS MGR_ETC_QTY
			        ,        tphsod.MGR_AMT *tphsod.SLIP_FG                                                       AS MGR_AMT
			        ,        tphsod.MGR_VAT *tphsod.SLIP_FG                                                       AS MGR_VAT
			        ,        tphsod.MGR_TOT *tphsod.SLIP_FG                                                       AS MGR_TOT
			        ,        tphsod.OUT_SPLY_UPRC                                                                 AS OUT_SPLY_UPRC
			        ,        TO_NUMBER(DECODE(tphsod.OUT_UNIT_QTY,0,NULL,tphsod.OUT_UNIT_QTY*tphsod.SLIP_FG))     AS OUT_UNIT_QTY
			        ,        TO_NUMBER(DECODE(tphsod.OUT_ETC_QTY ,0,NULL,tphsod.OUT_ETC_QTY *tphsod.SLIP_FG))     AS OUT_ETC_QTY
			        ,        TO_NUMBER(DECODE(tphsod.OUT_TOT_QTY ,0,NULL,tphsod.OUT_TOT_QTY *tphsod.SLIP_FG))     AS OUT_TOT_QTY
			        ,        tphsod.OUT_AMT *tphsod.SLIP_FG                                                       AS OUT_AMT
			        ,        tphsod.OUT_VAT *tphsod.SLIP_FG                                                       AS OUT_VAT
			        ,        tphsod.OUT_TOT *tphsod.SLIP_FG                                                       AS OUT_TOT
			        ,        tphsod.IN_SPLY_UPRC                                                                  AS IN_SPLY_UPRC
			        ,        TO_NUMBER(DECODE(tphsod.IN_UNIT_QTY ,0,NULL,tphsod.IN_UNIT_QTY*tphsod.SLIP_FG))      AS IN_UNIT_QTY
			        ,        TO_NUMBER(DECODE(tphsod.IN_ETC_QTY  ,0,NULL,tphsod.IN_ETC_QTY *tphsod.SLIP_FG))      AS IN_ETC_QTY
			        ,        tphsod.IN_AMT  *tphsod.SLIP_FG                                                       AS IN_AMT
			        ,        tphsod.IN_VAT  *tphsod.SLIP_FG                                                       AS IN_VAT
			        ,        tphsod.IN_TOT  *tphsod.SLIP_FG                                                       AS IN_TOT
			        ,        tphsod.REMARK
			        ,        the.ENVST_VAL AS ENVST0011
			        ,        thpb.BARCD_CD
			        FROM     TB_PO_HQ_STORE_OUTSTOCK_DTL tphsod
			        ,        TB_HQ_PRODUCT thp
			        ,        TB_HQ_PRODUCT_BARCD thpb
			        ,        TB_HQ_ENVST the
			        WHERE    tphsod.HQ_OFFICE_CD    =   #{hqOfficeCd}
			        AND      tphsod.SLIP_NO         =   #{slipNo}
			        AND      thp.HQ_OFFICE_CD       =   tphsod.HQ_OFFICE_CD
			        AND      thp.PROD_CD            =   tphsod.PROD_CD
			        AND      thpb.HQ_OFFICE_CD  (+) =   tphsod.HQ_OFFICE_CD
			        AND      thpb.PROD_CD       (+) =   tphsod.PROD_CD
			        AND      the.HQ_OFFICE_CD       =   #{hqOfficeCd}
			        AND      the.ENVST_CD           =   '0011'
				) A
    </select>

    <!-- 반품매장출고 - 반품매장출고 DTL 수정 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_OUTSTOCK_DTL
        PARAM    : rtnOutstockConfmVO
        COMMENTS : 반품매장출고 - 반품매장출고시 DTL의 진행구분을 수정한다.
    -->
    <update id="updateOutstockDtlConfirm" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.updateOutstockDtlConfirm */
        UPDATE  TB_PO_HQ_STORE_OUTSTOCK_DTL
        SET     PROC_FG         = #{updateProcFg},
        		REQ_DATE        = #{outDate},
                MOD_DT          = #{modDt},
                MOD_ID          = #{modId}
        WHERE   HQ_OFFICE_CD  = #{hqOfficeCd}
        AND     SLIP_NO       = #{slipNo}
    </update>

	<!-- 반품매장출고 - 반품매장출고 PROD 수정 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_OUTSTOCK_PROD
        PARAM    : rtnOutstockConfmVO
        COMMENTS : 반품매장출고 - 반품매장출고시 DTL의 진행구분을 수정한다.
    -->
    <update id="updateOutstockProdConfirm" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.updateOutstockProdConfirm */
        UPDATE  TB_PO_HQ_STORE_OUTSTOCK_PROD
        SET     CONFM_YN        = 'Y',
                MOD_DT          = #{modDt},
                MOD_ID          = #{modId}
        WHERE   HQ_OFFICE_CD  = #{hqOfficeCd}
        AND     SLIP_NO       = #{slipNo}
        AND     OCCR_FG	  	  = '12'
        AND     CONFM_YN      != 'Y'
    </update>

    <!-- 반품매장출고 - 반품매장출고 HD 수정-->
    <!--
        TABLE    : TB_PO_HQ_STORE_OUTSTOCK
        PARAM    : rtnOutstockConfmVO
        COMMENTS : 반품매장출고 - 반품매장출고시 HD의 진행구분을 수정한다.
    -->
    <update id="updateOutstockConfirm" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.updateOutstockConfirm */
        UPDATE  TB_PO_HQ_STORE_OUTSTOCK
        SET     PROC_FG         = #{updateProcFg},
                OUT_DATE        = #{outDate},
                OUT_DT          = #{modDt},
                OUT_ID          = #{modId},
                MOD_DT          = #{modDt},
                MOD_ID          = #{modId}
        WHERE   HQ_OFFICE_CD  = #{hqOfficeCd}
        AND     SLIP_NO       = #{slipNo}
    </update>

    <!-- 반품매장출고 - 반품매장출고 자동입고 DTL 수정 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_OUTSTOCK_DTL
        PARAM    : rtnOutstockConfmVO
        COMMENTS : 반품매장출고 - 반품매장출고시 자동입고 처리 DTL 수정한다.
    -->
    <update id="updateAutoInstockDtl" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.updateAutoInstockDtl */
        UPDATE  TB_PO_HQ_STORE_OUTSTOCK_DTL
        SET     IN_SPLY_UPRC    = OUT_SPLY_UPRC,
                IN_UNIT_QTY     = OUT_UNIT_QTY,
                IN_ETC_QTY      = OUT_ETC_QTY,
                IN_TOT_QTY      = OUT_TOT_QTY,
                IN_AMT          = OUT_AMT,
                IN_VAT          = OUT_VAT,
                IN_TOT          = OUT_TOT,
                PENALTY_CD      = #{penaltyCd},
                PENALTY_AMT     = #{penaltyAmt},
                REMARK          = #{remark},
                MOD_DT          = #{modDt},
                MOD_ID          = #{modId}
        WHERE   HQ_OFFICE_CD  = #{hqOfficeCd}
        AND     SLIP_NO       = #{slipNo}
    </update>

    <!-- 반품매장출고 - 반품매장출고 자동입고 HD 수정 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_OUTSTOCK
        PARAM    : rtnOutstockConfmVO
        COMMENTS : 반품매장출고 - 반품매장출고시 자동입고 처리 HD 수정한다.
    -->
    <update id="updateAutoInstock" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.updateAutoInstock */
        UPDATE  TB_PO_HQ_STORE_OUTSTOCK
        SET     PROC_FG         = #{updateProcFg},
                OUT_DT           = #{modDt},
                OUT_ID           = #{modId},
                IN_DATE         = #{outDate},
                IN_DT           = #{modDt},
                IN_ID           = #{modId},
                IN_UNIT_QTY     = OUT_UNIT_QTY,
                IN_ETC_QTY      = OUT_ETC_QTY,
                IN_TOT_QTY      = OUT_TOT_QTY,
                IN_AMT          = OUT_AMT,
                IN_VAT          = OUT_VAT,
                IN_TOT          = OUT_TOT,
                MOD_DT          = #{modDt},
                MOD_ID          = #{modId}
        WHERE   HQ_OFFICE_CD  = #{hqOfficeCd}
        AND     SLIP_NO       = #{slipNo}
    </update>

    <!-- 반품매장출고 - PROD 입력전에 이전값 삭제 -->
    <!--
        TABLE    : instockConfmProdVO
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품본사입고 - PROD 입력전에 이전값 삭제
    -->
    <delete id="deleteAutoRtnOutstockProdAll" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.deleteAutoRtnOutstockProdAll */
        DELETE  TB_PO_HQ_STORE_OUTSTOCK_PROD
        WHERE   HQ_OFFICE_CD  =     #{hqOfficeCd}
        AND     SLIP_NO       =     #{slipNo}
        AND     CONFM_YN      !=    'Y'
    </delete>

    <!-- 반품매장출고 - 창고별 입고상품 저장  ( TB_PO_HQ_STORE_OUTSTOCK_PROD - [본사_수불] 출고전표_매장출고내역_상품 )
               TABLE    : TB_PO_HQ_STORE_OUTSTOCK_PROD
               PARAM    : instockConfmProdVO
               COMMENTS : 입고확정(또는 저장)시, 창고별 입고상품 정보를 저장한다.
       -->
    <update id="mergeAutoRtnOutstockConfmProd" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.mergeAutoRtnOutstockConfmProd */
        MERGE INTO TB_PO_HQ_STORE_OUTSTOCK_PROD A
        USING (
                    SELECT
                    HQ_OFFICE_CD,
                    SLIP_NO,
                    PROD_CD,
                    '001' AS STORAGE_CD,
                    '02' AS OCCR_FG,
                    STORE_CD,
                    SLIP_FG,
                    'N' AS CONFM_YN,
                    SUM(IN_UNIT_QTY) AS IN_UNIT_QTY,
                    SUM(IN_ETC_QTY) AS IN_ETC_QTY,
                    SUM(IN_TOT_QTY) AS IN_TOT_QTY,
                    SUM(IN_AMT) AS IN_AMT,
                    SUM(IN_VAT) AS IN_VAT,
                    SUM(IN_TOT) AS IN_TOT,
                    #{regDt} AS REG_DT,
                    #{regId} AS REG_ID,
                    #{modDt} AS MOD_DT,
                    #{modId} AS MOD_ID
                    FROM TB_PO_HQ_STORE_OUTSTOCK_DTL
                    WHERE HQ_OFFICE_CD	= #{hqOfficeCd}
                    AND   SLIP_NO		= #{slipNo}
                    GROUP BY HQ_OFFICE_CD, SLIP_NO, PROD_CD, STORE_CD, SLIP_FG
                ) B
                ON (A.HQ_OFFICE_CD = B.HQ_OFFICE_CD AND A.SLIP_NO = B.SLIP_NO AND A.PROD_CD = B.PROD_CD AND A.STORAGE_CD = B.STORAGE_CD AND A.OCCR_FG = B.OCCR_FG)
        WHEN MATCHED THEN
            UPDATE
            SET	A.IN_UNIT_QTY	= B.IN_UNIT_QTY,
                A.IN_ETC_QTY	= B.IN_ETC_QTY,
                A.IN_TOT_QTY	= B.IN_TOT_QTY,
                A.IN_AMT		= B.IN_AMT,
                A.IN_VAT		= B.IN_VAT,
                A.IN_TOT		= B.IN_TOT,
                A.MOD_DT    	= B.MOD_DT,
                A.MOD_ID    	= B.MOD_ID
        WHEN NOT MATCHED THEN
            INSERT  (
                A.HQ_OFFICE_CD,
                A.SLIP_NO,
                A.PROD_CD,
                A.STORAGE_CD,
                A.OCCR_FG,
                A.STORE_CD,
                A.SLIP_FG,
                A.CONFM_YN,
                A.IN_UNIT_QTY,
                A.IN_ETC_QTY,
                A.IN_TOT_QTY,
                A.IN_AMT,
                A.IN_VAT,
                A.IN_TOT,
                A.REG_DT,
                A.REG_ID,
                A.MOD_DT,
                A.MOD_ID
            ) VALUES (
                B.HQ_OFFICE_CD,
                B.SLIP_NO,
                B.PROD_CD,
                B.STORAGE_CD,
                B.OCCR_FG,
                B.STORE_CD,
                B.SLIP_FG,
                B.CONFM_YN,
                B.IN_UNIT_QTY,
                B.IN_ETC_QTY,
                B.IN_TOT_QTY,
                B.IN_AMT,
                B.IN_VAT,
                B.IN_TOT,
                B.REG_DT,
                B.REG_ID,
                B.MOD_DT,
                B.MOD_ID
            )
    </update>

    <!-- 반품매장출고 - 반품본사입고 상세 리스트 HD 수정-->
    <!--
        TABLE    : TB_PO_HQ_STORE_OUTSTOCK
        PARAM    : rtnInstockConfmVO
        COMMENTS : 반품본사입고 - 반품본사입고 상세 리스트 HD의 집계를 수정한다.
    -->
    <update id="updateAutoRtnOutstockConfmHd" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.updateAutoRtnOutstockConfmHd */
        UPDATE  TB_PO_HQ_STORE_OUTSTOCK
        SET     (   IN_UNIT_QTY, IN_ETC_QTY, IN_TOT_QTY, IN_AMT, IN_VAT, IN_TOT)
            =   (   SELECT  SUM(IN_UNIT_QTY), SUM(IN_ETC_QTY), SUM(IN_TOT_QTY), SUM(IN_AMT), SUM(IN_VAT), SUM(IN_TOT)
                    FROM    TB_PO_HQ_STORE_OUTSTOCK_DTL
                    WHERE   HQ_OFFICE_CD    =   #{hqOfficeCd}
                    AND     SLIP_NO         =   #{slipNo}
                ),
                REMARK      = #{hdRemark},
                MOD_DT      = #{modDt},
                MOD_ID      = #{modId}
        WHERE   HQ_OFFICE_CD  =   #{hqOfficeCd}
        AND     SLIP_NO       =   #{slipNo}
    </update>

    <!-- 반품매장출고 - 입고확정상태 확인 PROC_FG > 20 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_OUTSTOCK_DTL
        PARAM    : rtnInstockConfmVO
        COMMENTS : 입고확정 - 입고확정 전에 입고확정상태 확인
    -->
    <select id="getAutoRtnOutstockConfirmCnt" parameterType="rtnOutstockConfmVO" resultType="Integer">
		/* USE : RtnOutstockConfmMapper.getAutoRtnOutstockConfirmCnt */
		SELECT  COUNT(1) AS CNT
		FROM    TB_PO_HQ_STORE_OUTSTOCK
		WHERE   HQ_OFFICE_CD    =   #{hqOfficeCd}
		AND     SLIP_NO         =   #{slipNo}
		AND     PROC_FG         >   '20'
	</select>

    <!-- 반품매장출고 - 반품본사입고시 DTL 수정 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_OUTSTOCK_DTL
        PARAM    : rtnInstockConfmVO
        COMMENTS : 반품본사입고 - 반품본사입고시 DTL의 진행구분을 수정한다.
    -->
    <update id="updateRtnOutstockDtlConfirm" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.updateRtnOutstockDtlConfirm */
        UPDATE  TB_PO_HQ_STORE_OUTSTOCK_DTL
        SET     PROC_FG         = #{updateProcFg},
                MOD_DT          = #{modDt},
                MOD_ID          = #{modId}
        WHERE   HQ_OFFICE_CD  = #{hqOfficeCd}
        AND     SLIP_NO       = #{slipNo}
    </update>

    <!-- 반품매장출고 - 반품본사입고 PROD 확정 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_OUTSTOCK_PROD
        PARAM    : rtnInstockConfmVO
        COMMENTS : 반품본사입고 - 반품본사입고시 PROD의 진행구분을 수정한다.
    -->
    <update id="updateRtnOutstockProdConfirm" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.updateRtnOutstockProdConfirm */
        UPDATE  TB_PO_HQ_STORE_OUTSTOCK_PROD
        SET     CONFM_YN        = 'Y',
                MOD_DT          = #{modDt},
                MOD_ID          = #{modId}
        WHERE   HQ_OFFICE_CD  = #{hqOfficeCd}
        AND     SLIP_NO       = #{slipNo}
        AND     OCCR_FG	  	  = '02'
        AND     CONFM_YN      != 'Y'
    </update>

    <!-- 반품매장출고 - 반품매장출고 상세 리스트 DTL 수정 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_OUTSTOCK_DTL
        PARAM    : rtnOutstockConfmVO
        COMMENTS : 반품매장출고 - 반품매장출고 상세 리스트 DTL을 수정한다.
    -->
    <update id="updateRtnOutstockConfmDtl" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.updateRtnOutstockConfmDtl */
        UPDATE  TB_PO_HQ_STORE_OUTSTOCK_DTL
        SET     OUT_SPLY_UPRC   = #{outSplyUprc},
                OUT_UNIT_QTY    = #{outUnitQty},
                OUT_ETC_QTY     = #{outEtcQty},
                OUT_TOT_QTY     = #{outTotQty},
                OUT_AMT         = #{outAmt},
                OUT_VAT         = #{outVat},
                OUT_TOT         = #{outTot},
                REMARK          = #{remark},
                MOD_DT          = #{modDt},
                MOD_ID          = #{modId}
        WHERE   HQ_OFFICE_CD  = #{hqOfficeCd}
        AND     SLIP_NO       = #{slipNo}
        AND     SEQ           = #{seq}
    </update>

    <!-- 반품매장출고 - 반품매장출고 상세 리스트 HD 수정-->
    <!--
        TABLE    : TB_PO_HQ_STORE_OUTSTOCK
        PARAM    : rtnOutstockConfmVO
        COMMENTS : 반품매장출고 - 반품매장출고 상세 리스트 HD의 집계를 수정한다.
    -->
    <update id="updateRtnOutstockConfmHd" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.updateRtnOutstockConfmHd */
        UPDATE  TB_PO_HQ_STORE_OUTSTOCK
        SET     (   OUT_UNIT_QTY, OUT_ETC_QTY, OUT_TOT_QTY, OUT_AMT, OUT_VAT, OUT_TOT)
            =   (   SELECT  SUM(OUT_UNIT_QTY), SUM(OUT_ETC_QTY), SUM(OUT_TOT_QTY), SUM(OUT_AMT), SUM(OUT_VAT), SUM(OUT_TOT)
                    FROM    TB_PO_HQ_STORE_OUTSTOCK_DTL
                    WHERE   HQ_OFFICE_CD    =   #{hqOfficeCd}
                    AND     SLIP_NO         =   #{slipNo}
                ),
                REMARK      = #{hdRemark},
                HQ_REMARK   = #{hqRemark},
                DLVR_CD     = #{dlvrCd},
                MOD_DT      = #{modDt},
                MOD_ID      = #{modId}
        WHERE   HQ_OFFICE_CD  =   #{hqOfficeCd}
        AND     SLIP_NO       =   #{slipNo}
    </update>

    <!-- 반품매장출고 - 반품매장출고 이후 저장시 HD 수정 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_OUTSTOCK
        PARAM    : rtnOutstockConfmVO
        COMMENTS : 반품매장출고 - 반품매장출고 이후 저장시 HD의 비고, 본사비고, 배송기사를 수정한다.
    -->
    <update id="updateOutstockAfterHd" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.updateOutstockAfterHd */
        UPDATE  TB_PO_HQ_STORE_OUTSTOCK
        SET     REMARK      = #{hdRemark},
                HQ_REMARK   = #{hqRemark},
                DLVR_CD     = #{dlvrCd},
                MOD_DT      = #{modDt},
                MOD_ID      = #{modId}
        WHERE   HQ_OFFICE_CD  =   #{hqOfficeCd}
        AND     SLIP_NO       =   #{slipNo}
    </update>

    <update id="updateRtnStoreOrderProd" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.updateRtnStoreOrderProd */
	    UPDATE  TB_PO_HQ_STORE_ORDER_PROD
        SET     (
              		 PO_UNIT_QTY
              		,ORDER_UNIT_QTY
              		,ORDER_ETC_QTY
              		,ORDER_TOT_QTY
              		,ORDER_AMT
              		,ORDER_VAT
              		,ORDER_TOT
				 )
            =   ( SELECT  (PO_UNIT_QTY)+#{poUnitQty}
            			, (ORDER_UNIT_QTY)+#{orderUnitQty}
            			, (ORDER_ETC_QTY)+#{orderEtcQty}
            			, (ORDER_TOT_QTY)+#{orderTotQty}
                        , (ORDER_AMT)+#{orderAmt}
            			, (ORDER_VAT)+#{orderVat}
            			, (ORDER_TOT)+#{orderTot}
            	  FROM TB_PO_HQ_STORE_ORDER_PROD
				  WHERE REQ_DATE = #{reqDate}
				  AND STORE_CD = #{storeCd}
				  AND SLIP_FG = #{slipFg}
				  AND PROD_CD = #{prodCd}
				  AND STORAGE_CD = #{storageCd}
                )
        ,       MOD_DT  = #{modDt}
        ,       MOD_ID  = #{modId}
		WHERE REQ_DATE = #{reqDate}
		AND STORE_CD = #{storeCd}
		AND SLIP_FG = #{slipFg}
		AND PROD_CD = #{prodCd}
		AND STORAGE_CD = #{storageCd}
	</update>

	<!-- 반품등록 - PROD 입력전에 이전값 삭제 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_OUTSTOCK_PROD
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 - PROD 입력전에 이전값 삭제
    -->
    <delete id="deleteRtnOutStockProdAll" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.deleteRtnOutStockProdAll */
        DELETE  TB_PO_HQ_STORE_OUTSTOCK_PROD
        WHERE   HQ_OFFICE_CD  =     #{hqOfficeCd}
        AND     SLIP_NO       =     #{slipNo}
        AND     CONFM_YN      !=    'Y'
    </delete>


    <!-- 반품등록 - PROD -->
    <!--
        TABLE    : TB_PO_HQ_STORE_OUTSTOCK_PROD
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 저장시, 창고별 입고상품 정보를 저장한다.
    -->
	<update id="mergeRtnOutStockProd" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.mergeRtnOutStockProd */
	    MERGE INTO TB_PO_HQ_STORE_OUTSTOCK_PROD	A
	    USING DUAL ON           (
	                                    A.HQ_OFFICE_CD	    = #{hqOfficeCd}
	                                    AND A.SLIP_NO		= #{slipNo}
	                                    AND A.PROD_CD  		= #{prodCd}
	                                    AND A.STORAGE_CD  	= #{storageCd}
	                                    AND A.OCCR_FG		= '12'
	                            )
	    WHEN     MATCHED THEN   UPDATE	SET	A.CONFM_YN      = 'N',
	    									A.IN_UNIT_QTY	= A.IN_UNIT_QTY	+#{outUnitQty},
											A.IN_ETC_QTY	= A.IN_ETC_QTY	+#{outEtcQty},
											A.IN_TOT_QTY	= A.IN_TOT_QTY	+#{outTotQty},
											A.IN_AMT		= A.IN_AMT		+#{outAmt},
											A.IN_VAT		= A.IN_VAT		+#{outVat},
											A.IN_TOT		= A.IN_TOT		+#{outTot},
	                                        A.MOD_DT    	= #{modDt},
	                                        A.MOD_ID    	= #{modId}
	    WHEN NOT MATCHED THEN   INSERT  (
											A.HQ_OFFICE_CD,
											A.SLIP_NO,
											A.PROD_CD,
											A.STORAGE_CD,
											A.OCCR_FG,
											A.STORE_CD,
											A.SLIP_FG,
											A.CONFM_YN,
											A.IN_UNIT_QTY,
											A.IN_ETC_QTY,
											A.IN_TOT_QTY,
											A.IN_AMT,
											A.IN_VAT,
											A.IN_TOT,
											A.REG_DT,
											A.REG_ID,
											A.MOD_DT,
											A.MOD_ID
	                                    )
	                            VALUES  (
	                                        #{hqOfficeCd},
											#{slipNo},
											#{prodCd},
											#{storageCd},
											'12',		<!-- 발생구분(30:매장입고) -->
											#{storeCd},
											#{slipFg},
											'N',
											#{outUnitQty},
											#{outEtcQty},
											#{outTotQty},
											#{outAmt},
											#{outVat},
											#{outTot},
	                                        #{regDt},
	                                        #{regId},
	                                        #{modDt},
	                                        #{modId}
	                                    )
	</update>


	<!-- 반품등록 반품상품 PROD 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_PROD
        PARAM    : rtnStoreOrderDtlVO
        COMMENTS : 반품등록 반품상품 PROD를 등록한다.
    -->
    <insert id="saveRtnStoreOrderProd" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.saveRtnStoreOrderProd */
       MERGE INTO TB_PO_HQ_STORE_ORDER_PROD TPHSOP
        USING DUAL
           ON (TPHSOP.REQ_DATE = #{reqDate} AND TPHSOP.STORE_CD = #{storeCd} AND TPHSOP.SLIP_FG = -1 AND TPHSOP.PROD_CD = #{prodCd} AND TPHSOP.STORAGE_CD = #{storageCd})
         WHEN MATCHED THEN
       UPDATE
          SET TPHSOP.PO_UNIT_QTY 	= #{poUnitQty},
              TPHSOP.ORDER_SPLY_UPRC= #{outSplyUprc},
              TPHSOP.ORDER_UNIT_QTY	= #{orderUnitQty},
              TPHSOP.ORDER_ETC_QTY	= #{orderEtcQty},
              TPHSOP.ORDER_TOT_QTY	= #{orderTotQty},
              TPHSOP.ORDER_AMT		= #{orderStorageAmt},
              TPHSOP.ORDER_VAT		= #{orderStorageVat},
              TPHSOP.ORDER_TOT		= #{orderStorageTot},
              TPHSOP.MOD_DT 		= #{modDt},
              TPHSOP.MOD_ID 		= #{modId}
         WHEN NOT MATCHED THEN
         INSERT
         (
         	 TPHSOP.STORAGE_CD,
         	 TPHSOP.PROD_CD,
         	 TPHSOP.SLIP_FG,
         	 TPHSOP.REQ_DATE,
         	 TPHSOP.STORE_CD,
             TPHSOP.PO_UNIT_FG ,
             TPHSOP.PO_UNIT_QTY,
             TPHSOP.ORDER_SPLY_UPRC,
             TPHSOP.ORDER_UNIT_QTY,
             TPHSOP.ORDER_ETC_QTY,
             TPHSOP.ORDER_TOT_QTY,
             TPHSOP.ORDER_AMT,
             TPHSOP.ORDER_VAT,
             TPHSOP.ORDER_TOT,
             TPHSOP.REG_DT,
             TPHSOP.REG_ID,
             TPHSOP.MOD_DT,
             TPHSOP.MOD_ID
         )
         VALUES
         (
         	 #{storageCd},
         	 #{prodCd},
         	 '1',
         	 #{reqDate},
         	 #{storeCd},
             #{poUnitFg},
             #{poUnitQty},
             #{outSplyUprc},
             #{orderUnitQty},
             #{orderEtcQty},
             #{orderTotQty},
             #{orderStorageAmt},
             #{orderStorageVat},
             #{orderStorageTot},
             #{regDt},
             #{regId},
             #{modDt},
             #{modId}
         )
    </insert>

	<insert id="insertOutStockProd" parameterType="rtnOutstockConfmVO">
        /* USE : RtnOutstockConfmMapper.insertOutStockProd */
        INSERT INTO TB_PO_HQ_STORE_OUTSTOCK_PROD
        (
        	HQ_OFFICE_CD
			,SLIP_NO
			,PROD_CD
			,STORAGE_CD
			,OCCR_FG
			,STORE_CD
			,SLIP_FG
			,IN_UNIT_QTY
			,IN_ETC_QTY
			,IN_TOT_QTY
			,IN_AMT
			,IN_VAT
			,IN_TOT
			,REG_DT
			,REG_ID
			,MOD_DT
			,MOD_ID
        )
        SELECT
        	#{hqOfficeCd}
        	,   #{slipNo}
        	,	PROD_CD
        	,	STORAGE_CD
        	,	'12'
        	,   STORE_CD
        	,	'-1'
 			,	ORDER_UNIT_QTY
 			,  	ORDER_ETC_QTY
  			,	ORDER_TOT_QTY
  			,	ORDER_AMT
  			,	ORDER_VAT
  			,	ORDER_TOT
        	,   #{regDt}
        	,   #{regId}
        	,   #{modDt}
        	,   #{modId}
        FROM    TB_PO_HQ_STORE_ORDER_PROD
        WHERE   REQ_DATE    =   #{reqDate}
        AND     STORE_CD    =   #{storeCd}

    </insert>

	<delete id="deleteOrderProd" parameterType="rtnOutstockConfmVO">
		/* USE : RtnDstbCloseProdMapper.deleteOrderProd */
        DELETE  TB_PO_HQ_STORE_ORDER_PROD
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = '-1'
	</delete>

	<delete id="deleteOutStockProd" parameterType="rtnOutstockConfmVO">
		/* USE : RtnDstbCloseProdMapper.deleteOutStockProd */
        DELETE  TB_PO_HQ_STORE_OUTSTOCK_PROD
        WHERE   HQ_OFFICE_CD    = #{hqOfficeCd}
        AND     STORE_CD		= #{storeCd}
        AND     SLIP_NO    		= #{slipNo}
        AND     SLIP_FG     	= '-1'
	</delete>
</mapper>
