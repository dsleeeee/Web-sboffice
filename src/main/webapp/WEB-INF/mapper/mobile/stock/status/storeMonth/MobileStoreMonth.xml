<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    MobileStoreMonth.xml
    매장월수불
    ======================================================
    No  ||  수정자 ||  수정일자    ||  수정내역
    ======================================================
    1       김유승     2024.07.23     최초작성
-->

<mapper namespace="kr.co.solbipos.mobile.stock.status.storeMonth.service.impl.MobileStoreMonthMapper">

    <!-- 매장월수불 - 리스트 조회 -->
    <!--
        TABLE    : TB_ST_STORE_STOCK_MONTHLY, TB_MS_PRODUCT, TB_MS_PRODUCT_BARCD, TB_HQ_PRODUCT_CLASS
        PARAM    : mobileStoreMonthVO
        COMMENTS : 매장월수불현황 - 리스트를 조회한다.
    -->
    <select id="stockStoreMonthList" parameterType="mobileStoreMonthVO" resultType="DefaultMap">
        /* MobileStoreMonthMapper.stockStoreMonthList */
        <include refid="CmmSQL.PagingTemplateHeader"/>
        SELECT A.*
        , (SELECT NMCODE_NM FROM TB_HQ_NMCODE WHERE NMCODE_GRP_CD = '093' AND HQ_OFFICE_CD = #{hqOfficeCd} AND NMCODE_CD = A.PO_UNIT_FG)  AS PO_UNIT_FG_NM      /* 본사 가상로그인시 */
        <include refid="CmmSQL.PagingTemplateCount"/>
        FROM (
        SELECT FN_GET_PROD_CLASS_CD_NM_STR(TMP.STORE_CD, TMP.PROD_CLASS_CD, 'NM_STR') AS PROD_CLASS_NM
        , TPSSM.PROD_CD
        , TMP.PROD_NM
        , TPSSM.STORE_CD
        , (SELECT STORE_NM FROM TB_MS_STORE Z WHERE Z.STORE_CD = TPSSM.STORE_CD) AS STORE_NM
        , TPSSM.PO_UNIT_QTY
        , TMP.PO_UNIT_FG
        , TMPB.BARCD_CD
        <if test='unitFg == "1"'>
            , SF_ZERO_TO_NULL(SUM(TPSSM.BASE_QTY / TMP.PO_UNIT_QTY)         ) AS BASE_QTY            /* 기초재고수량 */
            , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_IN_QTY / TMP.PO_UNIT_QTY)     ) AS STORE_IN_QTY        /* 매장입고 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_OUT_QTY / TMP.PO_UNIT_QTY)    ) AS STORE_OUT_QTY       /* 매장반품 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.PURCHS_IN_QTY / TMP.PO_UNIT_QTY)    ) AS PURCHS_IN_QTY       /* 사입입고 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.PURCHS_OUT_QTY / TMP.PO_UNIT_QTY)   ) AS PURCHS_OUT_QTY      /* 사입반품 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_SALE_QTY / TMP.PO_UNIT_QTY)   ) AS STORE_SALE_QTY      /* 매장판매 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.MOVE_IN_QTY / TMP.PO_UNIT_QTY)      ) AS MOVE_IN_QTY         /* 매장이입 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.MOVE_OUT_QTY / TMP.PO_UNIT_QTY)     ) AS MOVE_OUT_QTY        /* 매장이출 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.DISUSE_QTY / TMP.PO_UNIT_QTY)       ) AS DISUSE_QTY          /* 재고폐기 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.ADJ_QTY / TMP.PO_UNIT_QTY)          ) AS ADJ_QTY             /* 재고조정 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.SET_IN_QTY / TMP.PO_UNIT_QTY)       ) AS SET_IN_QTY          /* 세트생성 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.CLOSE_QTY / TMP.PO_UNIT_QTY)        ) AS CLOSE_QTY           /* 기말재고수량 */
        </if>
        <if test='unitFg == "0"'>
            , SF_ZERO_TO_NULL(SUM(TPSSM.BASE_QTY)         ) AS BASE_QTY        /* 기초재고수량 */
            , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_IN_QTY)     ) AS STORE_IN_QTY  /* 매장입고 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_OUT_QTY)    ) AS STORE_OUT_QTY  /* 매장반품 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.PURCHS_IN_QTY)    ) AS PURCHS_IN_QTY  /* 사입입고 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.PURCHS_OUT_QTY)   ) AS PURCHS_OUT_QTY  /* 사입반품 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_SALE_QTY)   ) AS STORE_SALE_QTY  /* 매장판매 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.MOVE_IN_QTY)      ) AS MOVE_IN_QTY  /* 매장이입 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.MOVE_OUT_QTY)     ) AS MOVE_OUT_QTY  /* 매장이출 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.DISUSE_QTY)       ) AS DISUSE_QTY  /* 재고폐기 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.ADJ_QTY)          ) AS ADJ_QTY  /* 재고조정 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.SET_IN_QTY)       ) AS SET_IN_QTY  /* 세트생성 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.CLOSE_QTY)        ) AS CLOSE_QTY       /* 기말재고수량 */
        </if>
        , SF_ZERO_TO_NULL(SUM(TPSSM.BASE_AMT)         ) AS BASE_AMT         /* 기초재고금액 */
        , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_IN_TOT)     ) AS STORE_IN_TOT   /* 매장입고 금액*/
        , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_OUT_TOT)    ) AS STORE_OUT_TOT   /* 매장반품 금액*/
        , SF_ZERO_TO_NULL(SUM(TPSSM.PURCHS_IN_TOT)    ) AS PURCHS_IN_TOT   /* 사입입고 금액*/
        , SF_ZERO_TO_NULL(SUM(TPSSM.PURCHS_OUT_TOT)   ) AS PURCHS_OUT_TOT   /* 사입반품 금액*/
        , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_SALE_TOT)   ) AS STORE_SALE_TOT   /* 매장판매 금액*/
        , SF_ZERO_TO_NULL(SUM(TPSSM.MOVE_IN_TOT)      ) AS MOVE_IN_TOT   /* 매장이입 금액*/
        , SF_ZERO_TO_NULL(SUM(TPSSM.MOVE_OUT_TOT)     ) AS MOVE_OUT_TOT   /* 매장이출 금액*/
        , SF_ZERO_TO_NULL(SUM(TPSSM.CLOSE_AMT)        ) AS CLOSE_AMT        /* 기말재고금액 */
        , #{startDate} AS START_DATE
        FROM TB_ST_STORE_STOCK_MONTHLY TPSSM
        , TB_MS_PRODUCT TMP
        , TB_MS_PRODUCT_BARCD TMPB
        WHERE TPSSM.STORE_CD     = TMP.STORE_CD
        AND TPSSM.PROD_CD      = TMP.PROD_CD
        AND EXISTS (SELECT * FROM TB_MS_STORE Z WHERE Z.STORE_CD = TPSSM.STORE_CD AND Z.HQ_OFFICE_CD = #{hqOfficeCd})
        AND TPSSM.STORE_CD     = TMPB.STORE_CD(+)
        AND TPSSM.PROD_CD      = TMPB.PROD_CD(+)
        AND TMP.STOCK_PROD_YN = 'Y'
        AND TMP.USE_YN = 'Y'
        <if test='startDate != null and startDate != ""'>
            AND TPSSM.IOSTOCK_YM  = #{startDate}
        </if>
        <if test='prodCd != null and prodCd != ""'>
            AND TMP.PROD_CD LIKE '%'||#{prodCd}||'%'
        </if>
        <if test='storeCdQuery != null and storeCdQuery != ""'>
            AND TPSSM.STORE_CD IN (${storeCdQuery})
        </if>
        <if test='arrVendrCd != null and arrVendrCd != ""'>
            AND TMP.PROD_CD IN    ( SELECT  PROD_CD
            FROM    TB_MS_VENDOR_PROD
            WHERE   STORE_CD = TPSSM.STORE_CD
            AND     VENDR_CD IN
            <foreach collection="arrVendrCd" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
            )
        </if>
        <if test='prodClassCd != null and prodClassCd != ""'>
            AND TMP.PROD_CLASS_CD  IN (
            SELECT              PROD_CLASS_CD
            FROM                TB_HQ_PRODUCT_CLASS
            WHERE               HQ_OFFICE_CD    = #{hqOfficeCd}
            START WITH          PROD_CLASS_CD   = #{prodClassCd}
            AND                 HQ_OFFICE_CD    = #{hqOfficeCd}
            CONNECT BY PRIOR    PROD_CLASS_CD   = P_PROD_CLASS_CD
            AND                 HQ_OFFICE_CD    = #{hqOfficeCd}
            )
        </if>
        <if test='prodNm != null and prodNm != ""'>
            AND TMP.PROD_NM  LIKE '%'||#{prodNm}||'%'
        </if>
        <if test='barcdCd != null and barcdCd != ""'>
            AND TMPB.BARCD_CD  = #{barcdCd}
        </if>
        GROUP BY  TMP.STORE_CD
        , TMP.PROD_CLASS_CD
        , TPSSM.PROD_CD
        , TMP.PROD_NM
        , TPSSM.STORE_CD
        , TPSSM.PO_UNIT_QTY
        , TMP.PO_UNIT_FG
        , TMPB.BARCD_CD
        ORDER BY TPSSM.PROD_CD
        , TPSSM.STORE_CD
        ) A
        <include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <!-- 매장월수불 - 리스트 조회 -->
    <!--
        TABLE    : TB_ST_STORE_STOCK_MONTHLY, TB_MS_PRODUCT, TB_MS_PRODUCT_BARCD, TB_HQ_PRODUCT_CLASS
        PARAM    : mobileStoreMonthVO
        COMMENTS : 매장월수불현황 - 리스트를 조회한다.
    -->
    <select id="stockStoreMonthExcelList" parameterType="mobileStoreMonthVO" resultType="DefaultMap">
        /* MobileStoreMonthMapper.stockStoreMonthExcelList */
        SELECT A.*
        , (SELECT NMCODE_NM FROM TB_HQ_NMCODE WHERE NMCODE_GRP_CD = '093' AND HQ_OFFICE_CD = #{hqOfficeCd} AND NMCODE_CD = A.PO_UNIT_FG)  AS PO_UNIT_FG_NM      /* 본사 가상로그인시 */
        FROM (
        SELECT FN_GET_PROD_CLASS_CD_NM_STR(TMP.STORE_CD, TMP.PROD_CLASS_CD, 'NM_STR') AS PROD_CLASS_NM
        , TPSSM.PROD_CD
        , TMP.PROD_NM
        , TPSSM.STORE_CD
        , (SELECT STORE_NM FROM TB_MS_STORE Z WHERE Z.STORE_CD = TPSSM.STORE_CD) AS STORE_NM
        , TPSSM.PO_UNIT_QTY
        , TMP.PO_UNIT_FG
        , TMPB.BARCD_CD
        <if test='unitFg == "1"'>
            , SF_ZERO_TO_NULL(SUM(TPSSM.BASE_QTY / TMP.PO_UNIT_QTY)         ) AS BASE_QTY            /* 기초재고수량 */
            , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_IN_QTY / TMP.PO_UNIT_QTY)     ) AS STORE_IN_QTY        /* 매장입고 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_OUT_QTY / TMP.PO_UNIT_QTY)    ) AS STORE_OUT_QTY       /* 매장반품 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.PURCHS_IN_QTY / TMP.PO_UNIT_QTY)    ) AS PURCHS_IN_QTY       /* 사입입고 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.PURCHS_OUT_QTY / TMP.PO_UNIT_QTY)   ) AS PURCHS_OUT_QTY      /* 사입반품 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_SALE_QTY / TMP.PO_UNIT_QTY)   ) AS STORE_SALE_QTY      /* 매장판매 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.MOVE_IN_QTY / TMP.PO_UNIT_QTY)      ) AS MOVE_IN_QTY         /* 매장이입 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.MOVE_OUT_QTY / TMP.PO_UNIT_QTY)     ) AS MOVE_OUT_QTY        /* 매장이출 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.DISUSE_QTY / TMP.PO_UNIT_QTY)       ) AS DISUSE_QTY          /* 재고폐기 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.ADJ_QTY / TMP.PO_UNIT_QTY)          ) AS ADJ_QTY             /* 재고조정 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.SET_IN_QTY / TMP.PO_UNIT_QTY)       ) AS SET_IN_QTY          /* 세트생성 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.CLOSE_QTY / TMP.PO_UNIT_QTY)        ) AS CLOSE_QTY           /* 기말재고수량 */
        </if>
        <if test='unitFg == "0"'>
            , SF_ZERO_TO_NULL(SUM(TPSSM.BASE_QTY)         ) AS BASE_QTY        /* 기초재고수량 */
            , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_IN_QTY)     ) AS STORE_IN_QTY  /* 매장입고 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_OUT_QTY)    ) AS STORE_OUT_QTY  /* 매장반품 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.PURCHS_IN_QTY)    ) AS PURCHS_IN_QTY  /* 사입입고 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.PURCHS_OUT_QTY)   ) AS PURCHS_OUT_QTY  /* 사입반품 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_SALE_QTY)   ) AS STORE_SALE_QTY  /* 매장판매 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.MOVE_IN_QTY)      ) AS MOVE_IN_QTY  /* 매장이입 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.MOVE_OUT_QTY)     ) AS MOVE_OUT_QTY  /* 매장이출 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.DISUSE_QTY)       ) AS DISUSE_QTY  /* 재고폐기 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.ADJ_QTY)          ) AS ADJ_QTY  /* 재고조정 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.SET_IN_QTY)       ) AS SET_IN_QTY  /* 세트생성 수량*/
            , SF_ZERO_TO_NULL(SUM(TPSSM.CLOSE_QTY)        ) AS CLOSE_QTY       /* 기말재고수량 */
        </if>
        , SF_ZERO_TO_NULL(SUM(TPSSM.BASE_AMT)         ) AS BASE_AMT         /* 기초재고금액 */
        , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_IN_TOT)     ) AS STORE_IN_TOT   /* 매장입고 금액*/
        , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_OUT_TOT)    ) AS STORE_OUT_TOT   /* 매장반품 금액*/
        , SF_ZERO_TO_NULL(SUM(TPSSM.PURCHS_IN_TOT)    ) AS PURCHS_IN_TOT   /* 사입입고 금액*/
        , SF_ZERO_TO_NULL(SUM(TPSSM.PURCHS_OUT_TOT)   ) AS PURCHS_OUT_TOT   /* 사입반품 금액*/
        , SF_ZERO_TO_NULL(SUM(TPSSM.STORE_SALE_TOT)   ) AS STORE_SALE_TOT   /* 매장판매 금액*/
        , SF_ZERO_TO_NULL(SUM(TPSSM.MOVE_IN_TOT)      ) AS MOVE_IN_TOT   /* 매장이입 금액*/
        , SF_ZERO_TO_NULL(SUM(TPSSM.MOVE_OUT_TOT)     ) AS MOVE_OUT_TOT   /* 매장이출 금액*/
        , SF_ZERO_TO_NULL(SUM(TPSSM.CLOSE_AMT)        ) AS CLOSE_AMT        /* 기말재고금액 */
        , #{startDate} AS START_DATE
        FROM TB_ST_STORE_STOCK_MONTHLY TPSSM
        , TB_MS_PRODUCT TMP
        , TB_MS_PRODUCT_BARCD TMPB
        WHERE TPSSM.STORE_CD     = TMP.STORE_CD
        AND TPSSM.PROD_CD      = TMP.PROD_CD
        AND EXISTS (SELECT * FROM TB_MS_STORE Z WHERE Z.STORE_CD = TPSSM.STORE_CD AND Z.HQ_OFFICE_CD = #{hqOfficeCd})
        AND TPSSM.STORE_CD     = TMPB.STORE_CD(+)
        AND TPSSM.PROD_CD      = TMPB.PROD_CD(+)
        AND TMP.STOCK_PROD_YN = 'Y'
        AND TMP.USE_YN = 'Y'
        <if test='startDate != null and startDate != ""'>
            AND TPSSM.IOSTOCK_YM  = #{startDate}
        </if>
        <if test='prodCd != null and prodCd != ""'>
            AND TMP.PROD_CD LIKE '%'||#{prodCd}||'%'
        </if>
        <if test='storeCdQuery != null and storeCdQuery != ""'>
            AND TPSSM.STORE_CD IN (${storeCdQuery})
        </if>
        <if test='arrVendrCd != null and arrVendrCd != ""'>
            AND TMP.PROD_CD IN    ( SELECT  PROD_CD
            FROM    TB_MS_VENDOR_PROD
            WHERE   STORE_CD = TPSSM.STORE_CD
            AND     VENDR_CD IN
            <foreach collection="arrVendrCd" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
            )
        </if>
        <if test='prodClassCd != null and prodClassCd != ""'>
            AND TMP.PROD_CLASS_CD  IN (
            SELECT              PROD_CLASS_CD
            FROM                TB_HQ_PRODUCT_CLASS
            WHERE               HQ_OFFICE_CD    = #{hqOfficeCd}
            START WITH          PROD_CLASS_CD   = #{prodClassCd}
            AND                 HQ_OFFICE_CD    = #{hqOfficeCd}
            CONNECT BY PRIOR    PROD_CLASS_CD   = P_PROD_CLASS_CD
            AND                 HQ_OFFICE_CD    = #{hqOfficeCd}
            )
        </if>
        <if test='prodNm != null and prodNm != ""'>
            AND TMP.PROD_NM  LIKE '%'||#{prodNm}||'%'
        </if>
        <if test='barcdCd != null and barcdCd != ""'>
            AND TMPB.BARCD_CD  = #{barcdCd}
        </if>
        GROUP BY  TMP.STORE_CD
        , TMP.PROD_CLASS_CD
        , TPSSM.PROD_CD
        , TMP.PROD_NM
        , TPSSM.STORE_CD
        , TPSSM.PO_UNIT_QTY
        , TMP.PO_UNIT_FG
        , TMPB.BARCD_CD
        ORDER BY TPSSM.PROD_CD
        , TPSSM.STORE_CD
        ) A
    </select>

</mapper>