<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    FoodAllergy.xml
    식품 알레르기 정보관리
    ======================================================
    No  ||  수정자 ||  수정일자    ||  수정내역
    ======================================================
    1       김설아     2020.10.06     최초작성
-->
<mapper namespace="kr.co.solbipos.base.prod.foodAllergy.service.impl.FoodAllergyMapper">

    <!-- 식품 알레르기 정보관리 조회 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_ALGI_INFO, TB_MS_PRODUCT_ALGI_INFO
        COMMENTS : [본사-식품안전]재료-알레르기정보, [매장-식품안전]재료-알레르기정보
    -->
    <select id="getFoodAllergyList"  parameterType="FoodAllergyVO" resultType="DefaultMap">
        /* FoodAllergyMapper.getFoodAllergyList */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT
                thpai.RECIPES_CD,
                thpai.RECIPES_NM,
                thpai.ALLERGIE_NM
                FROM TB_HQ_PRODUCT_ALGI_INFO thpai
                WHERE 1=1
                AND thpai.HQ_OFFICE_CD = #{membrOrgnCd}
                ORDER BY thpai.RECIPES_CD
            </when>
            <!-- 매장 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                SELECT
                tmpai.RECIPES_CD,
                tmpai.RECIPES_NM,
                tmpai.ALLERGIE_NM
                FROM TB_MS_PRODUCT_ALGI_INFO tmpai
                WHERE 1=1
                AND tmpai.STORE_CD = #{storeCd}
                ORDER BY tmpai.RECIPES_CD
            </when>
        </choose>
    </select>

    <!-- 재료코드(자동채번) -->
    <!--
        TABLE    : TB_HQ_PRODUCT_ALGI_INFO, TB_MS_PRODUCT_ALGI_INFO
        COMMENTS : [본사-식품안전]재료-알레르기정보, [매장-식품안전]재료-알레르기정보
    -->
    <select id="getFoodAllergyRecipesCd" parameterType="FoodAllergyVO" resultType="String">
        /* FoodAllergyMapper.getFoodAllergyRecipesCd */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT
                LPAD(NVL(MAX(thpai.RECIPES_CD), 0) + 1, 4, '0')
                FROM TB_HQ_PRODUCT_ALGI_INFO thpai
                WHERE 1=1
                AND thpai.HQ_OFFICE_CD = #{membrOrgnCd}
            </when>
            <!-- 매장 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                SELECT
                LPAD(NVL(MAX(tmpai.RECIPES_CD), 0) + 1, 4, '0')
                FROM TB_MS_PRODUCT_ALGI_INFO tmpai
                WHERE 1=1
                AND tmpai.STORE_CD = #{storeCd}
            </when>
        </choose>
    </select>

    <!-- 식품 알레르기 정보관리 저장 insert -->
    <!--
        TABLE    : TB_HQ_PRODUCT_ALGI_INFO, TB_MS_PRODUCT_ALGI_INFO
        COMMENTS : [본사-식품안전]재료-알레르기정보, [매장-식품안전]재료-알레르기정보
    -->
    <insert id="getFoodAllergySaveInsert" parameterType="FoodAllergyVO">
        /* FoodAllergyMapper.getFoodAllergySaveInsert */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                INSERT INTO TB_HQ_PRODUCT_ALGI_INFO
                (
                    HQ_OFFICE_CD,
                    RECIPES_CD,
                    RECIPES_NM,
                    ALLERGIE_NM,
                    REG_DT,
                    REG_ID,
                    MOD_DT,
                    MOD_ID
                ) VALUES (
                    #{membrOrgnCd},
                    #{recipesCd},
                    #{recipesNm},
                    #{allergieNm},
                    #{regDt},
                    #{regId},
                    #{modDt},
                    #{modId}
                )
            </when>
            <!-- 매장 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                INSERT INTO TB_MS_PRODUCT_ALGI_INFO
                (
                    STORE_CD,
                    RECIPES_CD,
                    RECIPES_NM,
                    ALLERGIE_NM,
                    REG_DT,
                    REG_ID,
                    MOD_DT,
                    MOD_ID
                ) VALUES (
                    #{storeCd},
                    #{recipesCd},
                    #{recipesNm},
                    #{allergieNm},
                    #{regDt},
                    #{regId},
                    #{modDt},
                    #{modId}
                )
            </when>
        </choose>
    </insert>

    <!-- 식품 알레르기 정보관리 저장 update -->
    <!--
        TABLE    : TB_HQ_PRODUCT_ALGI_INFO, TB_MS_PRODUCT_ALGI_INFO
        COMMENTS : [본사-식품안전]재료-알레르기정보, [매장-식품안전]재료-알레르기정보
    -->
    <update id="getFoodAllergySaveUpdate" parameterType="FoodAllergyVO">
        /* FoodAllergyMapper.getFoodAllergySaveUpdate */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                UPDATE
                TB_HQ_PRODUCT_ALGI_INFO
                SET
                RECIPES_NM = #{recipesNm},
                ALLERGIE_NM = #{allergieNm},
                MOD_DT = #{modDt},
                MOD_ID = #{modId}
                WHERE 1=1
                AND HQ_OFFICE_CD = #{membrOrgnCd}
                AND RECIPES_CD = #{recipesCd}
            </when>
            <!-- 매장 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                UPDATE
                TB_MS_PRODUCT_ALGI_INFO
                SET
                RECIPES_NM = #{recipesNm},
                ALLERGIE_NM = #{allergieNm},
                MOD_DT = #{modDt},
                MOD_ID = #{modId}
                WHERE 1=1
                AND STORE_CD = #{storeCd}
                AND RECIPES_CD = #{recipesCd}
            </when>
        </choose>
    </update>

    <!-- 식품 알레르기 정보관리 저장 delete -->
    <!--
        TABLE    : TB_HQ_PRODUCT_ALGI_INFO, TB_MS_PRODUCT_ALGI_INFO
        COMMENTS : [본사-식품안전]재료-알레르기정보, [매장-식품안전]재료-알레르기정보
    -->
    <delete id="getFoodAllergySaveDelete" parameterType="FoodAllergyVO">
        /* FoodAllergyMapper.getFoodAllergySaveDelete */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                DELETE
                TB_HQ_PRODUCT_ALGI_INFO
                WHERE 1=1
                AND HQ_OFFICE_CD = #{membrOrgnCd}
                AND RECIPES_CD = #{recipesCd}
            </when>
            <!-- 매장 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                DELETE
                TB_MS_PRODUCT_ALGI_INFO
                WHERE 1=1
                AND STORE_CD = #{storeCd}
                AND RECIPES_CD = #{recipesCd}
            </when>
        </choose>
    </delete>

    <!-- 식품 알레르기 정보관리 저장 delete 시, 알레르기-상품 저장 delete -->
    <!--
        TABLE    : TB_HQ_PRODUCT_ALGI_PROD, TB_MS_PRODUCT_ALGI_PROD
        COMMENTS : [본사-식품안전]재료/알러지-상품맵핑정보, [매장-식품안전]재료/알러지-상품맵핑정보
    -->
    <delete id="getFoodAllergySaveDeleteAll" parameterType="FoodAllergyVO">
        /* FoodAllergyMapper.getFoodAllergySaveDeleteAll */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                DELETE
                TB_HQ_PRODUCT_ALGI_PROD
                WHERE 1=1
                AND HQ_OFFICE_CD = #{membrOrgnCd}
                AND RECIPES_CD = #{recipesCd}
            </when>
            <!-- 매장 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                DELETE
                TB_MS_PRODUCT_ALGI_PROD
                WHERE 1=1
                AND STORE_CD = #{storeCd}
                AND RECIPES_CD = #{recipesCd}
            </when>
        </choose>
    </delete>

    <!-- 알레르기-상품 조회 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_ALGI_PROD, TB_HQ_PRODUCT, TB_HQ_PRODUCT_CLASS, TB_HQ_PRODUCT_SALE_PRICE_V99,
                   TB_MS_PRODUCT_ALGI_PROD, TB_MS_PRODUCT, TB_MS_PRODUCT_CLASS, TB_MS_PRODUCT_SALE_PRICE_V99
        COMMENTS : [본사-식품안전]재료/알러지-상품맵핑정보, [본사]상품, [본사]상품_분류,
                   [매장-식품안전]재료/알러지-상품맵핑정보, [매장]상품, [매장]상품_분류
    -->
    <select id="getFoodAllergyDetailList"  parameterType="FoodAllergyVO" resultType="DefaultMap">
        /* FoodAllergyMapper.getFoodAllergyDetailList */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT
                REPLACE(SUBSTR(thpc_p.PATH, 0, 6) ,'/','') AS LEVEL1,
                (SELECT PROD_CLASS_NM FROM TB_HQ_PRODUCT_CLASS WHERE HQ_OFFICE_CD = #{membrOrgnCd} AND PROD_CLASS_CD=(REPLACE(SUBSTR(thpc_p.PATH, 0, 6) ,'/',''))) AS LEVEL1_NM,
                REPLACE(SUBSTR(thpc_p.PATH, 7, 6) ,'/','') AS LEVEL2,
                (SELECT PROD_CLASS_NM FROM TB_HQ_PRODUCT_CLASS WHERE HQ_OFFICE_CD = #{membrOrgnCd} AND PROD_CLASS_CD=(REPLACE(SUBSTR(thpc_p.PATH, 7, 6) ,'/',''))) AS LEVEL2_NM,
                REPLACE(SUBSTR(thpc_p.PATH, 13, 6) ,'/','') AS LEVEL3,
                (SELECT PROD_CLASS_NM FROM TB_HQ_PRODUCT_CLASS WHERE HQ_OFFICE_CD = #{membrOrgnCd} AND PROD_CLASS_CD=(REPLACE(SUBSTR(thpc_p.PATH, 13, 6) ,'/',''))) AS LEVEL3_NM,
                thpap.PROD_CD,
                thp.PROD_NM,
                NVL(thpspv99.SALE_UPRC, 0) AS SALE_UPRC
                FROM TB_HQ_PRODUCT_ALGI_PROD thpap,
                TB_HQ_PRODUCT thp,
                (
                    SELECT
                    HQ_OFFICE_CD,
                    PROD_CLASS_CD,
                    SYS_CONNECT_BY_PATH (PROD_CLASS_CD, '/') PATH
                    FROM TB_HQ_PRODUCT_CLASS
                    WHERE 1=1
                    AND HQ_OFFICE_CD = #{membrOrgnCd}
                    START WITH P_PROD_CLASS_CD = '00000'
                    CONNECT BY P_PROD_CLASS_CD = PRIOR PROD_CLASS_CD
                ) thpc_p,
                TB_HQ_PRODUCT_SALE_PRICE_V99 thpspv99 --view
                WHERE 1=1
                AND thpap.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
                AND thpap.PROD_CD = thp.PROD_CD
                AND thp.HQ_OFFICE_CD = thpc_p.HQ_OFFICE_CD
                AND thp.PROD_CLASS_CD = thpc_p.PROD_CLASS_CD
                AND thpap.HQ_OFFICE_CD = #{membrOrgnCd}
                AND thpap.RECIPES_CD = #{recipesCd}
                AND thpspv99.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
                AND thpspv99.PROD_CD = thp.PROD_CD
                <![CDATA[
                    AND thpspv99.START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                    AND thpspv99.END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                ]]>
                ORDER BY thpap.PROD_CD
            </when>
            <!-- 매장 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                SELECT
                REPLACE(SUBSTR(tmpc_p.PATH, 0, 6) ,'/','') AS LEVEL1,
                (SELECT PROD_CLASS_NM FROM TB_MS_PRODUCT_CLASS WHERE STORE_CD = #{storeCd} AND PROD_CLASS_CD=(REPLACE(SUBSTR(tmpc_p.PATH, 0, 6) ,'/',''))) AS LEVEL1_NM,
                REPLACE(SUBSTR(tmpc_p.PATH, 7, 6) ,'/','') AS LEVEL2,
                (SELECT PROD_CLASS_NM FROM TB_MS_PRODUCT_CLASS WHERE STORE_CD = #{storeCd} AND PROD_CLASS_CD=(REPLACE(SUBSTR(tmpc_p.PATH, 7, 6) ,'/',''))) AS LEVEL2_NM,
                REPLACE(SUBSTR(tmpc_p.PATH, 13, 6) ,'/','') AS LEVEL3,
                (SELECT PROD_CLASS_NM FROM TB_MS_PRODUCT_CLASS WHERE STORE_CD = #{storeCd} AND PROD_CLASS_CD=(REPLACE(SUBSTR(tmpc_p.PATH, 13, 6) ,'/',''))) AS LEVEL3_NM,
                tmpap.PROD_CD,
                tmp.PROD_NM,
                NVL(tmpspv99.SALE_UPRC, 0) AS SALE_UPRC
                FROM TB_MS_PRODUCT_ALGI_PROD tmpap,
                TB_MS_PRODUCT tmp,
                (
                    SELECT
                    STORE_CD,
                    PROD_CLASS_CD,
                    SYS_CONNECT_BY_PATH (PROD_CLASS_CD, '/') PATH
                    FROM (SELECT * FROM TB_MS_PRODUCT_CLASS WHERE STORE_CD = #{storeCd})
                    WHERE 1=1
                    START WITH P_PROD_CLASS_CD = '00000'
                    CONNECT BY P_PROD_CLASS_CD = PRIOR PROD_CLASS_CD
                ) tmpc_p,
                TB_MS_PRODUCT_SALE_PRICE_V99 tmpspv99 --view
                WHERE 1=1
                AND tmpap.STORE_CD = tmp.STORE_CD
                AND tmpap.PROD_CD = tmp.PROD_CD
                AND tmp.STORE_CD = tmpc_p.STORE_CD
                AND tmp.PROD_CLASS_CD = tmpc_p.PROD_CLASS_CD
                AND tmpap.STORE_CD = #{storeCd}
                AND tmpap.RECIPES_CD = #{recipesCd}
                AND tmpspv99.STORE_CD = tmp.STORE_CD
                AND tmpspv99.PROD_CD = tmp.PROD_CD
                <![CDATA[
                    AND tmpspv99.START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                    AND tmpspv99.END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                ]]>
                ORDER BY tmpap.PROD_CD
            </when>
        </choose>
    </select>

    <!-- 알레르기-상품 조회 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_HQ_PRODUCT_CLASS, TB_HQ_PRODUCT_ALGI_PROD, TB_HQ_PRODUCT_SALE_PRICE_V99,
                   TB_MS_PRODUCT, TB_MS_PRODUCT_CLASS, TB_MS_PRODUCT_ALGI_PROD, TB_MS_PRODUCT_SALE_PRICE_V99
        COMMENTS : [본사]상품, [본사]상품_분류, [본사-식품안전]재료/알러지-상품맵핑정보,
                   [매장]상품, [매장]상품_분류, [매장-식품안전]재료/알러지-상품맵핑정보
    -->
    <select id="getFoodAllergyProdList"  parameterType="FoodAllergyVO" resultType="DefaultMap">
        /* FoodAllergyMapper.getFoodAllergyProdList */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT *
                FROM
                (
                    SELECT
                    REPLACE(SUBSTR(thpc_p.PATH, 0, 6) ,'/','') AS LEVEL1,
                    (SELECT PROD_CLASS_NM FROM TB_HQ_PRODUCT_CLASS WHERE HQ_OFFICE_CD = #{membrOrgnCd} AND PROD_CLASS_CD=(REPLACE(SUBSTR(thpc_p.PATH, 0, 6) ,'/',''))) AS LEVEL1_NM,
                    REPLACE(SUBSTR(thpc_p.PATH, 7, 6) ,'/','') AS LEVEL2,
                    (SELECT PROD_CLASS_NM FROM TB_HQ_PRODUCT_CLASS WHERE HQ_OFFICE_CD = #{membrOrgnCd} AND PROD_CLASS_CD=(REPLACE(SUBSTR(thpc_p.PATH, 7, 6) ,'/',''))) AS LEVEL2_NM,
                    REPLACE(SUBSTR(thpc_p.PATH, 13, 6) ,'/','') AS LEVEL3,
                    (SELECT PROD_CLASS_NM FROM TB_HQ_PRODUCT_CLASS WHERE HQ_OFFICE_CD = #{membrOrgnCd} AND PROD_CLASS_CD=(REPLACE(SUBSTR(thpc_p.PATH, 13, 6) ,'/',''))) AS LEVEL3_NM,
                    thp.PROD_CD,
                    thp.PROD_NM,
                    NVL(thpspv99.SALE_UPRC, 0) AS SALE_UPRC
                    FROM TB_HQ_PRODUCT thp,
                    (
                        SELECT
                        HQ_OFFICE_CD,
                        PROD_CLASS_CD,
                        SYS_CONNECT_BY_PATH (PROD_CLASS_CD, '/') PATH
                        FROM TB_HQ_PRODUCT_CLASS
                        WHERE 1=1
                        AND HQ_OFFICE_CD = #{membrOrgnCd}
                        START WITH P_PROD_CLASS_CD = '00000'
                        CONNECT BY P_PROD_CLASS_CD = PRIOR PROD_CLASS_CD
                    ) thpc_p,
                    TB_HQ_PRODUCT_SALE_PRICE_V99 thpspv99 --view
                    WHERE 1=1
                    AND thp.HQ_OFFICE_CD = thpc_p.HQ_OFFICE_CD
                    AND thp.PROD_CLASS_CD = thpc_p.PROD_CLASS_CD
                    AND thp.HQ_OFFICE_CD = #{membrOrgnCd}
                    <if test="prodCd != null and prodCd != ''">
                        AND thp.PROD_CD LIKE '%'|| #{prodCd} ||'%'
                    </if>
                    <if test="prodNm != null and prodNm != ''">
                        AND thp.PROD_NM LIKE '%'|| #{prodNm} ||'%'
                    </if>
                    AND thpspv99.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
                    AND thpspv99.PROD_CD = thp.PROD_CD
                    <![CDATA[
                        AND thpspv99.START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        AND thpspv99.END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                    ]]>
                    AND NOT EXISTS
                    (
                        SELECT 1
                        FROM TB_HQ_PRODUCT_ALGI_PROD thpap
                        WHERE 1=1
                        AND thpap.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
                        AND thpap.PROD_CD = thp.PROD_CD
                        AND thpap.RECIPES_CD = #{recipesCd}
                    )
                )
                WHERE 1=1
                <if test="prodClassCd != null and prodClassCd != ''">
                    AND (      LEVEL1 = #{prodClassCd}
                            OR LEVEL2 = #{prodClassCd}
                            OR LEVEL3 = #{prodClassCd}
                            )
                </if>
                ORDER BY PROD_CD
            </when>
            <!-- 매장 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                SELECT *
                FROM
                (
                    SELECT
                    REPLACE(SUBSTR(tmpc_p.PATH, 0, 6) ,'/','') AS LEVEL1,
                    (SELECT PROD_CLASS_NM FROM TB_MS_PRODUCT_CLASS WHERE STORE_CD = #{storeCd} AND PROD_CLASS_CD=(REPLACE(SUBSTR(tmpc_p.PATH, 0, 6) ,'/',''))) AS LEVEL1_NM,
                    REPLACE(SUBSTR(tmpc_p.PATH, 7, 6) ,'/','') AS LEVEL2,
                    (SELECT PROD_CLASS_NM FROM TB_MS_PRODUCT_CLASS WHERE STORE_CD = #{storeCd} AND PROD_CLASS_CD=(REPLACE(SUBSTR(tmpc_p.PATH, 7, 6) ,'/',''))) AS LEVEL2_NM,
                    REPLACE(SUBSTR(tmpc_p.PATH, 13, 6) ,'/','') AS LEVEL3,
                    (SELECT PROD_CLASS_NM FROM TB_MS_PRODUCT_CLASS WHERE STORE_CD = #{storeCd} AND PROD_CLASS_CD=(REPLACE(SUBSTR(tmpc_p.PATH, 13, 6) ,'/',''))) AS LEVEL3_NM,
                    tmp.PROD_CD,
                    tmp.PROD_NM,
                    NVL(tmpspv99.SALE_UPRC, 0) AS SALE_UPRC
                    FROM TB_MS_PRODUCT tmp,
                    (
                        SELECT
                        STORE_CD,
                        PROD_CLASS_CD,
                        SYS_CONNECT_BY_PATH (PROD_CLASS_CD, '/') PATH
                        FROM (SELECT * FROM TB_MS_PRODUCT_CLASS WHERE STORE_CD = #{storeCd})
                        WHERE 1=1
                        START WITH P_PROD_CLASS_CD = '00000'
                        CONNECT BY P_PROD_CLASS_CD = PRIOR PROD_CLASS_CD
                    ) tmpc_p,
                    TB_MS_PRODUCT_SALE_PRICE_V99 tmpspv99 --view
                    WHERE 1=1
                    AND tmp.STORE_CD = tmpc_p.STORE_CD
                    AND tmp.PROD_CLASS_CD = tmpc_p.PROD_CLASS_CD
                    AND tmp.STORE_CD = #{storeCd}
                    <if test="prodCd != null and prodCd != ''">
                        AND tmp.PROD_CD LIKE '%'|| #{prodCd} ||'%'
                    </if>
                    <if test="prodNm != null and prodNm != ''">
                        AND tmp.PROD_NM LIKE '%'|| #{prodNm} ||'%'
                    </if>
                    AND tmpspv99.STORE_CD = tmp.STORE_CD
                    AND tmpspv99.PROD_CD = tmp.PROD_CD
                    <![CDATA[
                        AND tmpspv99.START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        AND tmpspv99.END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                    ]]>
                    AND NOT EXISTS
                    (
                        SELECT 1
                        FROM TB_MS_PRODUCT_ALGI_PROD tmpap
                        WHERE 1=1
                        AND tmpap.STORE_CD = tmp.STORE_CD
                        AND tmpap.PROD_CD = tmp.PROD_CD
                        AND tmpap.RECIPES_CD = #{recipesCd}
                    )
                )
                WHERE 1=1
                <if test="prodClassCd != null and prodClassCd != ''">
                    AND (      LEVEL1 = #{prodClassCd}
                            OR LEVEL2 = #{prodClassCd}
                            OR LEVEL3 = #{prodClassCd}
                            )
                </if>
                ORDER BY PROD_CD
            </when>
        </choose>
    </select>

    <!-- 알레르기-상품 저장 insert -->
    <!--
        TABLE    : TB_HQ_PRODUCT_ALGI_PROD, TB_MS_PRODUCT_ALGI_PROD
        COMMENTS : [본사-식품안전]재료/알러지-상품맵핑정보, [매장-식품안전]재료/알러지-상품맵핑정보
    -->
    <insert id="getFoodAllergyProdSaveInsert" parameterType="FoodAllergyVO">
        /* FoodAllergyMapper.getFoodAllergyProdSaveInsert */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                INSERT INTO TB_HQ_PRODUCT_ALGI_PROD
                (
                    HQ_OFFICE_CD,
                    RECIPES_CD,
                    PROD_CD,
                    REG_DT,
                    REG_ID,
                    MOD_DT,
                    MOD_ID
                ) VALUES (
                    #{membrOrgnCd},
                    #{recipesCd},
                    #{prodCd},
                    #{regDt},
                    #{regId},
                    #{modDt},
                    #{modId}
                )
            </when>
            <!-- 매장 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                INSERT INTO TB_MS_PRODUCT_ALGI_PROD
                (
                    STORE_CD,
                    RECIPES_CD,
                    PROD_CD,
                    REG_DT,
                    REG_ID,
                    MOD_DT,
                    MOD_ID
                ) VALUES (
                    #{storeCd},
                    #{recipesCd},
                    #{prodCd},
                    #{regDt},
                    #{regId},
                    #{modDt},
                    #{modId}
                )
            </when>
        </choose>
    </insert>

    <!-- 알레르기-상품 저장 delete -->
    <!--
        TABLE    : TB_HQ_PRODUCT_ALGI_PROD, TB_MS_PRODUCT_ALGI_PROD
        COMMENTS : [본사-식품안전]재료/알러지-상품맵핑정보, [매장-식품안전]재료/알러지-상품맵핑정보
    -->
    <delete id="getFoodAllergyProdSaveDelete" parameterType="FoodAllergyVO">
        /* FoodAllergyMapper.getFoodAllergyProdSaveDelete */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                DELETE
                TB_HQ_PRODUCT_ALGI_PROD
                WHERE 1=1
                AND HQ_OFFICE_CD = #{membrOrgnCd}
                AND RECIPES_CD = #{recipesCd}
                AND PROD_CD = #{prodCd}
            </when>
            <!-- 매장 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                DELETE
                TB_MS_PRODUCT_ALGI_PROD
                WHERE 1=1
                AND STORE_CD = #{storeCd}
                AND RECIPES_CD = #{recipesCd}
                AND PROD_CD = #{prodCd}
            </when>
        </choose>
    </delete>

</mapper>