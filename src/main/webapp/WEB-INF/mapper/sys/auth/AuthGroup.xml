<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.solbipos.sys.auth.authgroup.service.impl.AuthGroupMapper">

  <select id="selectAvailGroup" parameterType="string" resultType="DefaultMap">
    /* AuthGroupMapper.selectAvailGroup */
    SELECT AUTH_GRP_CD AS VALUE,
           AUTH_GRP_NM AS NAME
      FROM TB_WB_AUTHOR_GRP_INFO A
     WHERE TARGET_ALL_FG = 'A'
    UNION ALL
    SELECT AUTH_GRP_CD AS VALUE,
           AUTH_GRP_NM AS NAME
      FROM TB_WB_AUTHOR_GRP_INFO A
     WHERE TARGET_ALL_FG = 'P'
       AND TARGET_ORGN = #{orgnCd}
  </select>


  <select id="selectGroup" parameterType="authGroupVO" resultType="DefaultMap">
    /* AuthGroupMapper.selectGroup */
    SELECT ROW_NUMBER() OVER (PARTITION BY 1 ORDER BY 1) NO,
           AUTH_GRP_CD,
           AUTH_GRP_NM,
           TARGET_ALL_FG,
           (SELECT NMCODE_NM FROM TB_CM_NMCODE WHERE NMCODE_GRP_CD = '903' AND NMCODE_CD = A.TARGET_ALL_FG) AS TARGET_ALL_FG_NM,
           TARGET_ORGN,
           ( SELECT MAX(TARGET_ORGN_NM)
               FROM ( SELECT HQ_OFFICE_NM TARGET_ORGN_NM FROM TB_HQ_OFFICE WHERE HQ_OFFICE_CD = A.TARGET_ORGN
                      UNION ALL
                      SELECT AGENCY_NM TARGET_ORGN_NM FROM TB_CM_AGENCY WHERE AGENCY_CD = A.TARGET_ORGN
               )
           ) AS TARGET_ORGN_NM,
           REMARK,
           USE_YN,
           REG_DT,
           REG_ID,
           MOD_DT,
           MOD_ID,
           DECODE(NVL(INSTR(AUTH_ORGN, 'A'),0), 0, NULL, 'Y') AS CHK_ADMIN,
           DECODE(NVL(INSTR(AUTH_ORGN, 'P'),0), 0, NULL, 'Y') AS CHK_DIST,
           DECODE(NVL(INSTR(AUTH_ORGN, 'C'),0), 0, NULL, 'Y') AS CHK_AGENCY,
           DECODE(NVL(INSTR(AUTH_ORGN, 'H'),0), 0, NULL, 'Y') AS CHK_HQ,
           DECODE(NVL(INSTR(AUTH_ORGN, 'S'),0), 0, NULL, 'Y') AS CHK_STORE,
           DECODE(NVL(INSTR(AUTH_ORGN, 'I'),0), 0, NULL, 'Y') AS CHK_EX_STORE,
           AUTH_ORGN
      FROM TB_WB_AUTHOR_GRP_INFO A
     <where>
     <if test='useYn != null and useYn.toString() != ""'>
        AND A.USE_YN = #{useYn}
     </if>
     <if test='authGrpNm != null and authGrpNm != ""'>
        AND A.GRP_NM LIKE '%'||#{authGrpNm}||'%'
     </if>
     <if test='targetOrgn != null and targetOrgn != ""'>
        AND A.AUTH_GRP_CD IN (
             SELECT AUTH_GRP_CD
           FROM TB_WB_AUTHOR_GRP_INFO A
          WHERE TARGET_ALL_FG = 'A'
          UNION ALL
         SELECT AUTH_GRP_CD
           FROM TB_WB_AUTHOR_GRP_INFO A
          WHERE TARGET_ALL_FG = 'P'
            AND TARGET_ORGN = #{targetOrgn}
            )
     </if>
     </where>
     ORDER BY AUTH_GRP_CD
  </select>

  <select id="selectGroupCnt" parameterType="authGroupVO" resultType="integer">
    /* AuthGroupMapper.selectGroupCnt */
    SELECT COUNT(1)
      FROM TB_WB_AUTHOR_GRP_INFO A
     WHERE A.AUTH_GRP_CD = #{authGrpCd}
  </select>

  <insert id="insertGroup" parameterType="authGroupVO">
    /* AuthGroupMapper.insertGroup */
    INSERT INTO TB_WB_AUTHOR_GRP_INFO
    (
        AUTH_GRP_CD,
        AUTH_GRP_NM,
        TARGET_ALL_FG,
        TARGET_ORGN,
        REMARK,
        USE_YN,
        REG_DT,
        REG_ID,
        MOD_DT,
        MOD_ID,
        AUTH_ORGN
    )
    VALUES
    (
        LPAD(SQ_WB_AUTHOR_GRP.NEXTVAL, 6, '0'),
        #{authGrpNm},
        #{targetAllFg},
        #{targetOrgn},
        #{remark},
        #{useYn},
        #{regDt},
        #{regId},
        #{modDt},
        #{modId},
        #{authOrgn}
    )
  </insert>

  <update id="updateGroup" parameterType="authGroupVO">
    /* AuthGroupMapper.updateGroup */
     UPDATE TB_WB_AUTHOR_GRP_INFO A
        SET A.AUTH_GRP_NM   = #{authGrpNm},
            A.TARGET_ALL_FG = #{targetAllFg},
            A.TARGET_ORGN   = #{targetOrgn},
            A.REMARK        = #{remark},
            A.USE_YN        = #{useYn},
            A.MOD_DT        = #{modDt},
            A.MOD_ID        = #{modId},
            A.AUTH_ORGN     = #{authOrgn}
      WHERE A.AUTH_GRP_CD   = #{authGrpCd}
  </update>

  <delete id="deleteGroup" parameterType="authGroupVO">
    /* AuthGroupMapper.deleteGroup */
     DELETE
       FROM TB_WB_AUTHOR_GRP_INFO A
      WHERE A.AUTH_GRP_CD = #{authGrpCd}
  </delete>


  <select id="selectResrceByGroup" parameterType="authGroupVO" resultType="DefaultMap">
    /* AuthGroupMapper.selectResrceByGroup */
     SELECT A.P_RESRCE,
            A.RESRCE_CD,
            '[' || A.RESRCE_CD || ']' || A.RESRCE_NM RESRCE_DISP,
            A.RESRCE_NM,
            A.DISP_LEVEL,
            A.DISP_IDX,
            NVL2(B.RESRCE_CD, 1, 0) AUTH_FG
       FROM (
             SELECT ROWNUM LIST_SEQ,
                    LEVEL,
                    A.P_RESRCE,
                    A.RESRCE_CD,
                    A.RESRCE_NM,
                    A.DISP_LEVEL,
                    A.DISP_IDX,
                    A.FUNC_FG
               FROM TB_WB_RESRCE_INFO A
              WHERE A.USE_YN = 'Y'
                AND A.RESRCE_FG = 'M'
                <if test='authOrgn != null'>
                AND REGEXP_LIKE(A.AUTH_ORGN , #{authOrgn})
                </if>
              START WITH A.P_RESRCE = '000000'
            CONNECT BY PRIOR A.RESRCE_CD = A.P_RESRCE
              ORDER SIBLINGS BY A.DISP_IDX ASC,
                    FUNC_FG ASC
            ) A,
            (
             SELECT B.RESRCE_CD
               FROM TB_WB_AUTHOR_GRP_INFO A,
                    TB_WB_AUTHOR_GRP_RESRCE B
              WHERE A.AUTH_GRP_CD = B.AUTH_GRP_CD
                AND B.AUTH_GRP_CD = #{authGrpCd}
                AND A.USE_YN = 'Y'
                AND B.USE_YN = 'Y'
            ) B
      WHERE A.RESRCE_CD = B.RESRCE_CD(+)
      ORDER BY A.LIST_SEQ
  </select>

  <select id="selectResrceById" parameterType="authGroupVO" resultType="DefaultMap">
    /* AuthGroupMapper.selectResrceById */
     SELECT A.RESRCE_CD,
            A.RESRCE_PATH
       FROM (
             SELECT A.RESRCE_CD,
                    SYS_CONNECT_BY_PATH(RESRCE_CD, '/') RESRCE_PATH
               FROM TB_WB_RESRCE_INFO A
              WHERE A.USE_YN = 'Y'
              START WITH A.P_RESRCE = '000000'
            CONNECT BY PRIOR A.RESRCE_CD = A.P_RESRCE
            ) A,
            (
             SELECT B.RESRCE_CD
               FROM TB_WB_AUTHOR_GRP_INFO A,
                    TB_WB_AUTHOR_GRP_RESRCE B
              WHERE A.AUTH_GRP_CD = B.AUTH_GRP_CD
                AND B.AUTH_GRP_CD = #{authGrpCd}
                AND A.USE_YN = 'Y'
                AND B.USE_YN = 'Y'
              UNION ALL
             SELECT A.RESRCE_CD
               FROM TB_WB_AUTHOR_EXCEPT_V01 A
              WHERE A.USER_ID = #{userId}
                AND A.INCLD_EXCLD_FG = 'I'
                AND A.USE_YN = 'Y'
              MINUS
             SELECT A.RESRCE_CD
               FROM TB_WB_AUTHOR_EXCEPT_V01 A
              WHERE A.USER_ID = #{userId}
                AND A.INCLD_EXCLD_FG = 'E'
                AND A.USE_YN = 'Y'
            ) B
      WHERE A.RESRCE_CD = B.RESRCE_CD
  </select>

  <select id="selectResrceByGroupAndId" parameterType="authGroupVO" resultType="DefaultMap">
    /* AuthGroupMapper.selectResrceByGroupAndId */
     SELECT A.P_RESRCE,
            A.RESRCE_CD,
            '[' || A.RESRCE_CD || ']' || A.RESRCE_NM RESRCE_DISP,
            A.RESRCE_NM,
            A.URL,
            A.DISP_LEVEL,
            A.DISP_IDX,
            NVL2(B.RESRCE_CD, 1, 0) AUTH_FG,
            (SELECT NMCODE_ITEM_2
               FROM TB_CM_NMCODE
              WHERE NMCODE_GRP_CD = '056'
                AND NMCODE_ITEM_1 = A.RESRCE_CD) ICON_NM
       FROM (
             SELECT ROWNUM LIST_SEQ,
                    LEVEL,
                    A.P_RESRCE,
                    A.RESRCE_CD,
                    A.RESRCE_NM,
                    A.URL,
                    A.DISP_LEVEL,
                    A.DISP_IDX,
                    A.FUNC_FG
               FROM TB_WB_RESRCE_INFO A
              WHERE A.USE_YN = 'Y'
              START WITH A.P_RESRCE = '000000'
            CONNECT BY PRIOR A.RESRCE_CD = A.P_RESRCE
              ORDER SIBLINGS BY A.DISP_IDX ASC,
                    FUNC_FG ASC
            ) A,
            (
             SELECT B.RESRCE_CD
               FROM TB_WB_AUTHOR_GRP_INFO A,
                    TB_WB_AUTHOR_GRP_RESRCE B
              WHERE A.AUTH_GRP_CD = B.AUTH_GRP_CD
                AND B.AUTH_GRP_CD = #{authGrpCd}
                AND A.USE_YN = 'Y'
                AND B.USE_YN = 'Y'
              UNION ALL
             SELECT A.RESRCE_CD
               FROM TB_WB_AUTHOR_EXCEPT_V01 A
              WHERE A.USER_ID = #{userId}
                AND A.INCLD_EXCLD_FG = 'I'
                AND A.USE_YN = 'Y'
              MINUS
             SELECT A.RESRCE_CD
               FROM TB_WB_AUTHOR_EXCEPT_V01 A
              WHERE A.USER_ID = #{userId}
                AND A.INCLD_EXCLD_FG = 'E'
                AND A.USE_YN = 'Y'
            ) B
      WHERE A.RESRCE_CD = B.RESRCE_CD(+)
      ORDER BY A.LIST_SEQ
  </select>


  <update id="mergeAuthorGrpResrce" parameterType="DefaultMap">
    /* AuthGroupMapper.mergeAuthorGrpResrce */
    MERGE INTO TB_WB_AUTHOR_GRP_RESRCE A
    USING (SELECT #{authGrpCd} AS AUTH_GRP_CD,
                  #{resrceCd} AS RESRCE_CD
             FROM DUAL
          ) ORG
    ON (  A.AUTH_GRP_CD = ORG.AUTH_GRP_CD
      AND A.RESRCE_CD = ORG.RESRCE_CD)

    WHEN MATCHED THEN
    UPDATE
       SET A.USE_YN = #{useYn},
           A.MOD_DT = #{regDt},
           A.MOD_ID = #{regId}

    WHEN NOT MATCHED THEN
    INSERT (
        A.AUTH_GRP_CD,
        A.RESRCE_CD,
        A.USE_YN,
        A.REG_DT,
        A.REG_ID
    )
    VALUES (
        #{authGrpCd},
        #{resrceCd},
        #{useYn},
        #{regDt},
        #{regId}
    )
  </update>

  <select id="selectAuthGrpCdById" parameterType="string" resultType="string">
    /* AuthGroupMapper.selectAuthGrpCdById */
     SELECT AUTH_GRP_CD
       FROM TB_WB_USER_INFO A
      WHERE A.USER_ID = #{userId}
  </select>

  <select id="selectResrceByGrp" parameterType="string" resultType="DefaultMap">
    /* AuthGroupMapper.selectResrceByGrp */
     SELECT B.RESRCE_CD
       FROM TB_WB_AUTHOR_GRP_INFO A,
            TB_WB_AUTHOR_GRP_RESRCE B
      WHERE A.AUTH_GRP_CD = B.AUTH_GRP_CD
        AND B.AUTH_GRP_CD = (SELECT AUTH_GRP_CD FROM TB_WB_USER_INFO WHERE USER_ID = #{userId})
  </select>

  <update id="mergeAuthorExcept" parameterType="DefaultMap">
    /* AuthGroupMapper.mergeAuthorExcept */
    MERGE INTO TB_WB_AUTHOR_EXCEPT A
    USING (SELECT #{userId} USER_ID,
                  #{resrceCd} RESRCE_CD
             FROM DUAL
          ) ORG
    ON (  A.USER_ID = ORG.USER_ID
      AND A.RESRCE_CD = ORG.RESRCE_CD)

    WHEN MATCHED THEN
    UPDATE
       SET A.USE_YN = #{useYn},
           A.MOD_DT = #{modDt},
           A.MOD_ID = #{modId}

    WHEN NOT MATCHED THEN
    INSERT (
        A.USER_ID,
        A.RESRCE_CD,
        A.INCLD_EXCLD_FG,
        A.USE_YN,
        A.REG_DT,
        A.REG_ID
    )
    VALUES (
        #{userId},
        #{resrceCd},
        #{incldExcldFg},
        #{useYn},
        #{regDt},
        #{regId}
    )
  </update>

</mapper>
