<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.solbipos.sale.day.day.service.impl.DayMapper">

    <!-- 일자별 - 결제수단 컬럼 리스트 조회 -->
    <!--
        TABLE    : TB_CM_NMCODE
        PARAM    : dayVO
        COMMENTS : 일자별 - 결제수단 컬럼 리스트를 조회한다.
    -->
    <select id="getPayColList" parameterType="dayVO" resultType="DefaultMap">
        /* USE : DayMapper.getPayColList */
        <![CDATA[
        SELECT  tcn.NMCODE_CD AS PAY_CD, tcn.NMCODE_NM AS PAY_NM, tcn.NMCODE_ITEM_1 AS PAY_METHOD
        FROM    TB_CM_NMCODE tcn
        WHERE   tcn.NMCODE_GRP_CD   =   '024'
        AND     tcn.NMCODE_CD       NOT IN ('05', '12') /* 쿠폰은 결제수단이 아닌 할인내역으로 들어가므로 하드코딩으로 결제수단에 나오지 않도록 함. */
        ORDER
        BY      tcn.NMCODE_CD
        ]]>
    </select>
    <!-- 일자별 - 결제수단 컬럼 리스트 조회(현금영수증 포함) -->
    <!--
        TABLE    : TB_CM_NMCODE
        PARAM    : dayVO
        COMMENTS : 일자별 - 결제수단 컬럼 리스트를 조회한다.
    -->
    <select id="getPayColAddList" parameterType="dayVO" resultType="DefaultMap">
        /* USE : DayMapper.getPayColAddList */
        SELECT
        PAY_CD,
        PAY_NM,
        PAY_METHOD
        FROM
        (
            SELECT  tcn.NMCODE_CD AS PAY_CD, tcn.NMCODE_NM AS PAY_NM, tcn.NMCODE_ITEM_1 AS PAY_METHOD
            FROM    TB_CM_NMCODE tcn
            WHERE   tcn.NMCODE_GRP_CD   =   '024'
            AND     tcn.NMCODE_CD       NOT IN ('05', '12') /* 쿠폰은 결제수단이 아닌 할인내역으로 들어가므로 하드코딩으로 결제수단에 나오지 않도록 함. */
            ORDER
            BY      tcn.NMCODE_CD
        )
        UNION ALL
        (
            SELECT
            '021' AS PAY_CD,
            '현금영수증' AS PAY_NM,
            'CASH_BILL' AS PAY_METHOD
            FROM dual
        )
        ORDER BY PAY_CD
    </select>

    <!-- 일자별 - 모바일페이상세 컬럼 리스트 조회 -->
    <!--
        TABLE    : TB_CM_NMCODE
        PARAM    : dayVO
        COMMENTS : 일자별 - 모바일페이상세 컬럼 리스트를 조회한다.
    -->
    <select id="getMpayColList" parameterType="dayVO" resultType="DefaultMap">
        /* USE : DayMapper.getMpayColList */
        <![CDATA[
        SELECT  tcn.NMCODE_CD AS MPAY_CD, tcn.NMCODE_NM AS MPAY_NM, tcn.NMCODE_ITEM_1 AS MPAY_METHOD
        FROM    TB_CM_NMCODE tcn
        WHERE   tcn.NMCODE_GRP_CD   =   '109'
        ORDER
            BY      tcn.NMCODE_CD
        ]]>
    </select>

    <!-- 일자별 - 할인 컬럼 리스트 조회 -->
    <!--
        TABLE    : TB_CM_NMCODE
        PARAM    : dayVO
        COMMENTS : 일자별 - 할인 컬럼 리스트를 조회한다.
    -->
    <select id="getDcColList" parameterType="dayVO" resultType="DefaultMap">
        /* USE : DayMapper.getDcColList */
        <![CDATA[
        SELECT  tcn.NMCODE_CD AS DC_CD, tcn.NMCODE_NM AS DC_NM, tcn.NMCODE_ITEM_1 AS DC_METHOD
        FROM    TB_CM_NMCODE tcn
        WHERE   tcn.NMCODE_GRP_CD   =   '041'
        ORDER
        BY      tcn.NMCODE_CD
        ]]>
    </select>

    <!-- 코너별 탭 - 코너 컬럼 리스트 조회-->
    <!--
        TABLE    : TB_MS_CORNER, TB_MS_STORE
        COMMENTS : [매장]코너, [매장]매장 정보
    -->
    <select id="getCornerColList" parameterType="dayVO" resultType="DefaultMap">
        /* DayMapper.getCornerColList */
        SELECT
        tmc.STORE_CD,
        (CASE WHEN tmc.STORE_CD = '0000000' THEN '단독매장' ELSE tms.STORE_NM END) AS STORE_NM,
        tmc.CORNR_CD,
        tmc.CORNR_NM,
        (tmc.STORE_CD || tmc.CORNR_CD) AS STORE_CORNR_CD -- 매장코드 7자리
        FROM TB_MS_CORNER tmc,
        TB_MS_STORE tms
        WHERE 1=1
        AND tms.HQ_OFFICE_CD = #{hqOfficeCd}
        <if test='storeCd != null and storeCd != ""'>
            <![CDATA[
                AND tmc.STORE_CD = #{storeCd}
            ]]>
        </if>
        AND tmc.STORE_CD = tms.STORE_CD
        GROUP BY tmc.STORE_CD, tmc.CORNR_CD, tmc.CORNR_NM, tms.STORE_NM
        ORDER BY tmc.STORE_CD, tmc.CORNR_CD
    </select>

    <!-- 외식테이블 탭 - 외식테이블 컬럼 리스트 조회-->
    <!--
        TABLE    : TB_MS_TABLE
        COMMENTS : [매장]테이블
    -->
    <select id="getTableColList" parameterType="dayVO" resultType="DefaultMap">
        /* DayMapper.getTableColList */
        SELECT
        tmt.STORE_CD,
        tmt.TBL_CD,
        tmt.TBL_NM
        FROM TB_MS_TABLE_V01 tmt
        WHERE 1=1
        AND     USE_YN ='Y'
        <if test='storeCd != null and storeCd != ""'>
            <![CDATA[
                AND tmt.STORE_CD = #{storeCd}
            ]]>
        </if>
        ORDER BY tmt.STORE_CD, tmt.TBL_CD
    </select>

    <!-- 포스별 탭 - 포스 컬럼 리스트 조회-->
    <!--
        TABLE    : TB_MS_POS
        COMMENTS : [매장]포스 정보
    -->
    <select id="getPosColList" parameterType="dayVO" resultType="DefaultMap">
        /* DayMapper.getPosColList */
        SELECT
        tmp.STORE_CD,
        ('[' || tmp.STORE_CD || '] ' || (CASE WHEN tms.STORE_CD = '0000000' THEN '단독매장' ELSE tms.STORE_NM END)) AS STORE_NM,
        tmp.POS_NO,
        ('[' || tmp.POS_NO || '] ' || tmp.POS_NM) AS POS_NM,
        (tmp.STORE_CD || tmp.POS_NO) AS STORE_POS_NO
        FROM TB_MS_POS tmp,
        TB_MS_STORE tms
        WHERE 1=1
        AND tms.HQ_OFFICE_CD = #{hqOfficeCd}
        <if test='storeCd != null and storeCd != ""'>
            <![CDATA[
                AND tmp.STORE_CD = #{storeCd}
            ]]>
        </if>
        AND tms.STORE_CD = tmp.STORE_CD
        ORDER BY tmp.STORE_CD, tmp.POS_NO
    </select>

    <!-- 시간대별 탭 - 시간대 리스트 조회-->
    <!--
        TABLE    : TB_MS_POS
        COMMENTS : [매장]포스 정보
    -->
    <select id="getTimeSlotList" parameterType="dayVO" resultType="DefaultMap">
        /* DayMapper.getTimeSlotList */
        <!-- 프차 -->
        <if test='hqOfficeCd != null and hqOfficeCd != "00000"'>
            SELECT  NMCODE_NM AS NAME,
                    MIN(NMCODE_CD) KEEP(DENSE_RANK FIRST ORDER BY NMCODE_ITEM_1) || '~' ||LPAD(MAX(NMCODE_CD) KEEP(DENSE_RANK LAST ORDER BY NMCODE_ITEM_1) + 1, 2, '0') AS VALUE
            FROM 	TB_HQ_NMCODE
            WHERE 	HQ_OFFICE_CD = #{hqOfficeCd}
            AND 	NMCODE_GRP_CD = '001'
            GROUP
            BY      NMCODE_NM
            ORDER
            BY      VALUE
        </if>
        <!-- 단독매장 -->
        <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
            SELECT  NMCODE_NM AS NAME,
                    MIN(NMCODE_CD) KEEP(DENSE_RANK FIRST ORDER BY NMCODE_ITEM_1) || '~' ||LPAD(MAX(NMCODE_CD) KEEP(DENSE_RANK LAST ORDER BY NMCODE_ITEM_1) + 1, 2, '0') AS VALUE
            FROM 	TB_MS_STORE_NMCODE
            WHERE 	STORE_CD = #{storeCd}
            AND 	NMCODE_GRP_CD = '001'
            GROUP
            BY      NMCODE_NM
            ORDER
            BY      VALUE
        </if>
    </select>

    <!-- 일자별(일별종합 탭) - 일별종합 리스트 조회 -->
    <!--
        TABLE    : TB_SL_SALE_HDR, TB_SL_SALE_HDR_PAY, TB_SL_SALE_HDR_DC
        PARAM    : dayVO
        COMMENTS : 일자별(일별종합 탭) - 일별종합 리스트를 조회한다.
    -->
    <select id="getDayTotalList" parameterType="dayVO" resultType="DefaultMap">
        /* USE : DayMapper.getDayTotalList */
        SELECT  TO_CHAR(TO_DATE(tsshp.SALE_DATE, 'yyyymmdd'), 'yyyy-mm-dd') AS SALE_DATE
        ,       tsshp.YOIL
        ,       tsshp.STORE_CNT
        ,       tsshp.TOT_SALE_AMT
        ,       tsshp.TOT_DC_AMT
        ,       tsshp.REAL_SALE_AMT
        ,       tsshp.GA_AMT
        ,       tsshp.VAT_AMT
        ,       tsshp.TOT_TIP_AMT
        ,       tsshp.TOT_ETC_AMT
        ,       tsshp.CUP_AMT
        ,       tsshp.BILL_CNT
        ,       tsshp.BILL_UPRC
        ,       tssddp.GEN_REAL_SALE_AMT
        ,       DECODE(tsshp.REAL_SALE_AMT, 0, 0, (tssddp.GEN_REAL_SALE_AMT / tsshp.REAL_SALE_AMT)*100) AS GEN_REAL_SALE_RATE
        ,       tssddp.DLVR_REAL_SALE_AMT
        ,       DECODE(tsshp.REAL_SALE_AMT, 0, 0, (tssddp.DLVR_REAL_SALE_AMT / tsshp.REAL_SALE_AMT)*100) AS DLVR_REAL_SALE_RATE
        ,       tssddp.PACK_REAL_SALE_AMT
        ,       DECODE(tsshp.REAL_SALE_AMT, 0, 0, (tssddp.PACK_REAL_SALE_AMT / tsshp.REAL_SALE_AMT)*100) AS PACK_REAL_SALE_RATE
        ,       <foreach collection="arrPayCol" item="item" separator="+">
                    NVL(tsshp.PAY${item}, 0)
                </foreach> +  NVL(tsshp.PAY02, 0) +  NVL(tsshp.PAY021, 0) AS TOT_PAY_AMT
        ,       <foreach collection="arrPayCol" item="item" separator=",">
                    tsshp.PAY${item} AS PAY${item}
                </foreach>
        ,       tsshp.PAY02 AS PAY02 -- 현금
        ,       tsshp.PAY021 AS PAY021 -- 현금영수증
        FROM    (
                    SELECT  SALE_DATE
                    ,       TO_CHAR(TO_DATE(SALE_DATE, 'YYYYMMDD'), 'DY') AS YOIL
                    ,       COUNT(DISTINCT STORE_CD) AS STORE_CNT
                    ,       SUM(TOT_SALE_AMT) AS TOT_SALE_AMT
                    ,       SUM(TOT_DC_AMT) AS TOT_DC_AMT
                    ,       SUM(REAL_SALE_AMT) AS REAL_SALE_AMT
                    ,       SUM(REAL_SALE_AMT) - SUM(VAT_AMT) AS GA_AMT
                    ,       SUM(VAT_AMT) AS VAT_AMT
                    ,       SUM(TOT_TIP_AMT) AS TOT_TIP_AMT
                    ,       SUM(TOT_ETC_AMT) AS TOT_ETC_AMT
                    ,       SUM(CUP_AMT) AS CUP_AMT
                    ,       SUM(REAL_SALE_CNT) AS BILL_CNT
                    ,       DECODE(SUM(REAL_SALE_CNT), 0, 0, ROUND(SUM(REAL_SALE_AMT) / SUM(REAL_SALE_CNT))) AS BILL_UPRC
                    ,       <foreach collection="arrPayCol" item="item" separator=",">
                                SUM(PAY_AMT_${item}) AS PAY${item}
                            </foreach>,
                            SUM(NON_CASH_AMT) AS PAY02,
                            SUM(APPR_CASH_AMT) AS PAY021
                    FROM    TB_SL_DAILY_TOTAL tsdt
                    WHERE   tsdt.HQ_OFFICE_CD  = #{hqOfficeCd}
                    <if test='storeCdQuery != null and storeCdQuery != ""'>
                        AND tsdt.STORE_CD IN (${storeCdQuery})
                    </if>
                    <if test='orgnFg != null and orgnFg == "H"'>
                        AND (
                                'N' = (SELECT NVL(MAX(ENVST_VAL), 'N') FROM TB_HQ_ENVST WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND ENVST_CD = '0001')
                            OR  tsdt.STORE_CD IN (SELECT STORE_CD FROM TB_HQ_EMPLOYEE_STORE_V08 WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND EMP_NO = #{empNo})
                            )
                    </if>
                    AND     tsdt.SALE_DATE BETWEEN #{startDate} AND #{endDate}
                    GROUP BY SALE_DATE
                ) tsshp
        ,       (   SELECT	tssd.SALE_DATE
                    , SUM(CASE WHEN tssd.DLVR_PACK_FG = '1' THEN tssd.REAL_SALE_AMT ELSE 0 END) AS GEN_REAL_SALE_AMT
                    , SUM(CASE WHEN tssd.DLVR_PACK_FG = '2' THEN tssd.REAL_SALE_AMT ELSE 0 END) AS DLVR_REAL_SALE_AMT
                    , SUM(CASE WHEN tssd.DLVR_PACK_FG = '3' THEN tssd.REAL_SALE_AMT ELSE 0 END) AS PACK_REAL_SALE_AMT
                    FROM	TB_SL_DAILY_DTL_DLVR tssd
                    WHERE	tssd.HQ_OFFICE_CD	=	#{hqOfficeCd}
                    <if test='storeCdQuery != null and storeCdQuery != ""'>
                        AND tssd.STORE_CD IN (${storeCdQuery})
                    </if>
                    <if test='orgnFg != null and orgnFg == "H"'>
                        AND (
                                'N' = (SELECT NVL(MAX(ENVST_VAL), 'N') FROM TB_HQ_ENVST WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND ENVST_CD = '0001')
                            OR  tssd.STORE_CD IN (SELECT STORE_CD FROM TB_HQ_EMPLOYEE_STORE_V08 WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND EMP_NO = #{empNo})
                            )
                    </if>
                    AND     tssd.SALE_DATE BETWEEN #{startDate} AND #{endDate}
                    GROUP
                    BY      tssd.SALE_DATE
                ) tssddp
        WHERE   tssddp.SALE_DATE (+) = tsshp.SALE_DATE
        ORDER
        BY      tsshp.SALE_DATE DESC
    </select>

    <!-- 일자(현금)종합 (일별종합 탭) - 일별종합 리스트 조회 -->
    <!--
        TABLE    : TB_SL_SALE_HDR, TB_SL_SALE_HDR_PAY, TB_SL_SALE_HDR_DC
        PARAM    : dayVO
        COMMENTS : 일자별(일별종합 탭) - 일별종합 리스트를 조회한다.
    -->
    <select id="getDayCashTotalList" parameterType="dayVO" resultType="DefaultMap">
        /* USE : DayMapper.getDayCashTotalList */
        SELECT  TO_CHAR(TO_DATE(tsshp.SALE_DATE, 'yyyymmdd'), 'yyyy-mm-dd') AS SALE_DATE
        ,       TO_CHAR(TO_DATE(tsshp.SALE_DATE, 'YYYYMMDD'), 'DY') AS YOIL
        ,       tsshp.STORE_CNT
        ,       tsshp.TOT_SALE_AMT
        ,       tsshp.TOT_DC_AMT
        ,       tsshp.REAL_SALE_AMT
        ,       tsshp.GA_AMT
        ,       tsshp.VAT_AMT
        ,       tsshp.TOT_TIP_AMT
        ,       tsshp.TOT_ETC_AMT
        ,       tsshp.CUP_AMT
        ,       tsshp.BILL_CNT
        ,       tsshp.BILL_UPRC
        ,       tssddp.GEN_REAL_SALE_AMT
        ,       DECODE(tsshp.REAL_SALE_AMT, 0, 0, (tssddp.GEN_REAL_SALE_AMT / tsshp.REAL_SALE_AMT)*100) AS GEN_REAL_SALE_RATE
        ,       tssddp.DLVR_REAL_SALE_AMT
        ,       DECODE(tsshp.REAL_SALE_AMT, 0, 0, (tssddp.DLVR_REAL_SALE_AMT / tsshp.REAL_SALE_AMT)*100) AS DLVR_REAL_SALE_RATE
        ,       tssddp.PACK_REAL_SALE_AMT
        ,       DECODE(tsshp.REAL_SALE_AMT, 0, 0, (tssddp.PACK_REAL_SALE_AMT / tsshp.REAL_SALE_AMT)*100) AS PACK_REAL_SALE_RATE
        ,       <foreach collection="arrPayCol" item="item" separator="+">
                    NVL(tsshp.PAY${item}, 0)
                </foreach> + tsshpd.PAY0 + tsshpd.PAY1 + tsshpd.PAY3 + tsshpd.PAY4 AS TOT_PAY_AMT
        ,       <foreach collection="arrPayCol" item="item" separator=",">
                    tsshp.PAY${item} AS PAY${item}
                </foreach>
        ,       tsshpd.PAY0 -- 현금(매장)
        ,       tsshpd.PAY1 -- 현금(CID)
        ,       tsshpd.PAY3 -- 현금(배민)
        ,       tsshpd.PAY4 -- 현금(요기요)
        FROM    (
                    SELECT  SALE_DATE
                    ,       COUNT(DISTINCT STORE_CD) AS STORE_CNT
                    ,       SUM(TOT_SALE_AMT) AS TOT_SALE_AMT
                    ,       SUM(TOT_DC_AMT) AS TOT_DC_AMT
                    ,       SUM(REAL_SALE_AMT) AS REAL_SALE_AMT
                    ,       SUM(REAL_SALE_AMT) - SUM(VAT_AMT) AS GA_AMT
                    ,       SUM(VAT_AMT) AS VAT_AMT
                    ,       SUM(TOT_TIP_AMT) AS TOT_TIP_AMT
                    ,       SUM(TOT_ETC_AMT) AS TOT_ETC_AMT
                    ,       SUM(CUP_AMT) AS CUP_AMT
                    ,       SUM(BILL_CNT) AS BILL_CNT
                    ,       DECODE(SUM(BILL_CNT), 0, 0, ROUND(SUM(REAL_SALE_AMT) / SUM(BILL_CNT))) AS BILL_UPRC
                    ,       <foreach collection="arrPayCol" item="item" separator=",">
                                SUM(PAY_AMT_${item}) AS PAY${item}
                            </foreach>
                    FROM    TB_SL_DAILY_TOTAL tsdt
                    WHERE   tsdt.HQ_OFFICE_CD  = #{hqOfficeCd}
                    <if test='storeCdQuery != null and storeCdQuery != ""'>
                        AND tsdt.STORE_CD IN (${storeCdQuery})
                    </if>
                    <if test='orgnFg != null and orgnFg == "H"'>
                        AND (
                                'N' = (SELECT NVL(MAX(ENVST_VAL), 'N') FROM TB_HQ_ENVST WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND ENVST_CD = '0001')
                            OR  tsdt.STORE_CD IN (SELECT STORE_CD FROM TB_HQ_EMPLOYEE_STORE_V08 WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND EMP_NO = #{empNo})
                            )
                    </if>
                    AND     tsdt.SALE_DATE BETWEEN #{startDate} AND #{endDate}
                    GROUP BY SALE_DATE
                ) tsshp
        ,       (   SELECT	tssd.SALE_DATE
                    , SUM(CASE WHEN tssd.DLVR_PACK_FG = '1' THEN tssd.REAL_SALE_AMT ELSE 0 END) AS GEN_REAL_SALE_AMT
                    , SUM(CASE WHEN tssd.DLVR_PACK_FG = '2' THEN tssd.REAL_SALE_AMT ELSE 0 END) AS DLVR_REAL_SALE_AMT
                    , SUM(CASE WHEN tssd.DLVR_PACK_FG = '3' THEN tssd.REAL_SALE_AMT ELSE 0 END) AS PACK_REAL_SALE_AMT
                    FROM	TB_SL_DAILY_DTL_DLVR tssd
                    WHERE	tssd.HQ_OFFICE_CD	=	#{hqOfficeCd}
                    <if test='storeCdQuery != null and storeCdQuery != ""'>
                        AND tssd.STORE_CD IN (${storeCdQuery})
                    </if>
                    <if test='orgnFg != null and orgnFg == "H"'>
                        AND (
                                'N' = (SELECT NVL(MAX(ENVST_VAL), 'N') FROM TB_HQ_ENVST WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND ENVST_CD = '0001')
                            OR  tssd.STORE_CD IN (SELECT STORE_CD FROM TB_HQ_EMPLOYEE_STORE_V08 WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND EMP_NO = #{empNo})
                            )
                    </if>
                    AND     tssd.SALE_DATE BETWEEN #{startDate} AND #{endDate}
                    GROUP
                    BY      tssd.SALE_DATE
                ) tssddp
        ,       (
                    SELECT 	tsshp.SALE_DATE,
                            SUM(PAY_AMT) - NVL(SUM(CASE tsshd.DLVR_IN_FG WHEN '1' THEN PAY_AMT WHEN '3' THEN PAY_AMT WHEN '4' THEN PAY_AMT END), 0) AS PAY0,
                            SUM(CASE tsshd.DLVR_IN_FG WHEN '1' THEN PAY_AMT END) AS PAY1,
                            SUM(CASE tsshd.DLVR_IN_FG WHEN '3' THEN PAY_AMT END) AS PAY3,
                            SUM(CASE tsshd.DLVR_IN_FG WHEN '4' THEN PAY_AMT END) AS PAY4
                    FROM 	TB_SL_SALE_HDR_PAY tsshp
                    LEFT JOIN TB_SL_SALE_HDR_DLVR tsshd
                    ON      tsshd.STORE_CD = tsshp.STORE_CD
                    AND     tsshd.SALE_DATE = tsshp.SALE_DATE
                    AND     tsshd.POS_NO = tsshp.POS_NO
                    AND     tsshd.BILL_NO = tsshp.BILL_NO
                    WHERE 	tsshp.HQ_OFFICE_CD	=	#{hqOfficeCd}
                    AND 	tsshp.SALE_DATE BETWEEN #{startDate} AND #{endDate}
                    AND 	tsshp.PAY_CD = '02'
                    <if test='storeCdQuery != null and storeCdQuery != ""'>
                        AND tsshp.STORE_CD IN (${storeCdQuery})
                    </if>
                    <if test='orgnFg != null and orgnFg == "H"'>
                        AND (
                        'N' = (SELECT NVL(MAX(ENVST_VAL), 'N') FROM TB_HQ_ENVST WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND ENVST_CD = '0001')
                        OR  tsshp.STORE_CD IN (SELECT STORE_CD FROM TB_HQ_EMPLOYEE_STORE_V08 WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND EMP_NO = #{empNo})
                        )
                    </if>
                    GROUP
                    BY      tsshp.SALE_DATE
                ) tsshpd
        WHERE   tssddp.SALE_DATE (+) = tsshp.SALE_DATE
        AND     tsshpd.SALE_DATE (+) = tsshp.SALE_DATE
        ORDER
        BY      tsshp.SALE_DATE DESC
    </select>


    <!-- 매장별 매출현황 팝업 - 매장별 매출현황 조회 -->
    <!--
        TABLE    : TB_SL_SALE_HDR
        PARAM    : dayVO
        COMMENTS : 일자별(일별종합 탭) - 일자 매장별 매출현황 리스트를 조회한다.
    -->
    <select id="getDayStoreDtlList" parameterType="dayVO" resultType="DefaultMap">
        /* USE : DayMapper.getDayStoreDtlList */
        SELECT
        tssh.HQ_OFFICE_CD,
        tssh.STORE_CD,
        (SELECT STORE_NM FROM TB_MS_STORE WHERE HQ_OFFICE_CD = tssh.HQ_OFFICE_CD AND STORE_CD = tssh.STORE_CD) AS STORE_NM,
        SUM(tssh.TOT_SALE_AMT) AS TOT_SALE_AMT,
        SUM(tssh.TOT_DC_AMT) AS TOT_DC_AMT,
        SUM(tssh.REAL_SALE_AMT) AS REAL_SALE_AMT,
        SUM(tssh.SALE_CNT) AS SALE_CNT,
        SUM(tssh.RTN_SALE_CNT) AS RTN_SALE_CNT,
        SUM(tssh.BILL_CNT) AS BILL_CNT,
        DECODE(SUM(tssh.BILL_CNT), 0, 0, ROUND( SUM(tssh.REAL_SALE_AMT) / SUM(tssh.BILL_CNT))) AS BILL_UPRC
        FROM
        (
            SELECT
            HQ_OFFICE_CD,
            STORE_CD,
            SUM(TOT_SALE_AMT) AS TOT_SALE_AMT,
            SUM(TOT_DC_AMT) AS TOT_DC_AMT,
            SUM(REAL_SALE_AMT) AS REAL_SALE_AMT,
            SUM(CASE WHEN SALE_FG = '1' THEN 1 ELSE 0 END) AS SALE_CNT,
            SUM(CASE WHEN SALE_FG = '-1' THEN -1 ELSE 0 END) AS RTN_SALE_CNT,
            SUM(CASE WHEN SALE_FG = '1' THEN 1 ELSE 0 END) + SUM(CASE WHEN SALE_FG = '-1' THEN -1 ELSE 0 END)  AS BILL_CNT
            FROM TB_SL_SALE_HDR
            WHERE 1=1
            AND HQ_OFFICE_CD = #{hqOfficeCd}
            <choose>
                <when test='gubun != null'>
                    <!-- 기간별매출 > 일자별 탭 > 일별종합 탭 -->
                    <if test='gubun == "day"'>
                        <![CDATA[
                            AND SALE_DATE = #{saleDate}
                        ]]>
                    </if>
                    <!-- 기간별매출 > 월별 탭 > 월별종합 탭 -->
                    <if test='gubun == "month"'>
                        <![CDATA[
                            AND SALE_DATE BETWEEN #{yearMonth}||'01' AND #{yearMonth} ||'31'
                        ]]>
                    </if>
                </when>
            </choose>
            <if test='storeCdQuery != null and storeCdQuery != ""'>
                AND STORE_CD IN (${storeCdQuery})
            </if>
            <if test='orgnFg != null and orgnFg == "H"'>
                AND (
                    'N' = (SELECT NVL(MAX(ENVST_VAL), 'N') FROM TB_HQ_ENVST WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND ENVST_CD = '0001')
                OR  STORE_CD IN (SELECT STORE_CD FROM TB_HQ_EMPLOYEE_STORE_V08 WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND EMP_NO = #{empNo})
                )
            </if>
            GROUP BY HQ_OFFICE_CD, STORE_CD, SALE_FG
        ) tssh
        WHERE 1=1
        GROUP BY tssh.HQ_OFFICE_CD, tssh.STORE_CD
        ORDER BY tssh.HQ_OFFICE_CD, tssh.STORE_CD
    </select>



    <!-- 매장별 매출현황 팝업 - 매장별 매출현황 조회 -->
    <!--
        TABLE    : TB_SL_SALE_HDR
        PARAM    : dayVO
        COMMENTS : 일자별(일별종합 탭) - 일자 매장별 매출현황 리스트를 조회한다.
    -->
    <select id="getDayProdDtlList" parameterType="dayVO" resultType="DefaultMap">
        /* USE : DayMapper.getDayProdDtlList */
        SELECT  FN_GET_PROD_CLASS_CD_NM_STR(tmp.STORE_CD, tmp.PROD_CLASS_CD, 'NM_STR') AS PATH_NM,
                tssd.PROD_CD,
                tmp.PROD_NM,
                DECODE(SUM(tssd.SALE_QTY), 0, 0, SUM(tssd.SALE_AMT)/SUM(tssd.SALE_QTY)) AS SALE_UPRC,
                SUM(tssd.SALE_QTY) AS SALE_QTY,
                SUM(tssd.SALE_AMT) AS TOT_SALE_AMT,
                SUM(tssd.DC_AMT) AS TOT_DC_AMT,
                SUM(tssd.REAL_SALE_AMT) AS REAL_SALE_AMT
        FROM 	TB_SL_SALE_DTL tssd, TB_MS_PRODUCT tmp
        WHERE   1=1
        AND     tssd.HQ_OFFICE_CD = #{hqOfficeCd}
        <choose>
            <when test='gubun != null'>
                <!-- 기간별매출 > 일자별 탭 > 일별종합 탭 -->
                <if test='gubun == "day"'>
                    <![CDATA[
                        AND SALE_DATE = #{saleDate}
                    ]]>
                </if>
                <!-- 기간별매출 > 월별 탭 > 월별종합 탭 -->
                <if test='gubun == "month"'>
                    <![CDATA[
                        AND SALE_DATE BETWEEN #{yearMonth}||'01' AND #{yearMonth} ||'31'
                    ]]>
                </if>
            </when>
        </choose>
        <if test='storeCdQuery != null and storeCdQuery != ""'>
            AND tssd.STORE_CD IN (${storeCdQuery})
        </if>
        AND 	tmp.STORE_CD = tssd.STORE_CD
        AND 	tmp.PROD_CD = tssd.PROD_CD
        GROUP BY tssd.PROD_CD, tmp.PROD_NM, tmp.STORE_CD, tmp.PROD_CLASS_CD
    </select>


    <!-- 매장별 매출현황 팝업 - 매장별 매출현황 조회 -->
    <!--
        TABLE    : TB_SL_SALE_HDR
        PARAM    : dayVO
        COMMENTS : 일자별(일별종합 탭) - 일자 매장별 매출현황 리스트를 조회한다.
    -->
    <select id="getDayDtlList" parameterType="dayVO" resultType="DefaultMap">
        /* USE : DayMapper.getDayDtlList */
        SELECT TO_CHAR(TO_DATE(SALE_DATE, 'yyyymmdd'), 'yyyy-mm-dd') AS SALE_DATE,
                TOT_SALE_AMT,
                TOT_DC_AMT,
                REAL_SALE_AMT,
                SALE_CNT,
                RTN_SALE_CNT,
                REAL_SALE_CNT AS BILL_CNT,
                DECODE(NVL(REAL_SALE_CNT, 0), 0, 0, (ROUND(REAL_SALE_AMT / REAL_SALE_CNT))) AS BILL_UPRC
        FROM 	TB_SL_DAILY_TOTAL
        WHERE   1=1
        AND     HQ_OFFICE_CD = #{hqOfficeCd}
        <choose>
            <when test='gubun != null'>
                <!-- 기간별매출 > 일자별 탭 > 일별종합 탭 -->
                <if test='gubun == "day"'>
                    <![CDATA[
                        AND SALE_DATE = #{saleDate}
                    ]]>
                </if>
                <!-- 기간별매출 > 월별 탭 > 월별종합 탭 -->
                <if test='gubun == "month"'>
                    <![CDATA[
                        AND SALE_DATE BETWEEN #{yearMonth}||'01' AND #{yearMonth} ||'31'
                    ]]>
                </if>
            </when>
        </choose>
        <if test='storeCdQuery != null and storeCdQuery != ""'>
            AND STORE_CD IN (${storeCdQuery})
        </if>
        ORDER BY SALE_DATE
    </select>


    <!-- 매장별 매출현황 팝업 - 매장별 매출현황 조회 -->
    <!--
        TABLE    : TB_SL_SALE_HDR
        PARAM    : dayVO
        COMMENTS : 일자별(일별종합 탭) - 일자 매장별 매출현황 리스트를 조회한다.
    -->
    <select id="getDaySumAvgList" parameterType="dayVO" resultType="DefaultMap">
        /* USE : DayMapper.getDaySumAvgList */
        SELECT  TO_CHAR(TO_DATE(SALE_DATE, 'yyyymmdd'), 'yyyy-mm-dd') AS SALE_DATE,
                SUM(TOT_SALE_AMT) AS TOT_SALE_AMT,
                SUM(TOT_DC_AMT) AS TOT_DC_AMT,
                SUM(REAL_SALE_AMT) AS REAL_SALE_AMT,
                ROUND(AVG(TOT_SALE_AMT)) AS AVG_SALE_AMT,
                ROUND(AVG(TOT_DC_AMT)) AS AVG_DC_AMT,
                ROUND(AVG(REAL_SALE_AMT)) AS AVG_REAL_SALE_AMT
        FROM 	TB_SL_SALE_HDR
        WHERE   1=1
        AND     HQ_OFFICE_CD = #{hqOfficeCd}
        <choose>
            <when test='gubun != null'>
                <!-- 기간별매출 > 일자별 탭 > 일별종합 탭 -->
                <if test='gubun == "day"'>
                    <![CDATA[
                                AND SALE_DATE = #{saleDate}
                            ]]>
                </if>
                <!-- 기간별매출 > 월별 탭 > 월별종합 탭 -->
                <if test='gubun == "month"'>
                    <![CDATA[
                                AND SALE_DATE BETWEEN #{yearMonth}||'01' AND #{yearMonth} ||'31'
                            ]]>
                </if>
            </when>
        </choose>
        <if test='storeCdQuery != null and storeCdQuery != ""'>
            AND STORE_CD IN (${storeCdQuery})
        </if>
        GROUP BY SALE_DATE
        ORDER BY SALE_DATE
    </select>


    <!-- 매장별 할인내역 팝업 - 매장별 할인내역 조회 -->
    <!--
        TABLE    : TB_SL_SALE_HDR_DC
        PARAM    : dayVO
        COMMENTS : 일자별(할인구분별 탭) - 할인구분 리스트를 조회한다.
    -->
    <select id="getDayStoreDcList" parameterType="dayVO" resultType="DefaultMap">
        /* USE : DayMapper.getDayStoreDcList */
        SELECT
        tsshd.HQ_OFFICE_CD,
        tsshd.STORE_CD,
        (SELECT STORE_NM FROM TB_MS_STORE WHERE HQ_OFFICE_CD = tsshd.HQ_OFFICE_CD AND STORE_CD = tsshd.STORE_CD) AS STORE_NM,
        <foreach collection="arrDcCol" item="item" separator="+">
            NVL(tsshd.DC${item}, 0)
        </foreach> AS TOT_DC_AMT,
        <foreach collection="arrDcCol" item="item" separator=",">
            NVL(tsshd.DC${item}, 0) AS DC${item}
        </foreach>
        FROM
        (
            SELECT
            HQ_OFFICE_CD,
            STORE_CD,
            <foreach collection="arrDcCol" item="item" separator=",">
                SUM(DC${item}) AS DC${item}
            </foreach>
            FROM
            (
                SELECT
                HQ_OFFICE_CD,
                STORE_CD,
                DC_CD,
                DC_AMT
                FROM TB_SL_SALE_HDR_DC
                WHERE 1=1
                AND HQ_OFFICE_CD = #{hqOfficeCd}
                <choose>
                    <when test='gubun != null'>
                        <!-- 기간별매출 > 일자별 탭 > 일별종합 탭 -->
                        <if test='gubun == "day"'>
                            <![CDATA[
                                AND SALE_DATE = #{saleDate}
                            ]]>
                        </if>
                        <!-- 기간별매출 > 월별 탭 > 월별종합 탭 -->
                        <if test='gubun == "month"'>
                            <![CDATA[
                                AND SALE_DATE BETWEEN #{yearMonth}||'01' AND #{yearMonth} ||'31'
                            ]]>
                        </if>
                    </when>
                </choose>
                <if test='storeCdQuery != null and storeCdQuery != ""'>
                    AND STORE_CD IN (${storeCdQuery})
                </if>
                <if test='orgnFg != null and orgnFg == "H"'>
                    AND (
                        'N' = (SELECT NVL(MAX(ENVST_VAL), 'N') FROM TB_HQ_ENVST WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND ENVST_CD = '0001')
                    OR  STORE_CD IN (SELECT STORE_CD FROM TB_HQ_EMPLOYEE_STORE_V08 WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND EMP_NO = #{empNo})
                    )
                </if>
            )
            PIVOT
            (
                SUM(DC_AMT)
                FOR DC_CD
                IN (${pivotDcCol})
            )
            GROUP BY HQ_OFFICE_CD, STORE_CD
        ) tsshd
        WHERE 1=1
        ORDER BY HQ_OFFICE_CD, STORE_CD
    </select>


    <!-- 일자별(할인구분별 탭) - 할인구분 리스트 조회 -->
    <!--
        TABLE    : TB_SL_SALE_HDR_DC
        PARAM    : dayVO
        COMMENTS : 일자별(할인구분별 탭) - 할인구분 리스트를 조회한다.
    -->
    <select id="getDayDcList" parameterType="dayVO" resultType="DefaultMap">
        /* USE : DayMapper.getDayDcList */
        <![CDATA[
        SELECT  TO_CHAR(TO_DATE(tsshd.SALE_DATE, 'yyyymmdd'), 'yyyy-mm-dd') AS SALE_DATE
        ,       TO_CHAR(TO_DATE(tsshd.SALE_DATE, 'YYYYMMDD'), 'DY') AS YOIL
        ,       tsshd.STORE_CNT
        ]]>
        ,       <foreach collection="arrDcCol" item="item" separator="+">
                    NVL(tsshd.DC${item}, 0)
                </foreach> AS TOT_DC_AMT
        ,       <foreach collection="arrDcCol" item="item" separator=",">
                    tsshd.DC${item} AS DC${item}
                </foreach>
        <![CDATA[
        FROM    (   SELECT  SALE_DATE
                    ,       COUNT(STORE_CD) AS STORE_CNT
        ]]>
                    ,       <foreach collection="arrDcCol" item="item" separator=",">
                                SUM(DC${item}) AS DC${item}
                            </foreach>
        <![CDATA[
                    FROM    (   SELECT  tsshd.SALE_DATE, tsshd.STORE_CD, tsshd.DC_CD, tsshd.DC_AMT
                                FROM    TB_SL_SALE_HDR_DC tsshd
                                WHERE   tsshd.HQ_OFFICE_CD  = #{hqOfficeCd}
                                AND     tsshd.SALE_DATE BETWEEN #{startDate} AND #{endDate}
        ]]>
                                <if test='storeCdQuery != null and storeCdQuery != ""'>
                                    AND tsshd.STORE_CD IN (${storeCdQuery})
                                </if>
                                <if test='orgnFg != null and orgnFg == "H"'>
                                    AND (
                                        'N' = (SELECT NVL(MAX(ENVST_VAL), 'N') FROM TB_HQ_ENVST WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND ENVST_CD = '0001')
                                    OR  tsshd.STORE_CD IN (SELECT STORE_CD FROM TB_HQ_EMPLOYEE_STORE_V08 WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND EMP_NO = #{empNo})
                                    )
                                </if>
        <![CDATA[
                            )
                    PIVOT   (
                                SUM(DC_AMT)
                                FOR DC_CD
                                IN (${pivotDcCol})
                            )
                    GROUP BY SALE_DATE
                ) tsshd
        ORDER
        BY      tsshd.SALE_DATE DESC
        ]]>
    </select>


    <!-- 일자별(과면세별 탭) - 과면세 리스트 조회 -->
    <!--
        TABLE    : TB_SL_SALE_HDR
        PARAM    : dayVO
        COMMENTS : 일자별(과면세별 탭) - 과면세 리스트 조회한다.
    -->
    <select id="getDayTaxList" parameterType="dayVO" resultType="DefaultMap">
        /* USE : DayMapper.getDayTaxList */
        <![CDATA[
        SELECT  TO_CHAR(TO_DATE(tssh.SALE_DATE, 'yyyymmdd'), 'yyyy-mm-dd') AS SALE_DATE
        ,       tssh.YOIL
        ,       tssh.STORE_CNT
        ,       tssh.TOT_SALE_AMT
        ,       tssh.TOT_DC_AMT
        ,       tssh.REAL_SALE_AMT
        ,       tssh.TAX_SALE_AMT
        ,       tssh.GA_AMT
        ,       tssh.VAT_AMT
        ,       tssh.NO_TAX_SALE_AMT
        ,       tssh.NET_SALE_AMT
        FROM    (   SELECT  tssh.SALE_DATE
                    ,       TO_CHAR(TO_DATE(tssh.SALE_DATE, 'YYYYMMDD'), 'DY') AS YOIL
                    ,       COUNT(tssh.STORE_CD) AS STORE_CNT
                    ,       SUM(tssh.TOT_SALE_AMT) AS TOT_SALE_AMT
                    ,       SUM(tssh.TOT_DC_AMT) AS TOT_DC_AMT
                    ,       SUM(tssh.REAL_SALE_AMT) AS REAL_SALE_AMT
                    ,       SUM(tssh.TAX_SALE_AMT) AS TAX_SALE_AMT
                    ,       SUM(tssh.TAX_SALE_AMT) - SUM(tssh.VAT_AMT) AS GA_AMT
                    ,       SUM(tssh.VAT_AMT) AS VAT_AMT
                    ,       SUM(tssh.NO_TAX_SALE_AMT) AS NO_TAX_SALE_AMT
                    ,       SUM(tssh.NET_SALE_AMT) AS NET_SALE_AMT
                    FROM    (   SELECT  tssh.SALE_DATE, tssh.STORE_CD
                                ,       SUM(tssh.TOT_SALE_AMT) AS TOT_SALE_AMT
                                ,       SUM(tssh.TOT_DC_AMT) AS TOT_DC_AMT
                                ,       SUM(tssh.REAL_SALE_AMT) AS REAL_SALE_AMT
                                ,       SUM(tssh.TAX_SALE_AMT) AS TAX_SALE_AMT
                                ,       SUM(tssh.TAX_SALE_AMT) - SUM(tssh.VAT_AMT) AS GA_AMT
                                ,       SUM(tssh.VAT_AMT) AS VAT_AMT
                                ,       SUM(tssh.NO_TAX_SALE_AMT) AS NO_TAX_SALE_AMT
                                ,       SUM(tssh.NET_SALE_AMT) AS NET_SALE_AMT
                                FROM    TB_SL_SALE_HDR tssh
                                WHERE   tssh.HQ_OFFICE_CD = #{hqOfficeCd}
        ]]>
                            <if test='storeCdQuery != null and storeCdQuery != ""'>
                                AND tssh.STORE_CD IN (${storeCdQuery})
                            </if>
                            <if test='orgnFg != null and orgnFg == "H"'>
                                AND (
                                    'N' = (SELECT NVL(MAX(ENVST_VAL), 'N') FROM TB_HQ_ENVST WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND ENVST_CD = '0001')
                                OR  tssh.STORE_CD IN (SELECT STORE_CD FROM TB_HQ_EMPLOYEE_STORE_V08 WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND EMP_NO = #{empNo})
                                )
                            </if>
        <![CDATA[
                                AND     tssh.SALE_DATE  BETWEEN #{startDate} AND #{endDate}
                                GROUP
                                BY      tssh.SALE_DATE, tssh.STORE_CD
                            ) tssh
                    GROUP
                    BY      tssh.SALE_DATE
                ) tssh
        ORDER
        BY      tssh.SALE_DATE DESC
        ]]>
    </select>


    <!-- 일자별(시간대별 탭) - 시간대별 리스트 조회 -->
    <!--
        TABLE    : TB_SL_SALE_HDR
        PARAM    : dayVO
        COMMENTS : 일자별(시간대별 탭) - 시간대별 리스트 조회한다.
    -->
    <select id="getDayTimeList" parameterType="dayVO" resultType="DefaultMap">
        /* USE : DayMapper.getDayTimeList */
        <if test="optionFg != null and optionFg.toString() == 'time'">
        SELECT TO_CHAR(TO_DATE(tssh.SALE_DATE, 'yyyymmdd'), 'yyyy-mm-dd') AS SALE_DATE
             , tssh.YOIL
             , COUNT(tssh.STORE_cd) AS STORE_CNT
             , SUM(tssh.REAL_SALE_AMT) AS REAL_SALE_AMT
             , SUM(tssh.SALE_CNT) AS SALE_CNT
             , SUM(tssh.TOT_GUEST_CNT) AS TOT_GUEST_CNT
            ${sQuery1}
        FROM (
                 SELECT SALE_DATE
                      , TO_CHAR(TO_DATE(SALE_DATE, 'YYYYMMDD'), 'DY') AS YOIL
                      , STORE_CD
                      , SUM(REAL_SALE_AMT) AS REAL_SALE_AMT
                      , SUM(SALE_CNT) AS SALE_CNT
                      , SUM(GUEST_CNT_1) AS TOT_GUEST_CNT
                        ${sQuery2}
                 FROM TB_SL_DAILY_TIME
                WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                 AND SALE_DATE  BETWEEN #{startDate} AND #{endDate}
                <if test='storeCdQuery != null and storeCdQuery != ""'>
                    AND STORE_CD IN (${storeCdQuery})
                </if>
                <if test='orgnFg != null and orgnFg == "H"'>
                    AND (
                        'N' = (SELECT NVL(MAX(ENVST_VAL), 'N') FROM TB_HQ_ENVST WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND ENVST_CD = '0001')
                    OR  STORE_CD IN (SELECT STORE_CD FROM TB_HQ_EMPLOYEE_STORE_V08 WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND EMP_NO = #{empNo})
                    )
                </if>
                <if test='startTime != "0" or endTime != "23"'>
                    AND SALE_HOUR BETWEEN #{startTime} AND #{endTime}
                </if>
                 GROUP BY SALE_DATE, STORE_CD
             ) tssh
        GROUP BY SALE_DATE, YOIL
        ORDER BY SALE_DATE DESC
        </if>
        <if test="optionFg != null and optionFg.toString() == 'timeSlot'">
        SELECT TO_CHAR(TO_DATE(tssh.SALE_DATE, 'yyyymmdd'), 'yyyy-mm-dd') AS SALE_DATE
             , tssh.YOIL
             , COUNT(tssh.STORE_cd) AS STORE_CNT
             , SUM(tssh.REAL_SALE_AMT) AS REAL_SALE_AMT
             , SUM(tssh.SALE_CNT) AS SALE_CNT
             , SUM(tssh.TOT_GUEST_CNT) AS TOT_GUEST_CNT
            ${sQuery1}
        FROM (
                 SELECT SALE_DATE
                      , TO_CHAR(TO_DATE(SALE_DATE, 'YYYYMMDD'), 'DY') AS YOIL
                      , STORE_CD
                      , SUM(REAL_SALE_AMT) AS REAL_SALE_AMT
                      , SUM(SALE_CNT) AS SALE_CNT
                      , SUM(GUEST_CNT) AS TOT_GUEST_CNT
                        ${sQuery2}
                 FROM   (
                            SELECT  SALE_DATE
                                ,   TO_CHAR(TO_DATE(SALE_DATE, 'YYYYMMDD'), 'DY') AS YOIL
                                ,   STORE_CD
                                ,   SUM(REAL_SALE_AMT) AS REAL_SALE_AMT
                                ,   SUM(SALE_CNT) AS SALE_CNT
                                ,   SUM(GUEST_CNT_1) AS GUEST_CNT
                                ,	thn.TIME_SLOT
                            FROM 	TB_SL_DAILY_TIME tsdt,
                                    (SELECT     MIN(NMCODE_CD) KEEP(DENSE_RANK FIRST ORDER BY NMCODE_ITEM_1) || LPAD(MAX(NMCODE_CD) KEEP(DENSE_RANK LAST ORDER BY NMCODE_ITEM_1) + 1, 2, '0') AS TIME_SLOT,
                                                MIN(NMCODE_CD) KEEP(DENSE_RANK FIRST ORDER BY NMCODE_ITEM_1) AS START_TIME,
                                                MAX(NMCODE_CD) KEEP(DENSE_RANK LAST ORDER BY NMCODE_ITEM_1) AS END_TIME
                                    <!-- 프차 -->
                                    <if test='hqOfficeCd != null and hqOfficeCd != "00000"'>
                                        FROM 	TB_HQ_NMCODE
                                        WHERE 	HQ_OFFICE_CD = #{hqOfficeCd}
                                    </if>
                                    <!-- 단독매장 -->
                                    <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
                                        FROM 	TB_MS_STORE_NMCODE
                                        WHERE 	STORE_CD = #{storeCd}
                                    </if>
                                    AND		NMCODE_GRP_CD ='001'
                                    GROUP BY NMCODE_NM
                                    ) thn
                            WHERE 	tsdt.HQ_OFFICE_CD = #{hqOfficeCd}
                            AND 	tsdt.SALE_DATE BETWEEN #{startDate} AND #{endDate}
                            AND     tsdt.SALE_HOUR BETWEEN thn.START_TIME AND thn.END_TIME
                            <if test='storeCdQuery != null and storeCdQuery != ""'>
                        		AND STORE_CD IN (${storeCdQuery})
                        	</if>
                            <if test='orgnFg != null and orgnFg == "H"'>
                                AND (
                                'N' = (SELECT NVL(MAX(ENVST_VAL), 'N') FROM TB_HQ_ENVST WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND ENVST_CD = '0001')
                                OR  STORE_CD IN (SELECT STORE_CD FROM TB_HQ_EMPLOYEE_STORE_V08 WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND EMP_NO = #{empNo})
                                )
                            </if>
                            <if test='timeSlot != null and timeSlot != ""'>
                                AND TIME_SLOT = replace(#{timeSlot},'~','')
                            </if>
                            GROUP
                            BY      SALE_DATE, STORE_CD, TIME_SLOT
                        )
                 GROUP BY SALE_DATE, STORE_CD
             ) tssh
        GROUP BY SALE_DATE, YOIL
        ORDER BY SALE_DATE DESC
        </if>
    </select>

    <!-- 일자별(상품분류 탭) - 상품분류 MAX(depth) 값 가져오기  -->
    <!--
        TABLE    : TB_HQ_PRODUCT_CLASS
        PARAM    : dayVO
        COMMENTS : 일자별(상품분류 탭) - 상품분류 MAX(depth) 값 가져온다.(분류 레벨 selectBox 값 설정을 위해)
    -->
    <select id="getDayProdClassMaxLevel" parameterType="dayVO" resultType="Integer">
        /* DayMapper.getDayProdClassMaxLevel */
        <choose>
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT NVL(MAX(LEVEL), 0)
                FROM TB_HQ_PRODUCT_CLASS thpc
                WHERE 1=1
                AND thpc.HQ_OFFICE_CD = #{hqOfficeCd}
                START WITH thpc.P_PROD_CLASS_CD = #{pProdClassCd} AND thpc.HQ_OFFICE_CD = #{hqOfficeCd}
                CONNECT BY thpc.P_PROD_CLASS_CD = PRIOR thpc.PROD_CLASS_CD AND thpc.HQ_OFFICE_CD = #{hqOfficeCd}
            </when>
            <when test='orgnFg != null and orgnFg == "S"'>
                SELECT NVL(MAX(LEVEL), 0)
                FROM (SELECT * FROM TB_MS_PRODUCT_CLASS WHERE STORE_CD = #{storeCd}) tmpc
                WHERE 1=1
                START WITH tmpc.P_PROD_CLASS_CD = #{pProdClassCd} AND STORE_CD = #{storeCd}
                CONNECT BY tmpc.P_PROD_CLASS_CD = PRIOR tmpc.PROD_CLASS_CD AND STORE_CD = #{storeCd}
            </when>
            <!--<when test='orgnFg != null and orgnFg == "H"'>-->
                <!--SELECT  MAX(A.STEP)-->
                <!--FROM    (-->
                            <!--SELECT CONNECT_BY_ROOT PARENT AS ROOT-->
                            <!--,       LEVEL AS STEP-->
                            <!--,       SUBSTR(SYS_CONNECT_BY_PATH(A.PARENT || '@' || A.STAGE || '@','|') ||A.CHILD  , 2) PATH &#45;&#45;, A.PARENT, A.STAGE-->
                            <!--FROM    (-->
                                        <!--SELECT P_PROD_CLASS_CD PARENT-->
                                        <!--,       PROD_CLASS_CD CHILD-->
                                        <!--,       PROD_CLASS_NM STAGE-->
                                        <!--FROM   TB_HQ_PRODUCT_CLASS-->
                                        <!--WHERE  1=1-->
                                        <!--AND    HQ_OFFICE_CD = #{hqOfficeCd}-->
                                    <!--)  A-->
                        <!--WHERE CONNECT_BY_ISLEAF = 1-->
                        <!--START WITH (A.STAGE, A.PARENT)  IN  (-->
                                                                <!--SELECT DISTINCT A.STAGE, A.PARENT-->
                                                                <!--FROM    (-->
                                                                            <!--SELECT P_PROD_CLASS_CD PARENT-->
                                                                            <!--,       PROD_CLASS_CD CHILD-->
                                                                            <!--,       PROD_CLASS_NM STAGE-->
                                                                            <!--FROM   TB_HQ_PRODUCT_CLASS-->
                                                                            <!--WHERE  1=1-->
                                                                            <!--AND    HQ_OFFICE_CD = #{hqOfficeCd}-->
                                                                        <!--)  A-->
                                                                <!--WHERE CONNECT_BY_ISLEAF = 1-->
                                                                <!--CONNECT BY NOCYCLE PRIOR PARENT = CHILD-->
                                                            <!--)-->
                        <!--CONNECT BY PRIOR CHILD = PARENT-->
                <!--) A-->
            <!--</when>-->
            <!--<when test='orgnFg != null and orgnFg == "S"'>-->
                <!--SELECT  MAX(A.STEP)-->
                <!--FROM    (-->
                            <!--SELECT CONNECT_BY_ROOT PARENT AS ROOT-->
                            <!--,       LEVEL AS STEP-->
                            <!--,       SUBSTR(SYS_CONNECT_BY_PATH(A.PARENT || '@' || A.STAGE || '@','|') ||A.CHILD  , 2) PATH &#45;&#45;, A.PARENT, A.STAGE-->
                            <!--FROM    (-->
                                        <!--SELECT P_PROD_CLASS_CD PARENT-->
                                        <!--,       PROD_CLASS_CD CHILD-->
                                        <!--,       PROD_CLASS_NM STAGE-->
                                        <!--FROM   TB_MS_PRODUCT_CLASS-->
                                        <!--WHERE  1=1-->
                                        <!--AND    STORE_CD = #{storeCd}-->
                                    <!--)  A-->
                        <!--WHERE CONNECT_BY_ISLEAF = 1-->
                        <!--START WITH (A.STAGE, A.PARENT)  IN  (-->
                                                                <!--SELECT DISTINCT A.STAGE, A.PARENT-->
                                                                <!--FROM    (-->
                                                                            <!--SELECT P_PROD_CLASS_CD PARENT-->
                                                                            <!--,       PROD_CLASS_CD CHILD-->
                                                                            <!--,       PROD_CLASS_NM STAGE-->
                                                                            <!--FROM   TB_MS_PRODUCT_CLASS-->
                                                                            <!--WHERE  1=1-->
                                                                            <!--AND    STORE_CD = #{storeCd}-->
                                                                        <!--)  A-->
                                                                <!--WHERE CONNECT_BY_ISLEAF = 1-->
                                                                <!--CONNECT BY NOCYCLE PRIOR PARENT = CHILD-->
                                                            <!--)-->
                        <!--CONNECT BY PRIOR CHILD = PARENT-->
                <!--) A-->
            <!--</when>-->
        </choose>
    </select>

    <!-- 일자별(상품분류 탭) - 분류레벨에 따른 상품분류 가져오기  -->
    <!--
        TABLE    : TB_HQ_PRODUCT_CLASS, TB_MS_PRODUCT_CLASS
        PARAM    : dayVO
        COMMENTS : 일자별(상품분류 탭) - 분류레벨에 따른 상품분류를 가져온다.
    -->
    <select id="getDayProdClassLevel" parameterType="dayVO" resultType="DefaultMap">
        <choose>
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT ROWNUM,
                        LEVEL,
                        thpc.PROD_CLASS_NM,
                        thpc.PROD_CLASS_CD,
                        thpc.P_PROD_CLASS_CD,
                        SYS_CONNECT_BY_PATH (thpc.PROD_CLASS_CD, '/ ') PATH
                  FROM TB_HQ_PRODUCT_CLASS thpc
                 WHERE 1=1
                   AND thpc.HQ_OFFICE_CD = #{hqOfficeCd}
                   AND LEVEL = #{level}
            START WITH thpc.P_PROD_CLASS_CD = #{pProdClassCd} AND thpc.HQ_OFFICE_CD = #{hqOfficeCd}
           CONNECT BY thpc.P_PROD_CLASS_CD = PRIOR thpc.PROD_CLASS_CD AND thpc.HQ_OFFICE_CD = #{hqOfficeCd}
             ORDER BY thpc.PROD_CLASS_CD
            </when>
            <when test='orgnFg != null and orgnFg == "S"'>
                SELECT ROWNUM,
                        LEVEL,
                        tmpc.PROD_CLASS_NM,
                        tmpc.PROD_CLASS_CD,
                        tmpc.P_PROD_CLASS_CD,
                        SYS_CONNECT_BY_PATH (tmpc.PROD_CLASS_CD, '/ ') PATH
                  FROM (SELECT * FROM TB_MS_PRODUCT_CLASS WHERE STORE_CD = #{storeCd}) tmpc
                 WHERE 1=1
                   AND LEVEL = #{level}
            START WITH tmpc.P_PROD_CLASS_CD = #{pProdClassCd} AND STORE_CD = #{storeCd}
           CONNECT BY tmpc.P_PROD_CLASS_CD = PRIOR tmpc.PROD_CLASS_CD AND STORE_CD = #{storeCd}
             ORDER BY tmpc.PROD_CLASS_CD
            </when>
            <!--<when test='orgnFg != null and orgnFg == "H"'>-->
                <!--SELECT ROWNUM-->
                <!--,       LEVEL-->
                <!--,       A.P_PROD_CLASS_CD-->
                <!--,       A.PROD_CLASS_CD-->
                <!--,       A.PROD_CLASS_NM-->
                <!--,       SYS_CONNECT_BY_PATH (A.PROD_CLASS_CD,'/ ') PATH-->
                <!--FROM    (-->
                            <!--SELECT P_PROD_CLASS_CD-->
                            <!--,       PROD_CLASS_CD-->
                            <!--,       PROD_CLASS_NM-->
                            <!--FROM   TB_HQ_PRODUCT_CLASS-->
                            <!--WHERE  1=1-->
                            <!--AND    HQ_OFFICE_CD = #{hqOfficeCd}-->
                        <!--)  A-->
                <!--WHERE CONNECT_BY_ISLEAF = 1-->
                <!--AND LEVEL = #{level}-->
                <!--CONNECT BY NOCYCLE PRIOR P_PROD_CLASS_CD = PROD_CLASS_CD-->
            <!--</when>-->
            <!--<when test='orgnFg != null and orgnFg == "S"'>-->
                <!--SELECT ROWNUM-->
                <!--,       LEVEL-->
                <!--,       A.P_PROD_CLASS_CD-->
                <!--,       A.PROD_CLASS_CD-->
                <!--,       A.PROD_CLASS_NM-->
                <!--,       SYS_CONNECT_BY_PATH (A.PROD_CLASS_CD,'/ ') PATH-->
                <!--FROM    (-->
                            <!--SELECT P_PROD_CLASS_CD-->
                            <!--,       PROD_CLASS_CD-->
                            <!--,       PROD_CLASS_NM-->
                            <!--FROM   TB_MS_PRODUCT_CLASS-->
                            <!--WHERE  1=1-->
                            <!--AND    STORE_CD = #{storeCd}-->
                        <!--)  A-->
                <!--WHERE CONNECT_BY_ISLEAF = 1-->
                <!--AND LEVEL = #{level}-->
                <!--CONNECT BY NOCYCLE PRIOR P_PROD_CLASS_CD = PROD_CLASS_CD-->
            <!--</when>-->
        </choose>
    </select>

    <!-- 일자별(상품분류 탭) - 상품분류별 리스트 조회 -->
    <!--
        TABLE    : TB_SL_SALE_DTL, TB_HQ_PRODUCT, TB_HQ_PRODUCT_CLASS, TB_HQ_PRODUCT_BARCD, TB_MS_STORE, TB_MS_PRODUCT, TB_MS_PRODUCT_CLASS, TB_MS_PRODUCT_BARCD
        PARAM    : dayVO
        COMMENTS : 일자별(시간대별 탭) - 상품분류별 리스트 조회한다.
    -->
    <select id="getDayProdClassList" parameterType="dayVO" resultType="DefaultMap">
        /* DayMapper.getDayProdClassList */
        <choose>
            <!-- 분류없음 -->
            <when test='level != null and level == "Level0"'>
                SELECT
                SALE_DATE,
                YOIL,
                SUM(REAL_SALE_AMT) AS TOT_REAL_SALE_AMT,
                SUM(SALE_QTY) AS TOT_SALE_QTY
                FROM
                (
                    SELECT
                    TO_CHAR(TO_DATE(tssd.SALE_DATE, 'yyyymmdd'), 'yyyy-mm-dd') AS SALE_DATE,
                    TO_CHAR(TO_DATE(tssd.SALE_DATE, 'YYYYMMDD'), 'DY') AS YOIL,
                    tssd.STORE_CD,
                    tssd.PROD_CD,
                    tmp.PROD_NM,
                    tmpb.BARCD_CD,
                    tssd.REAL_SALE_AMT,
                    tssd.SALE_QTY,
                    FN_GET_PROD_CLASS_CD_NM_STR(tmp.STORE_CD, tmp.PROD_CLASS_CD, 'CD_STR') AS PATH
                    FROM TB_SL_SALE_DTL tssd,
                    TB_MS_PRODUCT tmp,
                    TB_MS_PRODUCT_BARCD tmpb
                    WHERE 1=1
                    AND tssd.HQ_OFFICE_CD = #{hqOfficeCd}
                    <if test='storeCdQuery != null and storeCdQuery != ""'>
                        AND tssd.STORE_CD IN (${storeCdQuery})
                    </if>
                    <if test='orgnFg != null and orgnFg == "H"'>
                        AND (
                            'N' = (SELECT NVL(MAX(ENVST_VAL), 'N') FROM TB_HQ_ENVST WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND ENVST_CD = '0001')
                        OR  tssd.STORE_CD IN (SELECT STORE_CD FROM TB_HQ_EMPLOYEE_STORE_V08 WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND EMP_NO = #{empNo})
                        )
                    </if>
                    AND tssd.SALE_DATE BETWEEN #{startDate} AND #{endDate}
                    <if test="prodCd != null and prodCd != ''">
                        AND tssd.PROD_CD LIKE '%'|| #{prodCd} ||'%'
                    </if>
                    <if test="prodNm != null and prodNm != ''">
                        AND tmp.PROD_NM LIKE '%'|| #{prodNm} ||'%'
                    </if>
                    <if test="barCd != null and barCd != ''">
                        AND tmpb.BARCD_CD LIKE '%'|| #{barCd} ||'%'
                    </if>
                    AND tmp.STORE_CD = tssd.STORE_CD
                    AND tmp.PROD_CD = tssd.PROD_CD
                    AND tmpb.STORE_CD (+)= tmp.STORE_CD
                    AND tmpb.PROD_CD (+)= tmp.PROD_CD
                )
                WHERE 1=1
                <if test="prodClassCd != null and prodClassCd != ''">
                    AND PATH LIKE '%'|| #{prodClassCd} ||'%'
                </if>
                GROUP BY SALE_DATE, YOIL
                ORDER BY SALE_DATE
            </when>
            <!-- 분류있음 -->
            <when test='level != null and level != "Level0"'>
                SELECT
                tba.SALE_DATE,
                tba.YOIL,
                ${pivotProdClassCol1}
                FROM
                (
                    SELECT
                    SALE_DATE,
                    YOIL,
                    ${pivotProdClassCol2}
                    FROM
                    (
                        SELECT
                        SALE_DATE,
                        YOIL,
                        STORE_CD,
                        REAL_SALE_AMT,
                        SALE_QTY,
                        SUBSTR(PATH, 0, 5) AS Level1,
                        SUBSTR(PATH, 7, 5) AS Level2,
                        SUBSTR(PATH, 13, 5) AS Level3
                        FROM
                        (
                            SELECT
                            SALE_DATE,
                            YOIL,
                            STORE_CD,
                            REAL_SALE_AMT,
                            SALE_QTY,
                            FN_GET_PROD_CLASS_CD_NM_STR(STORE_CD, PROD_CLASS_CD, 'CD_STR') AS PATH
                            FROM
                            (
                                SELECT
                                TO_CHAR(TO_DATE(tssd.SALE_DATE, 'yyyymmdd'), 'yyyy-mm-dd') AS SALE_DATE,
                                TO_CHAR(TO_DATE(tssd.SALE_DATE, 'YYYYMMDD'), 'DY') AS YOIL,
                                tssd.STORE_CD,
                                tmp.PROD_CLASS_CD,
                                SUM(tssd.REAL_SALE_AMT) AS REAL_SALE_AMT,
                                SUM(tssd.SALE_QTY) AS SALE_QTY
                                FROM TB_SL_SALE_DTL tssd,
                                TB_MS_PRODUCT tmp,
                                TB_MS_PRODUCT_BARCD tmpb
                                WHERE 1=1
                                AND tssd.HQ_OFFICE_CD = #{hqOfficeCd}
                                <if test='storeCdQuery != null and storeCdQuery != ""'>
                                    AND tssd.STORE_CD IN (${storeCdQuery})
                                </if>
                                <if test='orgnFg != null and orgnFg == "H"'>
                                    AND (
                                        'N' = (SELECT NVL(MAX(ENVST_VAL), 'N') FROM TB_HQ_ENVST WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND ENVST_CD = '0001')
                                    OR  tssd.STORE_CD IN (SELECT STORE_CD FROM TB_HQ_EMPLOYEE_STORE_V08 WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND EMP_NO = #{empNo})
                                    )
                                </if>
                                AND tssd.SALE_DATE BETWEEN #{startDate} AND #{endDate}
                                <if test="prodCd != null and prodCd != ''">
                                    AND tssd.PROD_CD LIKE '%'|| #{prodCd} ||'%'
                                </if>
                                <if test="prodNm != null and prodNm != ''">
                                    AND tmp.PROD_NM LIKE '%'|| #{prodNm} ||'%'
                                </if>
                                <if test="barCd != null and barCd != ''">
                                    AND tmpb.BARCD_CD LIKE '%'|| #{barCd} ||'%'
                                </if>
                                <if test="prodClassCd != null and prodClassCd != ''">
                                    AND tmp.PROD_CLASS_CD = #{prodClassCd}
                                </if>
                                AND tmp.STORE_CD = tssd.STORE_CD
                                AND tmp.PROD_CD = tssd.PROD_CD
                                AND tmpb.STORE_CD (+)= tmp.STORE_CD
                                AND tmpb.PROD_CD (+)= tmp.PROD_CD
                                GROUP BY tssd.SALE_DATE, tssd.STORE_CD, tmp.PROD_CLASS_CD
                            )
                        )
                        <!--WHERE 1=1-->
                        <!--AND ${level} IN-->
                        <!--<foreach collection="arrProdClassCd" item="item" open="(" close=")" separator=",">-->
                        <!--#{item}-->
                        <!--</foreach>-->
                    )
                    PIVOT
                    (
                        SUM(REAL_SALE_AMT) AS REAL_SALE_AMT,
                        SUM(SALE_QTY) AS SALE_QTY
                        FOR ${level} IN (${pivotProdClassCol3})
                    )
                    GROUP BY SALE_DATE, YOIL
                ) tba
                ORDER BY tba.SALE_DATE, tba.YOIL
            </when>
        </choose>
        <!--<choose>-->
        <!--<when test='orgnFg != null and orgnFg == "H"'>-->
              <!--SELECT tba.SALE_DATE,-->
                      <!--tba.YOIL,-->
                      <!--${pivotProdClassCol1}-->
               <!--FROM-->
               <!--(-->
                    <!--SELECT  SALE_DATE,-->
                             <!--YOIL,-->
                             <!--${pivotProdClassCol2}-->
                      <!--FROM-->
                      <!--(-->
                        <!--SELECT *-->
                        <!--FROM (-->
                                <!--SELECT tssd.SALE_DATE,-->
                                        <!--TO_CHAR(TO_DATE(tssd.SALE_DATE, 'YYYYMMDD'), 'DY') AS YOIL,-->
                                        <!--tssd.STORE_CD,-->
                                        <!--thp.PROD_NM,-->
                                        <!--tssd.PROD_CD,-->
                                        <!--thp.PROD_CLASS_CD,-->
                                        <!--thpb.BARCD_CD,-->
                                        <!--tssd.SALE_AMT,-->
                                        <!--tssd.SALE_QTY,-->
                                        <!--thpc_p.PATH,-->
                                        <!--REPLACE(SUBSTR(thpc_p.PATH, 0, 6) ,'/','') AS Level1,-->
                                        <!--REPLACE(SUBSTR(thpc_p.PATH, 7, 6) ,'/','') AS Level2,-->
                                        <!--REPLACE(SUBSTR(thpc_p.PATH, 13, 6) ,'/','') AS Level3-->
                                  <!--FROM TB_SL_SALE_DTL tssd,-->
                                        <!--TB_HQ_PRODUCT thp,-->
                                        <!--TB_HQ_PRODUCT_CLASS thpc,-->
                                        <!--TB_HQ_PRODUCT_BARCD thpb,-->
                                        <!--(-->
                                            <!--SELECT-->
                                            <!--thpc.PROD_CLASS_CD-->
                                            <!--, SYS_CONNECT_BY_PATH (thpc.PROD_CLASS_CD,'/') PATH-->
                                            <!--FROM TB_HQ_PRODUCT_CLASS thpc-->
                                            <!--WHERE 1=1-->
                                            <!--AND thpc.HQ_OFFICE_CD = #{hqOfficeCd}-->
                                            <!--START WITH thpc.P_PROD_CLASS_CD = '00000' AND thpc.HQ_OFFICE_CD = #{hqOfficeCd}-->
                                            <!--CONNECT BY thpc.P_PROD_CLASS_CD = PRIOR thpc.PROD_CLASS_CD AND thpc.HQ_OFFICE_CD = #{hqOfficeCd}-->
                                        <!--) thpc_p-->
                                 <!--WHERE 1=1-->
                                   <!--AND thp.HQ_OFFICE_CD = tssd.HQ_OFFICE_CD-->
                                   <!--AND thp.PROD_CD = tssd.PROD_CD-->
                                   <!--AND thpc.HQ_OFFICE_CD = tssd.HQ_OFFICE_CD-->
                                   <!--AND thpc.PROD_CLASS_CD = thp.PROD_CLASS_CD-->
                                   <!--AND thpc_p.PROD_CLASS_CD = thp.PROD_CLASS_CD-->
                                   <!--AND thpb.HQ_OFFICE_CD (+)= thp.HQ_OFFICE_CD-->
                                   <!--AND thpb.PROD_CD (+)= thp.PROD_CD-->
                                   <!--AND thpb.PROD_CD (+)= tssd.PROD_CD-->
                                   <!--AND tssd.HQ_OFFICE_CD = #{hqOfficeCd}-->
                               <!--<if test="startDate != null and startDate != '' and endDate != null and endDate != ''">-->
                                   <!--AND tssd.SALE_DATE BETWEEN #{startDate} AND #{endDate}-->
                               <!--</if>-->
                               <!--<if test='arrStoreCd != null and arrStoreCd != ""'>-->
                                   <!--AND tssd.STORE_CD IN-->
                                   <!--<foreach collection="arrStoreCd" item="item" open="("  separator="," close=")">-->
                                       <!--#{item}-->
                                   <!--</foreach>-->
                               <!--</if>-->
                                <!--<if test="prodCd != null and prodCd != ''">-->
                                    <!--AND tssd.PROD_CD LIKE '%'|| #{prodCd} ||'%'-->
                                <!--</if>-->
                                <!--<if test="prodNm != null and prodNm != ''">-->
                                    <!--AND thp.PROD_NM LIKE '%'|| #{prodNm} ||'%'-->
                                <!--</if>-->
                                <!--<if test="barCd != null and barCd != ''">-->
                                    <!--AND thpb.BARCD_CD LIKE '%'|| #{barCd} ||'%'-->
                                <!--</if>-->
                        <!--)-->
                        <!--WHERE 1=1-->
                          <!--AND ${level} IN-->
                          <!--<foreach collection="arrProdClassCd" item="item" open="(" close=")" separator=",">-->
                              <!--${item}-->
                          <!--</foreach>-->
                          <!--<if test="prodClassCd != null and prodClassCd != ''">-->
                              <!--AND (      Level1 = #{prodClassCd}-->
                                      <!--OR Level2 = #{prodClassCd}-->
                                      <!--OR Level3 = #{prodClassCd}-->
                                   <!--)-->
                          <!--</if>-->
                      <!--)-->
                      <!--PIVOT (-->
                               <!--SUM(SALE_AMT) AS SALE_AMT,-->
                               <!--SUM(SALE_QTY) AS SALE_QTY-->
                               <!--FOR ${level} IN (${pivotProdClassCol3})-->
                            <!--)-->
                    <!--GROUP BY SALE_DATE, YOIL-->
                <!--) tba-->
                <!--WHERE 1=1-->
                <!--ORDER BY tba.SALE_DATE-->
        <!--</when>-->
        <!--<when test='orgnFg != null and orgnFg == "S"'>-->
            <!--SELECT tba.SALE_DATE,-->
                    <!--tba.YOIL,-->
                    <!--${pivotProdClassCol1}-->
              <!--FROM-->
                  <!--(-->
                      <!--SELECT  SALE_DATE,-->
                               <!--YOIL,-->
                               <!--${pivotProdClassCol2}-->
                        <!--FROM-->
                            <!--(-->
                               <!--SELECT *-->
                                 <!--FROM (-->
                                            <!--SELECT tssd.SALE_DATE,-->
                                                    <!--TO_CHAR(TO_DATE(tssd.SALE_DATE, 'YYYYMMDD'), 'DY') AS YOIL,-->
                                                    <!--tssd.STORE_CD,-->
                                                    <!--tmp.PROD_NM,-->
                                                    <!--tssd.PROD_CD,-->
                                                    <!--tmp.PROD_CLASS_CD,-->
                                                    <!--tmpb.BARCD_CD,-->
                                                    <!--tssd.SALE_AMT,-->
                                                    <!--tssd.SALE_QTY,-->
                                                    <!--tmpc_p.PATH,-->
                                                    <!--REPLACE(SUBSTR(tmpc_p.PATH, 0, 6) ,'/','') AS Level1,-->
                                                    <!--REPLACE(SUBSTR(tmpc_p.PATH, 7, 6) ,'/','') AS Level2,-->
                                                    <!--REPLACE(SUBSTR(tmpc_p.PATH, 13, 6) ,'/','') AS Level3-->
                                              <!--FROM TB_SL_SALE_DTL tssd,-->
                                                    <!--TB_MS_STORE tms,-->
                                                    <!--TB_MS_PRODUCT tmp,-->
                                                    <!--TB_MS_PRODUCT_CLASS tmpc,-->
                                                    <!--TB_MS_PRODUCT_BARCD tmpb,-->
                                                    <!--(-->
                                                        <!--SELECT-->
                                                        <!--tmpc.PROD_CLASS_CD,-->
                                                        <!--SYS_CONNECT_BY_PATH (tmpc.PROD_CLASS_CD, '/') PATH-->
                                                        <!--FROM (SELECT * FROM TB_MS_PRODUCT_CLASS WHERE STORE_CD = #{storeCd}) tmpc-->
                                                        <!--WHERE 1=1-->
                                                        <!--START WITH tmpc.P_PROD_CLASS_CD = '00000' AND tmpc.STORE_CD = #{storeCd}-->
                                                        <!--CONNECT BY tmpc.P_PROD_CLASS_CD = PRIOR tmpc.PROD_CLASS_CD AND tmpc.STORE_CD = #{storeCd}-->
                                                    <!--) tmpc_p-->
                                            <!--WHERE 1=1-->
                                              <!--AND tms.HQ_OFFICE_CD = tssd.HQ_OFFICE_CD-->
                                              <!--AND tms.STORE_CD = tssd.STORE_CD-->
                                              <!--AND tmp.STORE_CD = tssd.STORE_CD-->
                                              <!--AND tmp.PROD_CD = tssd.PROD_CD-->
                                              <!--AND tmpc.STORE_CD = tssd.STORE_CD-->
                                              <!--AND tmpc.PROD_CLASS_CD = tmp.PROD_CLASS_CD-->
                                              <!--AND tmpc_p.PROD_CLASS_CD = tmp.PROD_CLASS_CD-->
                                              <!--AND tmpb.STORE_CD (+)= tmp.STORE_CD-->
                                              <!--AND tmpb.PROD_CD (+)= tmp.PROD_CD-->
                                              <!--AND tmpb.PROD_CD (+)= tssd.PROD_CD-->
                                              <!--AND tssd.HQ_OFFICE_CD = #{hqOfficeCd}-->
                                              <!--AND tssd.STORE_CD = #{storeCd}-->
                                            <!--<if test="startDate != null and startDate != '' and endDate != null and endDate != ''">-->
                                                <!--AND tssd.SALE_DATE BETWEEN #{startDate} AND #{endDate}-->
                                            <!--</if>-->
                                            <!--<if test="prodCd != null and prodCd != ''">-->
                                                <!--AND tssd.PROD_CD LIKE '%'|| #{prodCd} ||'%'-->
                                            <!--</if>-->
                                            <!--<if test="prodNm != null and prodNm != ''">-->
                                                <!--AND tmp.PROD_NM LIKE '%'|| #{prodNm} ||'%'-->
                                            <!--</if>-->
                                            <!--<if test="barCd != null and barCd != ''">-->
                                                <!--AND tmpb.BARCD_CD LIKE '%'|| #{barCd} ||'%'-->
                                            <!--</if>-->
                                            <!--)-->
                                    <!--WHERE 1=1-->
                                    <!--AND ${level} IN-->
                                    <!--<foreach collection="arrProdClassCd" item="item" open="(" close=")" separator=",">-->
                                        <!--${item}-->
                                    <!--</foreach>-->
                                    <!--<if test="prodClassCd != null and prodClassCd != ''">-->
                                        <!--AND (      Level1 = #{prodClassCd}-->
                                                <!--OR Level2 = #{prodClassCd}-->
                                                <!--OR Level3 = #{prodClassCd}-->
                                            <!--)-->
                                    <!--</if>-->
                          <!--)-->
                    <!--PIVOT (-->
                                <!--SUM(SALE_AMT) AS SALE_AMT,-->
                                <!--SUM(SALE_QTY) AS SALE_QTY-->
                                <!--FOR ${level} IN (${pivotProdClassCol3})-->
                          <!--)-->
                           <!--GROUP BY SALE_DATE, YOIL-->
                <!--) tba-->
            <!--WHERE 1=1-->
            <!--ORDER BY tba.SALE_DATE-->
        <!--</when>-->
        <!--</choose>-->
    </select>


    <!-- 코너별 - 코너별매출조회-->
    <!--
        TABLE    : TB_SL_SALE_DTL
        COMMENTS : [매출]상세
    -->
    <select id="getDayCornerList" parameterType="dayVO" resultType="DefaultMap">
        /* USE : DayMapper.getDayCornerList */
        SELECT
        SALE_DATE,
        STORE_CNT,
        <foreach collection="arrCornerCol" item="item" separator="+">
            NVL(CORNR_${item}_REAL_SALE_AMT, 0)
        </foreach> AS TOT_REAL_SALE_AMT,
        <foreach collection="arrCornerCol" item="item" separator="+">
            NVL(CORNR_${item}_SALE_QTY, 0)
        </foreach> AS TOT_SALE_QTY,
        <foreach collection="arrCornerCol" item="item" separator=",">
            NVL(CORNR_${item}_REAL_SALE_AMT,0) AS CORNR_${item}_REAL_SALE_AMT
        </foreach> ,
        <foreach collection="arrCornerCol" item="item" separator=",">
            NVL(CORNR_${item}_SALE_QTY,0) AS CORNR_${item}_SALE_QTY
        </foreach>
--         NVL(CORNR_A00000101_REAL_SALE_AMT,0) AS CORNR_A00000101_REAL_SALE_AMT,
--         NVL(CORNR_A00000101_SALE_QTY,0) AS CORNR_A00000101_SALE_QTY,
        FROM
        (
            SELECT
            SALE_DATE,
            COUNT(STORE_CD) AS STORE_CNT,
            <foreach collection="arrCornerCol" item="item" separator=",">
                SUM(CORNR_${item}_REAL_SALE_AMT) AS CORNR_${item}_REAL_SALE_AMT
            </foreach> ,
            <foreach collection="arrCornerCol" item="item" separator=",">
                SUM(CORNR_${item}_SALE_QTY) AS CORNR_${item}_SALE_QTY
            </foreach>
--             SUM(CORNR_A00000101_REAL_SALE_AMT) AS CORNR_A00000101_REAL_SALE_AMT,
--             SUM(CORNR_A00000101_SALE_QTY) AS CORNR_A00000101_SALE_QTY,
            FROM
            (
                SELECT
                TO_CHAR(TO_DATE(tssd.SALE_DATE, 'yyyymmdd'), 'yyyy-mm-dd') AS SALE_DATE,
                tssd.STORE_CD,
                SUM(tssd.REAL_SALE_AMT) AS REAL_SALE_AMT,
                SUM(tssd.SALE_QTY) AS SALE_QTY,
                (tssd.STORE_CD || tssd.CORNR_CD) AS STORE_CORNR_CD
                FROM TB_SL_SALE_DTL tssd
                WHERE 1=1
                AND tssd.HQ_OFFICE_CD = #{hqOfficeCd}
                AND tssd.SALE_DATE BETWEEN #{startDate} AND #{endDate}
                <if test='storeCd != null and storeCd != ""'>
                    <![CDATA[
                        AND tssd.STORE_CD = #{storeCd}
                    ]]>
                </if>
                GROUP BY tssd.SALE_DATE, tssd.STORE_CD, tssd.CORNR_CD
            )
            PIVOT
            (
                SUM(REAL_SALE_AMT) AS REAL_SALE_AMT,
                SUM(SALE_QTY) AS SALE_QTY
                FOR STORE_CORNR_CD
                IN (${pivotCornerCol})
                /*IN ('A00000101' AS CORNR_A00000101,
                'DS0000201' AS CORNR_DS0000201,
                'DS0000601' AS CORNR_DS0000601)*/
            )
            GROUP BY SALE_DATE
        )
        ORDER BY SALE_DATE
    </select>


    <!-- 외식테이블별 - 외식테이블별매출조회 -->
    <!--
       TABLE    : TB_SL_SALE_HDR
       COMMENTS : [매출]헤더
    -->
    <select id="getDayTableList" parameterType="dayVO" resultType="DefaultMap">
        /* USE : DayMapper.getDayTableList */
        SELECT
        SALE_DATE,
        <foreach collection="arrTableCol" item="item" separator="+">
            NVL(TBL${item}_REAL_SALE_AMT, 0)
        </foreach> AS TOT_REAL_SALE_AMT,
        <foreach collection="arrTableCol" item="item" separator="+">
            NVL(TBL${item}_TBL_CNT, 0)
        </foreach> AS TOT_TBL_CNT,
        <foreach collection="arrTableCol" item="item" separator="+">
            NVL(TBL${item}_GUEST_CNT, 0)
        </foreach> AS TOT_GUEST_CNT,
        <foreach collection="arrTableCol" item="item" separator=",">
            NVL(TBL${item}_REAL_SALE_AMT,0) AS TBL${item}_REAL_SALE_AMT
        </foreach> ,
        <foreach collection="arrTableCol" item="item" separator=",">
            NVL(TBL${item}_TBL_CNT,0) AS TBL${item}_TBL_CNT
        </foreach> ,
        <foreach collection="arrTableCol" item="item" separator=",">
            NVL(TBL${item}_GUEST_CNT,0) AS TBL${item}_GUEST_CNT
        </foreach>
--         NVL(TBL000_REAL_SALE_AMT,0) AS TBL000_REAL_SALE_AMT,
--         NVL(TBL000_TBL_CNT,0) AS TBL000_TBL_CNT,
--         NVL(TBL000_TOT_GUEST_CNT,0) AS TBL000_TOT_GUEST_CNT
        FROM
        (
            SELECT
            SALE_DATE,
            <foreach collection="arrTableCol" item="item" separator=",">
                SUM(TBL${item}_REAL_SALE_AMT) AS TBL${item}_REAL_SALE_AMT
            </foreach> ,
            <foreach collection="arrTableCol" item="item" separator=",">
                SUM(TBL${item}_TBL_CNT) AS TBL${item}_TBL_CNT
            </foreach> ,
            <foreach collection="arrTableCol" item="item" separator=",">
                SUM(TBL${item}_GUEST_CNT) AS TBL${item}_GUEST_CNT
            </foreach>
--             SUM(TBL000_REAL_SALE_AMT) AS TBL000_REAL_SALE_AMT,
--             SUM(TBL000_TBL_CNT) AS TBL000_TBL_CNT,
--             SUM(TBL000_TOT_GUEST_CNT) AS TBL000_TOT_GUEST_CNT
            FROM
            (
                SELECT
                TO_CHAR(TO_DATE(tssh.SALE_DATE, 'yyyymmdd'), 'yyyy-mm-dd') AS SALE_DATE,
                tssh.REAL_SALE_AMT,
                1 AS TBL_CNT,
                tssh.TOT_GUEST_CNT,
                tssh.TBL_CD
                FROM TB_SL_SALE_HDR tssh
                WHERE 1=1
                AND tssh.HQ_OFFICE_CD = #{hqOfficeCd}
                AND tssh.STORE_CD = #{storeCd}
                AND tssh.SALE_DATE BETWEEN #{startDate} AND #{endDate}
                <if test='tableCd != null and tableCd != ""'>
                    <![CDATA[
                        AND tssh.TBL_CD = #{tableCd}
                    ]]>
                </if>
                AND tssh.TBL_CD != '000'
            )
            PIVOT
            (
                SUM(REAL_SALE_AMT) AS REAL_SALE_AMT,
                SUM(TBL_CNT) AS TBL_CNT,
                SUM(TOT_GUEST_CNT) AS GUEST_CNT
                FOR TBL_CD
                IN (${pivotTableCol})
                /*IN ('000' AS TBL000,
                '001' AS TBL001)*/
            )
            GROUP BY SALE_DATE
        )
        ORDER BY SALE_DATE
    </select>


    <!-- 상품매출 상세내역 팝업 - 상품매출 상세내역 조회 -->
    <!--
       TABLE    : TB_SL_SALE_HDR, TB_SL_SALE_HDR_PAY
       COMMENTS : [매출]헤더 와 [매출]헤더_결제
    -->
    <select id="getDayProdSaleDtlList" parameterType="dayVO" resultType="DefaultMap">
        /* USE : DayMapper.getDayProdSaleDtlList */
        SELECT
        HQ_OFFICE_CD,
        HQ_BRAND_CD,
        STORE_CD,
        SALE_DATE,
        POS_NO,
        BILL_NO,
        REG_DT,
        SALE_FG,
        TOT_SALE_AMT,
        REAL_SALE_AMT,
        GA_AMT,
        VAT_AMT,
        <foreach collection="arrPayCol" item="item" separator="+">
            NVL(PAY${item}, 0)
        </foreach> AS TOT_PAY_AMT,
        <foreach collection="arrPayCol" item="item" separator=",">
            NVL(PAY${item}, 0) AS PAY${item}
        </foreach> ,
        null AS ORDER_DT,
        TOT_GUEST_CNT,
        GUEST_UPRC
        FROM
        (
            SELECT
            HQ_OFFICE_CD,
            HQ_BRAND_CD,
            STORE_CD,
            SALE_DATE,
            POS_NO,
            BILL_NO,
            REG_DT,
            SALE_FG,
            SUM(TOT_SALE_AMT) AS TOT_SALE_AMT,
            SUM(REAL_SALE_AMT) AS REAL_SALE_AMT,
            SUM(TOT_SALE_AMT) - SUM(VAT_AMT) AS GA_AMT,
            SUM(VAT_AMT) AS VAT_AMT,
            <foreach collection="arrPayCol" item="item" separator=",">
                SUM(PAY${item}) AS PAY${item}
            </foreach> ,
            SUM(TOT_GUEST_CNT) AS TOT_GUEST_CNT,
            DECODE( SUM(TOT_GUEST_CNT), 0, 0, ROUND(SUM(REAL_SALE_AMT) / SUM(TOT_GUEST_CNT))) AS GUEST_UPRC
            FROM
            (
                SELECT
                tssh.HQ_OFFICE_CD,
                tssh.HQ_BRAND_CD,
                tssh.STORE_CD,
                TO_CHAR(TO_DATE(tssh.SALE_DATE, 'yyyymmdd'), 'yyyy-mm-dd') AS SALE_DATE,
                tssh.POS_NO,
                tssh.BILL_NO,
                TO_CHAR(TO_DATE(tssh.REG_DT, 'YYYYMMDDHH24MISS'), 'HH24:MI:SS') AS REG_DT,
                tssh.SALE_FG,
                tssh.TOT_SALE_AMT,
                tssh.REAL_SALE_AMT,
                tssh.VAT_AMT,
                tsshp.PAY_CD,
                tsshp.PAY_AMT,
                tssh.TOT_GUEST_CNT
                FROM TB_SL_SALE_HDR tssh,
                TB_SL_SALE_HDR_PAY tsshp
                WHERE 1=1
                AND tssh.HQ_OFFICE_CD = #{hqOfficeCd}
                <if test='storeCd != null and storeCd != ""'>
                    <![CDATA[
                        AND tssh.STORE_CD = #{storeCd}
                    ]]>
                </if>
                <choose>
                    <when test='gubun != null'>
                        <!-- 기간별매출 > 일자별 탭 > 일별종합 탭 -->
                        <if test='gubun == "day"'>
                            <![CDATA[
                                AND tssh.SALE_DATE = #{saleDate}
                            ]]>
                        </if>
                        <!-- 기간별매출 > 월별 탭 > 월별종합 탭 -->
                        <if test='gubun == "month"'>
                            <![CDATA[
                                AND tssh.SALE_DATE BETWEEN #{yearMonth}||'01' AND #{yearMonth} ||'31'
                            ]]>
                        </if>
                    </when>
                </choose>
                <if test='tableCd != null and tableCd != ""'>
                    <![CDATA[
                        AND tssh.TBL_CD = #{tableCd}
                    ]]>
                </if>
                AND tssh.HQ_OFFICE_CD = tsshp.HQ_OFFICE_CD
                AND tssh.HQ_BRAND_CD = tsshp.HQ_BRAND_CD
                AND tssh.STORE_CD = tsshp.STORE_CD
                AND tssh.SALE_DATE = tsshp.SALE_DATE
                AND tssh.POS_NO = tsshp.POS_NO
                AND tssh.BILL_NO = tsshp.BILL_NO
            )
            PIVOT
            (
                SUM(PAY_AMT)
                FOR PAY_CD
                IN (${pivotPayCol})
            )
            GROUP BY HQ_OFFICE_CD, HQ_BRAND_CD, STORE_CD, SALE_DATE, POS_NO, BILL_NO, REG_DT, SALE_FG
        )
        ORDER BY SALE_DATE, POS_NO, BILL_NO
    </select>

    <!-- 포스별 - 포스별매출조회-->
    <!--
        TABLE    : TB_SL_SALE_DTL
        COMMENTS : [매출]상세
    -->
    <select id="getDayPosList" parameterType="DayVO" resultType="DefaultMap">
        /* DayMapper.getDayPosList */
        SELECT	DECODE(GROUPING(tssd.STORE_CD || tssd.POS_NO), 1, 'TOTAL', tssd.STORE_CD || tssd.POS_NO) AS STORE_POS_NO,
                TO_CHAR(TO_DATE(SALE_DATE, 'yyyymmdd'), 'yyyy-mm-dd') AS SALE_DATE,
                TO_CHAR(TO_DATE(SALE_DATE, 'YYYYMMDD'), 'DY') AS YOIL,
                SUM(tssd.SALE_AMT) AS SALE_AMT,
                SUM(tssd.DC_AMT) AS DC_AMT,
                SUM(tssd.REAL_SALE_AMT) AS REAL_SALE_AMT,
                SUM(tssd.SALE_QTY) AS SALE_QTY
        FROM    TB_SL_SALE_DTL tssd
        WHERE   tssd.HQ_OFFICE_CD = #{hqOfficeCd}
        AND     tssd.SALE_DATE BETWEEN #{startDate} AND #{endDate}
        <if test='storeCdQuery != null and storeCdQuery != ""'>
            AND tssd.STORE_CD IN (${storeCdQuery})
        </if>
        GROUP BY tssd.SALE_DATE, ROLLUP(tssd.STORE_CD || tssd.POS_NO)
    </select>

<!--    <select id="getDayPosList" parameterType="DayVO" resultType="DefaultMap">-->
<!--        /* DayMapper.getDayPosList */-->
<!--        SELECT-->
<!--        TO_CHAR(TO_DATE(SALE_DATE, 'yyyymmdd'), 'yyyy-mm-dd') AS SALE_DATE,-->
<!--        TO_CHAR(TO_DATE(SALE_DATE, 'YYYYMMDD'), 'DY') AS YOIL,-->
<!--        <foreach collection="arrPosCol" item="item" separator="+">-->
<!--            NVL(POS_${item}_SALE_AMT, 0)-->
<!--        </foreach> AS TOT_SALE_AMT,-->
<!--        <foreach collection="arrPosCol" item="item" separator="+">-->
<!--            NVL(POS_${item}_DC_AMT, 0)-->
<!--        </foreach> AS TOT_DC_AMT,-->
<!--        <foreach collection="arrPosCol" item="item" separator="+">-->
<!--            NVL(POS_${item}_REAL_SALE_AMT, 0)-->
<!--        </foreach> AS TOT_REAL_SALE_AMT,-->
<!--        <foreach collection="arrPosCol" item="item" separator="+">-->
<!--            NVL(POS_${item}_SALE_QTY, 0)-->
<!--        </foreach> AS TOT_SALE_QTY,-->
<!--        <foreach collection="arrPosCol" item="item" separator=",">-->
<!--            NVL(POS_${item}_SALE_AMT,0) AS POS_${item}_SALE_AMT-->
<!--        </foreach> ,-->
<!--        <foreach collection="arrPosCol" item="item" separator=",">-->
<!--            NVL(POS_${item}_DC_AMT,0) AS POS_${item}_DC_AMT-->
<!--        </foreach> ,-->
<!--        <foreach collection="arrPosCol" item="item" separator=",">-->
<!--            NVL(POS_${item}_REAL_SALE_AMT,0) AS POS_${item}_REAL_SALE_AMT-->
<!--        </foreach> ,-->
<!--        <foreach collection="arrPosCol" item="item" separator=",">-->
<!--            NVL(POS_${item}_SALE_QTY,0) AS POS_${item}_SALE_QTY-->
<!--        </foreach>-->
<!--        &#45;&#45;         SUM(POS_A00000101_SALE_AMT) AS POS_A00000101_SALE_AMT,-->
<!--        &#45;&#45;         SUM(POS_A00000101_DC_AMT) AS POS_A00000101_DC_AMT,-->
<!--        &#45;&#45;         SUM(POS_A00000101_REAL_SALE_AMT) AS POS_A00000101_REAL_SALE_AMT,-->
<!--        &#45;&#45;         SUM(POS_A00000101_SALE_QTY) AS POS_A00000101_SALE_QTY-->
<!--        FROM-->
<!--        (-->
<!--        SELECT-->
<!--        SALE_DATE,-->
<!--        <foreach collection="arrPosCol" item="item" separator=",">-->
<!--            SUM(POS_${item}_SALE_AMT) AS POS_${item}_SALE_AMT-->
<!--        </foreach> ,-->
<!--        <foreach collection="arrPosCol" item="item" separator=",">-->
<!--            SUM(POS_${item}_DC_AMT) AS POS_${item}_DC_AMT-->
<!--        </foreach> ,-->
<!--        <foreach collection="arrPosCol" item="item" separator=",">-->
<!--            SUM(POS_${item}_REAL_SALE_AMT) AS POS_${item}_REAL_SALE_AMT-->
<!--        </foreach> ,-->
<!--        <foreach collection="arrPosCol" item="item" separator=",">-->
<!--            SUM(POS_${item}_SALE_QTY) AS POS_${item}_SALE_QTY-->
<!--        </foreach>-->
<!--        FROM-->
<!--        (-->
<!--        SELECT-->
<!--        tssd.SALE_DATE,-->
<!--        SUM(tssd.SALE_AMT) AS SALE_AMT,-->
<!--        SUM(tssd.DC_AMT) AS DC_AMT,-->
<!--        SUM(tssd.REAL_SALE_AMT) AS REAL_SALE_AMT,-->
<!--        SUM(tssd.SALE_QTY) AS SALE_QTY,-->
<!--        (tssd.STORE_CD || tssd.POS_NO) AS STORE_POS_NO-->
<!--        FROM TB_SL_SALE_DTL tssd-->
<!--        WHERE 1=1-->
<!--        AND tssd.HQ_OFFICE_CD = #{hqOfficeCd}-->
<!--        AND tssd.SALE_DATE BETWEEN #{startDate} AND #{endDate}-->
<!--        <if test='arrStoreCd != null and arrStoreCd != ""'>-->
<!--            AND tssd.STORE_CD IN-->
<!--            <foreach collection="arrStoreCd" item="item" open="(" close=")" separator=",">-->
<!--                #{item}-->
<!--            </foreach>-->
<!--        </if>-->
<!--        GROUP BY tssd.SALE_DATE, tssd.STORE_CD, tssd.POS_NO-->
<!--        )-->
<!--        PIVOT-->
<!--        (-->
<!--        SUM(SALE_AMT) AS SALE_AMT,-->
<!--        SUM(DC_AMT) AS DC_AMT,-->
<!--        SUM(REAL_SALE_AMT) AS REAL_SALE_AMT,-->
<!--        SUM(SALE_QTY) AS SALE_QTY-->
<!--        FOR STORE_POS_NO-->
<!--        IN (${pivotPosCol})-->
<!--        /*IN ('A00000101' AS POS_A00000101,-->
<!--        'DS0000201' AS POS_DS0000201,-->
<!--        'DS0000601' AS POS_DS0000601)*/-->
<!--        )-->
<!--        GROUP BY SALE_DATE-->
<!--        )-->
<!--        ORDER BY SALE_DATE-->
<!--    </select>-->


    <!--  사원카드별탭 - 사원카드별 매출조회-->
    <!--
        TABLE    : TB_SL_SALE_DTL
        COMMENTS : [매출]상세
    -->
    <select id="getDayEmpCardList" parameterType="DayVO" resultType="DefaultMap">
        /* DayMapper.getDayEmpCardList */
        SELECT TO_CHAR(TO_DATE(B.SALE_DATE, 'yyyymmdd'), 'yyyy-mm-dd') AS SALE_DATE
        , 		TO_CHAR(TO_DATE(B.SALE_DATE, 'YYYYMMDD') -1, 'D') AS YOIL_NUM
        ,		TO_CHAR(TO_DATE(B.SALE_DATE, 'YYYYMMDD'), 'DY') AS YOIL
        ,       B.OFFICE_NM
        ,       B.OFFICE_DEPT_NM
        ,       B.OFFICE_EMP_NO
        ,       B.OFFICE_EMP_NM
        ,		C.PROD_NM
        ,		teec.EMPLOYEE_NO
        ,		teec.EMPLOYEE_NM
        ,		teec.DIV_NM
        ,		teec.DEPT_NM
        ,		teec.POSITION_NM
        ,		SUM(DECODE(A.SALE_AMT, 0, 0, ROUND(C.PAY_AMT*B.SALE_AMT/A.SALE_AMT, 0))) AS SALE_AMT
          FROM (
                    SELECT  STORE_CD
                    ,        SALE_DATE
                    ,        POS_NO
                    ,        BILL_NO
                    ,        SUM(SALE_AMT) AS SALE_AMT
                       FROM TB_SL_SALE_PAY_EMP_CARD
                      WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                        AND SALE_DATE BETWEEN #{startDate} AND #{endDate}
                    <if test='storeCdQuery != null and storeCdQuery != ""'>
                        AND STORE_CD IN (${storeCdQuery})
                    </if>
                    <if test='orgnFg != null and orgnFg == "H"'>
                        AND (
                            'N' = (SELECT NVL(MAX(ENVST_VAL), 'N') FROM TB_HQ_ENVST WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND ENVST_CD = '0001')
                        OR  STORE_CD IN (SELECT STORE_CD FROM TB_HQ_EMPLOYEE_STORE_V08 WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND EMP_NO = #{empNo})
                        )
                    </if>
                      GROUP
                         BY STORE_CD
                    ,       SALE_DATE
                    ,       POS_NO
                    ,       BILL_NO
                ) A,
                (
                    SELECT STORE_CD
                    ,       SALE_DATE
                    ,       POS_NO
                    ,       BILL_NO
                    ,       OFFICE_NM
                    ,       OFFICE_DEPT_NM
                    ,       OFFICE_EMP_NO
                    ,       OFFICE_EMP_NM
                    ,       OFFICE_EMP_CARD_NO
                    ,       SUM(SALE_AMT) AS SALE_AMT
                      FROM TB_SL_SALE_PAY_EMP_CARD
                     WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                       AND SALE_DATE BETWEEN #{startDate} AND #{endDate}
                    <if test='storeCdQuery != null and storeCdQuery != ""'>
                        AND STORE_CD IN (${storeCdQuery})
                    </if>
                    <if test='orgnFg != null and orgnFg == "H"'>
                        AND (
                            'N' = (SELECT NVL(MAX(ENVST_VAL), 'N') FROM TB_HQ_ENVST WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND ENVST_CD = '0001')
                        OR  STORE_CD IN (SELECT STORE_CD FROM TB_HQ_EMPLOYEE_STORE_V08 WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND EMP_NO = #{empNo})
                        )
                    </if>
                    GROUP
                       BY STORE_CD
                    ,     SALE_DATE
                    ,     POS_NO
                    ,     BILL_NO
                    ,     OFFICE_NM
                    ,     OFFICE_DEPT_NM
                    ,     OFFICE_EMP_NO
                    ,     OFFICE_EMP_NM
                    ,     OFFICE_EMP_CARD_NO
                ) B,
                (
                    SELECT A.STORE_CD
                    ,       A.SALE_DATE
                    ,       A.POS_NO
                    ,       A.BILL_NO
                    ,       A.PROD_CD
                    ,       B.PROD_NM
                    ,       A.PAY_AMT
                      FROM	(
                                SELECT STORE_CD
                                ,       SALE_DATE
                                ,       POS_NO
                                ,       BILL_NO
                                ,       PROD_CD
                                ,       SUM(PAY_AMT) AS PAY_AMT
                                  FROM TB_SL_SALE_DTL_PAY
                                 WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                                   AND SALE_DATE BETWEEN #{startDate} AND #{endDate}
                                <if test='storeCdQuery != null and storeCdQuery != ""'>
                                    AND STORE_CD IN (${storeCdQuery})
                                </if>
                                <if test='orgnFg != null and orgnFg == "H"'>
                                    AND (
                                        'N' = (SELECT NVL(MAX(ENVST_VAL), 'N') FROM TB_HQ_ENVST WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND ENVST_CD = '0001')
                                    OR  STORE_CD IN (SELECT STORE_CD FROM TB_HQ_EMPLOYEE_STORE_V08 WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND EMP_NO = #{empNo})
                                    )
                                </if>
                                   AND 	PAY_CD = '17'
                                 GROUP
                                    BY STORE_CD
                                 ,     SALE_DATE
                                 ,     POS_NO
                                 ,     BILL_NO
                                 ,     PROD_CD
                            ) A,
                            TB_MS_PRODUCT B
                     WHERE B.STORE_CD = A.STORE_CD
                       AND B.PROD_CD  = A.PROD_CD
                ) C
        ,      TB_EM_EMPLOYEE_CARD teec
         WHERE B.STORE_CD = A.STORE_CD
           AND B.SALE_DATE = A.SALE_DATE
           AND B.POS_NO = A.POS_NO
           AND B.BILL_NO = A.BILL_NO
           AND C.STORE_CD = A.STORE_CD
           AND C.SALE_DATE = A.SALE_DATE
           AND C.POS_NO = A.POS_NO
           AND C.BILL_NO = A.BILL_NO
        AND teec.EMPLOYEE_CARD_NO (+) = B.OFFICE_EMP_CARD_NO
        <if test='hqOfficeCd != null and hqOfficeCd != "00000"'>
            AND teec.EMPLOYEE_ORGN_CD (+) = #{hqOfficeCd}
        </if>
        <if test='hqOfficeCd != null and hqOfficeCd == "00000"'>
            AND teec.EMPLOYEE_ORGN_CD (+) = B.STORE_CD
        </if>
         GROUP
            BY B.SALE_DATE
         ,     B.OFFICE_NM
         ,     B.OFFICE_DEPT_NM
         ,     B.OFFICE_EMP_NO
         ,     B.OFFICE_EMP_NM
         ,     C.PROD_NM
        ,		teec.EMPLOYEE_NO
        ,		teec.EMPLOYEE_NM
        ,		teec.DIV_NM
        ,		teec.DEPT_NM
        ,		teec.POSITION_NM
        ORDER
           BY B.SALE_DATE
        ,     B.OFFICE_NM
        ,     B.OFFICE_DEPT_NM
        ,     B.OFFICE_EMP_NO
        ,     B.OFFICE_EMP_NM
        ,     C.PROD_NM
        ,		teec.EMPLOYEE_NO
        ,		teec.EMPLOYEE_NM
        ,		teec.DIV_NM
        ,		teec.DEPT_NM
        ,		teec.POSITION_NM
    </select>

</mapper>