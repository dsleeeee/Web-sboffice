'use strict';
function RootController(ctrlName, $scope, $http, isPicker) {
	$scope.name = ctrlName;
	$scope._gridDataInit = function() {
		$scope.data = new wijmo.collections.CollectionView([])
	};
	$scope._inquiryMain = function(url, params, callback) {
		_inquiry(url, params, callback, true, true)
	};
	$scope._inquirySub = function(url, params, callback, isView) {
		if (isEmpty(isView) || typeof (isView) !== "boolean") {
			isView = false
		}
		_inquiry(url, params, callback, isView, false)
	};
	function _inquiry(url, params, callback, isView, isMaster) {
		$scope.$broadcast('loadingPopupActive');
		if (isMaster) {
			var el = angular.element('input');
			var name = '';
			for (var i = 0, l = el.length; i < l; i += 1) {
				name = angular.element(el[i]).attr('ng-model');
				if (name && $scope[name]) {
					params[name] = $scope[name]
				}
			}
		}
		if ($scope._getPagingInfo('curr') > 0) {
			params['curr'] = $scope._getPagingInfo('curr')
		} else {
			params['curr'] = 1
		}
		if (document.getElementsByName('sessionId')[0]) {
			params['sid'] = document.getElementsByName('sessionId')[0].value
		}
		$http({
			method : 'POST',
			url : url,
			params : params,
			headers : {
				'Content-Type' : 'application/json; charset=utf-8'
			}
		}).then(function successCallback(response) {
			$scope.$broadcast('loadingPopupInactive');
			if (_httpStatusCheck(response, true)) {
				var list = response.data.data.list;
				if (list.length === undefined || list.length === 0) {
					$scope.data = new wijmo.collections.CollectionView([]);
					if (isView && response.data.message) {

						// 페이징 처리
			        	  $scope._setPagingInfo('ctrlName', $scope.name);
			              $scope._setPagingInfo('pageScale', 10);
			              $scope._setPagingInfo('curr', 1);
			              $scope._setPagingInfo('totCnt', 1);
			              $scope._setPagingInfo('totalPage', 1);

			              $scope._broadcast('drawPager');

						$scope._popMsg(response.data.message)
					}
					return false
				}
				var data = new wijmo.collections.CollectionView(list);
				data.trackChanges = true;
				$scope.data = data;
				if (response.data.data.page && response.data.data.page.curr) {
					var pagingInfo = response.data.data.page;
					$scope._setPagingInfo('ctrlName', $scope.name);
					$scope._setPagingInfo('pageScale', pagingInfo.pageScale);
					$scope._setPagingInfo('curr', pagingInfo.curr);
					$scope._setPagingInfo('totCnt', pagingInfo.totCnt);
					$scope._setPagingInfo('totalPage', pagingInfo.totalPage);
					$scope._broadcast('drawPager')
				}
			}
		}, function errorCallback(response) {
			$scope.$broadcast('loadingPopupInactive');
			if (response.data.message) {
				$scope._popMsg(response.data.message)
			} else {
				$scope._popMsg(messages['cmm.error'])
			}
			return false
		}).then(function() {
			if (typeof callback === 'function') {
				setTimeout(function() {
					callback()
				}, 10)
			}
		})
	}
	$scope._addRow = function(params, pos) {
		_gridAddRow(params, pos)
	};
	function _gridAddRow(params, pos) {
		var flex = $scope.flex;
		if (!flex.collectionView) {
			flex.itemsSource = new wijmo.collections.CollectionView()
		}
		var newRow = flex.collectionView.addNew();
		newRow.status = 'I';
		newRow.gChk = true;
		for ( var prop in params) {
			newRow[prop] = params[prop]
		}
		flex.collectionView.trackChanges = true;
		flex.collectionView.commitNew();
		setTimeout(function() {
			flex.scrollIntoView(flex.rows.length - 1, 0);
			flex.select(flex.rows.length - 1, 1);
			flex.focus();
			flex.startEditing(true, flex.rows.length - 1, (pos === null ? 0
					: pos), true)
		}, 50)
	}
	$scope._save = function(url, params, callback) {
		return _gridSave(url, params, callback)
	};
	function _gridSave(url, params, callback) {
		var sParam = {};
		if (params.length <= 0) {
			$scope._popMsg(messages['cmm.not.modify']);
			return false
		} else {
			$scope.$broadcast('loadingPopupActive', messages['cmm.saving']);
			if (document.getElementsByName('sessionId')[0]) {
				sParam['sid'] = document.getElementsByName('sessionId')[0].value
			}
		}
		$http({
			method : 'POST',
			url : url,
			data : params,
			params : sParam,
			headers : {
				'Content-Type' : 'application/json; charset=utf-8'
			}
		}).then(function successCallback(response) {
			$scope.$broadcast('loadingPopupInactive');
			if (_httpStatusCheck(response, true)) {
				$scope._popMsg(messages['cmm.saveSucc']);
				$scope.flex.collectionView.clearChanges()
			}
		}, function errorCallback(response) {
			$scope.$broadcast('loadingPopupInactive');
			if (response.data.message) {
				$scope._popMsg(response.data.message)
			} else {
				$scope._popMsg(messages['cmm.saveFail'])
			}
			return false
		}).then(function() {
			if (typeof callback === 'function') {
				setTimeout(function() {
					callback()
				}, 10)
			}
		})
	}
	$scope._httpStatusCheck = function(res, isMsg) {
		return _httpStatusCheck(res, isMsg)
	};
	function _httpStatusCheck(res, isMsg) {
		if (res.data.status === 'OK') {
			return true
		} else if (res.data.status === 'FAIL') {
			if (isMsg) {
				$scope._popMsg('Ajax Fail By HTTP Request')
			}
			return false
		} else if (res.data.status === 'SESSION_EXFIRE') {
			if (isMsg) {
				$scope._popMsg(res.data.message, function() {
					location.href = res.data.url
				})
			}
			return false
		} else if (res.data.status === 'SERVER_ERROR') {
			if (isMsg) {
				$scope._popMsg(res.data.message)
			}
			return false
		} else {
			if (isMsg) {
				var msg = res.data.status + ' : ' + res.data.message;
				$scope._popMsg(msg)
			}
			return false
		}
	}
	$scope._itemFormatter = function(panel, r, c, cell) {
		_itemFormatter(panel, r, c, cell)
	};
	function _itemFormatter(panel, r, c, cell) {
		if (panel.cellType === wijmo.grid.CellType.ColumnHeader) {
			var mRange = panel.grid.getMergedRange(panel, r, c);
			if (mRange) {
				cell.innerHTML = '<div class=\"wj-header merged-custom\">'
						+ cell.innerHTML + '</div>'
			}
			var flex = panel.grid;
			var column = flex.columns[c];
			if (column.binding === 'gChk' || column.format === 'checkBox'
					|| column.format === 'checkBoxText') {
				column.allowSorting = false;
				var cnt = 0;
				for (var i = 0; i < flex.rows.length; i++) {
					if (flex.getCellData(i, c) === true) {
						cnt++
					}
				}
				if (column.format === 'checkBoxText') {
					cell.innerHTML = '<input id=\"' + column.binding
							+ '\" type=\"checkbox\" class=\"wj-cell-check\" />'
							+ '<label for=\"' + column.binding
							+ '\" class=\"wj-header-label\">' + cell.innerHTML
							+ '</label>'
				} else {
					cell.innerHTML = '<input type=\"checkbox\" class=\"wj-cell-check\" />'
				}
				var cb = cell.firstChild;
				cb.checked = cnt > 0;
				cb.indeterminate = cnt > 0 && cnt < flex.rows.length;
				cb.addEventListener('click', function(e) {
					flex.beginUpdate();
					for (var i = 0; i < flex.rows.length; i++) {
						var cell = flex.cells.getCellElement(i, 0);
						if (!cell.children[0].disabled) {
							flex.setCellData(i, c, cb.checked)
						}
					}
					flex.endUpdate()
				})
			}
		} else if (panel.cellType === wijmo.grid.CellType.TopLeft) {
			if (!isPicker) {
				$(cell).css({
					"background" : "none",
					"background-color" : "#e8e8e8"
				})
			}
		} else if (panel.cellType === wijmo.grid.CellType.RowHeader) {
			if (panel.rows[r] instanceof wijmo.grid.GroupRow) {
				cell.textContent = ''
			} else {
				if (!isEmpty(panel._rows[r]._data.rnum)) {
					cell.textContent = (panel._rows[r]._data.rnum).toString()
				} else {
					cell.textContent = (r + 1).toString()
				}
			}
		} else if (panel.cellType === wijmo.grid.CellType.Cell) {
			var col = panel.columns[c];
			if (col.isReadOnly) {
				wijmo.addClass(cell, 'wj-custom-readonly')
			}
		}
	}
	$scope.$watch('flex', function() {
		var flex = $scope.flex;
		if (flex) {
			flex.beginningEdit.addHandler(function(s, e) {
				if (s.columns[e.col].binding !== 'gChk') {
					if (s.columns[e.col].dataType !== wijmo.DataType.Boolean) {
						setTimeout(function() {
							var _cellData = s.getCellData(e.row, e.col, true);
							if (!isEmpty(s.activeEditor)
									&& s.activeEditor.value !== '') {
								wijmo.setSelectionRange(s.activeEditor,
										_cellData.length)
							}
						}, 0)
					}
				}
			});
			flex.cellEditEnded.addHandler(function(s, e) {
			});
			flex.rowEditEnded.addHandler(function(s, e) {
			})
		}
	});
	$scope._makePickColumns = function(ctrlName) {
		_makePickColumns(ctrlName)
	};
	function _makePickColumns(ctrlName) {
		var flex = $scope.flex;
		if (flex && isPicker) {
			flex.hostElement.addEventListener('mousedown', function(e) {
				var ht = flex.hitTest(e);
				if (ht.cellType === wijmo.grid.CellType.TopLeft) {
					if (!$scope.picker) {
						$scope.picker = new wijmo.grid.ColumnPicker('#'
								+ ctrlName);
						$scope.picker.orgColumns = $scope.flex.columns
					}
					$scope.picker.grid = $scope.flex;
					var pickerPopup = $scope.colPicker;
					pickerPopup.show(true, function(s) {
						var dr = s.dialogResult;
						if (dr && dr.indexOf('apply') > -1) {
							$scope.picker.save()
						}
					});
					e.preventDefault()
				}
			})
		}
	}
	$scope
			.$on(
					'loadingPopupActive',
					function(event, data) {
						var innerHtml = '<div class=\"wj-popup-loading\"><p class=\"bk\">';
						if (isEmpty(data)) {
							innerHtml += messages['cmm.loading']
						} else {
							innerHtml += data
						}
						innerHtml += '</p><p class=\"mt20\"><img src=\"/resource/solbipos/css/img/loading.gif\" alt=\"\" /></p></div>';
						$scope._loadingPopup.content.innerHTML = innerHtml;
						$scope._loadingPopup.show(true)
					});
	$scope.$on('loadingPopupInactive', function() {
		$scope._loadingPopup.hide()
	});
	$scope._postJSONQuery = {
		withPopUp : function() {
			return _postJSON(arguments, true, 'loading')
		},
		withOutPopUp : function() {
			return _postJSON(arguments, false, 'loading')
		}
	};
	$scope._postJSONSave = {
		withPopUp : function() {
			return _postJSON(arguments, true, 'saving')
		},
		withOutPopUp : function() {
			return _postJSON(arguments, false, 'saving')
		}
	};
	function _postJSON(args, isMsg, type) {
		var popMsg = type === 'loading' ? messages['cmm.loading']
				: messages['cmm.saving'];
		var url, params, success, error, complete;
		switch (args.length) {
		case 3:
			url = args[0];
			params = args[1];
			success = args[2];
			break;
		case 4:
			url = args[0];
			params = args[1];
			success = args[2];
			complete = args[3];
			break;
		case 5:
			url = args[0];
			params = args[1];
			success = args[2];
			error = args[3];
			complete = args[4];
			break
		}
		var data = {};
		var sParams = {};
		if (params.data && params.params) {
			data = params.data;
			sParams = params.params
		} else {
			if (params.data || params.params) {
				$scope.$apply(function() {
					$scope._popMsg('파라미터가 올바르지 않습니다.')
				});
				return false
			} else {
				data = params
			}
		}
		if (document.getElementsByName('sessionId')[0]) {
			if (type === 'loading') {
				params['sid'] = document.getElementsByName('sessionId')[0].value
			} else if (type === 'saving') {
				sParams['sid'] = document.getElementsByName('sessionId')[0].value
			}
		}
		if (isMsg) {
			$scope.$broadcast('loadingPopupActive', popMsg)
		}
		var property = {
			method : 'POST',
			url : url,
			headers : {
				'Content-Type' : 'application/json; charset=utf-8'
			}
		};
		if (type === 'loading') {
			property.params = params
		} else if (type === 'saving') {
			property.data = data;
			property.params = sParams
		}
		$http(property).then(function successCallback(response) {
			if (isMsg) {
				$scope.$broadcast('loadingPopupInactive')
			}
			if (_httpStatusCheck(response, isMsg)) {
				if (isMsg) {
					if (response.data.message) {
						$scope._popMsg(response.data.message)
					} else {
						if (type === 'saving') {
							$scope._popMsg(messages['cmm.saveSucc'])
						}
					}
				}
				if (typeof success === 'function') {
					success(response)
				}
			}
		}, function errorCallback(response) {
			if (isMsg) {
				$scope.$broadcast('loadingPopupInactive');
				if (response.data.message) {
					$scope._popMsg(response.data.message)
				} else {
					if (type === 'loading') {
						$scope._popMsg(messages['cmm.error'])
					} else if (type === 'saving') {
						$scope._popMsg(messages['cmm.saveFail'])
					}
				}
			}
			if (typeof error === 'function') {
				error(response)
			}
			return false
		}).then(function() {
			if (typeof complete === 'function') {
				setTimeout(function() {
					complete()
				}, 10)
			}
		})
	}
}
function MenuController(ctrlName, menuUrl, $scope, $http) {
	$scope.params = {};
	if (document.getElementsByName('sessionId').length > 0) {
		$scope.params.sid = document.getElementsByName('sessionId')[0].value
	}
	$scope._convertTreeModel = function(arrayList, rootId) {
		return _convertTreeModel(arrayList, rootId)
	};
	function _convertTreeModel(arrayList, rootId) {
		var rootNodes = [];
		var traverse = function(nodes, item, index) {
			if (nodes instanceof Array) {
				return nodes.some(function(node) {
					if (node.resrceCd === item.pResrce) {
						node.children = node.children || [];
						return node.children
								.push(arrayList.splice(index, 1)[0])
					}
					return traverse(node.children, item, index)
				})
			}
		};
		while (arrayList.length > 0) {
			arrayList.some(function(item, index) {
				if (item.pResrce === rootId) {
					return rootNodes.push(arrayList.splice(index, 1)[0])
				}
				return traverse(rootNodes, item, index)
			})
		}
		return rootNodes
	}
	$scope._searchTree = function(menuUrl, callback) {
		_searchTree(menuUrl, callback)
	};
	function _searchTree(menuUrl, callback) {
		$http({
			method : 'POST',
			url : menuUrl,
			params : $scope.params,
			headers : {
				'Content-Type' : 'application/json; charset=utf-8'
			}
		}).then(
				function successCallback(response) {
					if (response.data.status === 'OK') {
						if (response.data.data.length > 0) {
							var data = JSON.stringify($scope._convertTreeModel(
									response.data.data, '000000'), null, '');
							$scope.items = JSON.parse(data)
						} else {
							$scope.items = []
						}
					}
				}, function errorCallback(response) {
					$scope._popMsg('메뉴를 불러오는데 실패하였습니다.');
					return false
				}).then(function() {
			if (typeof callback === 'function') {
				setTimeout(function() {
					callback()
				}, 10)
			}
		})
	}
	$scope._getCurrentMenu = function() {
		return _getCurrentMenu()
	};
	function _getCurrentMenu() {
		$http({
			method : 'POST',
			url : '/menu/currentMenu.sb',
			params : $scope.params,
			headers : {
				'Content-Type' : 'application/json; charset=utf-8'
			}
		}).then(function successCallback(response) {
			if (response.data.status === 'OK') {
				var data = response.data.data;
				if (data) {
					$scope._setInitMenu(data.resrceCd)
				} else {
					$scope._setInitMenu('')
				}
			}
		}, function errorCallback(response) {
			$scope._popMsg('선택된 메뉴를 불러오는데 실패하였습니다.');
			return false
		})
	}
	$scope._searchTree(menuUrl);
	$scope._getCurrentMenu();
	$scope.loadedItems = function(s, e) {
		_loadedItems(s, e)
	};
	function _loadedItems(s, e) {
		var node;
		for (node = s.getFirstNode(); node; node = node.nextSibling()) {
			if (!isEmpty(node)) {
				wijmo.addClass(node.element, node.dataItem.iconNm)
			}
		}
		s.collapseToLevel(0);
		var initMenu = $scope._getInitMenu();
		if (initMenu) {
			for (node = s.getFirstNode(); node; node = node.next()) {
				if (isEmpty(node.nodes)) {
					if (!isEmpty(node.dataItem)
							&& node.dataItem.resrceCd === initMenu) {
						s.selectedItem = node.dataItem
					}
				}
			}
		}
	}
	$scope.selectedItemChanged = function(s, e) {
		_selectedItemChaged(s, e)
	};
	function _selectedItemChaged(s, e) {
		var node, pNode = $scope._getPNode();
		if (pNode) {
			for (node = pNode; node; node = node.parentNode) {
				wijmo.removeClass(node.element, "on")
			}
		}
		for (node = s.selectedNode; node; node = node.parentNode) {
			wijmo.addClass(node.element, "on")
		}
		$scope._setPNode(s.selectedNode)
	}
	$scope.itemClicked = function(s, e) {
		_itemClicked(s, e)
	};
	function _itemClicked(s, e) {
		if (!isEmpty(s.selectedNode.dataItem.url)) {
			if (document.getElementsByName('sessionId').length > 0) {
				var vSessionId = document.getElementsByName('sessionId')[0].value;
				location.href = s.selectedNode.dataItem.url + '?sid='
						+ vSessionId
			} else {
				location.href = s.selectedNode.dataItem.url
			}
		}
		if ($scope._getPNode() === s.selectedNode) {
			s.selectedNode.isCollapsed = !s.selectedNode.isCollapsed
		} else {
			s.selectedNode.isCollapsed = false
		}
	}
}
!function(win, $) {
	var app = angular.module('rootApp', [ 'wj', 'ngSanitize' ]);
	app
			.controller(
					'rootCtrl',
					[
							'$scope',
							'$http',
							'$compile',
							'$sce',
							'comboData',
							'pagingInfo',
							'pNode',
							'initMenu',
							function($scope, $http, $compile, $sce, comboData,
									pagingInfo, pNode, initMenu) {
								$scope
										.$on(
												'drawPager',
												function() {
													var page_scale = $scope
															._getPagingInfo('pageScale');
													var page_end = page_scale === 10 ? 9
															: 4;
													var firstBtnTag = '<li class=\"btn_previous first\"><a href=\"javascript:void(0);\" onclick="return false;" ng-click=\"_pageFirst(\'{ctrlName}\', 0);\"></a></li>';
											        var prevBtnTag = '<li class=\"btn_previous\"><a href=\"javascript:void(0);\" onclick="return false;" ng-click=\"_pagePrev($event, \'{ctrlName}\', \'{prev}\');\"></a></li>';
											        var pageBtnTag = '<li><a href=\"javascript:void(0);\" onclick="return false;" class=\"{cnm}\" ng-click=\"_pageView(\'{ctrlName}\', \'{i}\');\">{i}</a></li>';
											        var nextBtnTag = '<li class=\"btn_next\"><a href=\"javascript:void(0);\" onclick="return false;" ng-click=\"_pageNext($event, \'{ctrlName}\', \'{next}\');\"></a></li>';
											        var lastBtnTag = '<li class=\"btn_next last\"><a href=\"javascript:void(0);\" onclick="return false;" ng-click=\"_pageLast(\'{ctrlName}\', \'{totalPage}\');\"></a></li>';

													var pagerTag = '';
													var item = {};
													item.ctrlName = $scope
															._getPagingInfo('ctrlName');
													item.curr = $scope
															._getPagingInfo('curr');
													item.totCnt = $scope
															._getPagingInfo('totCnt');
													item.totalPage = $scope
															._getPagingInfo('totalPage');
													item.prev = 0;
													item.next = 0;
													item.start = 0;
													item.end = 0;
													var t = $scope
															._getPagingInfo('curr')
															/ page_scale;
													if (t.toString().indexOf(
															'.') === -1) {
														item.end = $scope
																._getPagingInfo('curr');
														item.start = item.end
																- page_end
													} else {
														item.start = (parseInt(t) * page_scale) + 1;
														item.end = item.start
																+ page_end
													}
													if (item.end > item.totalPage) {
														item.end = item.totalPage
													}

													pagerTag += wijmo.format(firstBtnTag, item);

													if (item.curr > page_scale) {
														item.prev = item.start - 1;
														pagerTag += wijmo
																.format(
																		prevBtnTag,
																		item)
													}
													for (var i = item.start; i <= item.end; i++) {
														item.i = i;
														item.cnm = i === item.curr ? 'on pagenav'
																: 'pagenav';
														pagerTag += wijmo
																.format(
																		pageBtnTag,
																		item)
													}
													if (item.end < item.totalPage) {
														item.next = item.end + 1;
														pagerTag += wijmo
																.format(
																		nextBtnTag,
																		item)
													}

													pagerTag += wijmo.format(lastBtnTag, item);

													var pager = $compile(
															pagerTag)($scope);
													var pagerName = item.ctrlName
															+ 'Pager';
													angular
															.element(
																	document
																			.getElementById(pagerName))
															.children()
															.remove();
													angular
															.element(
																	document
																			.getElementById(pagerName))
															.append(pager)
												});
								$scope._broadcast = function(ctrlName, params) {
									$scope.$broadcast('init');
									$scope.$broadcast(ctrlName, params)
								};
								$scope._pageView = function(ctrlName, curr) {
									_pageView(ctrlName, curr)
								};
								$scope._pagePrev = function(event, ctrlName,
										curr) {
									event.stopPropagation();
									_pageView(ctrlName, curr)
								};
								$scope._pageNext = function(event, ctrlName,
										curr) {
									event.stopPropagation();
									_pageView(ctrlName, curr)
								};
								$scope._pageFirst = function (ctrlName, curr) {
							        _pageView(ctrlName, curr);
							    };
							    $scope._pageLast = function (ctrlName, curr) {
							        _pageView(ctrlName, curr);
							    };
								function _pageView(ctrlName, curr) {
									$scope._setPagingInfo('curr', curr);
									$scope.$broadcast(ctrlName)
								}
								$scope._popMsg = function(msg, callback) {
									$scope.s_alert_msg = $sce.trustAsHtml(msg);
									setTimeout(
											function() {
												$scope._alertPopup
														.show(
																true,
																function() {
																	if (typeof callback === 'function') {
																		setTimeout(
																				function() {
																					callback()
																				},
																				50)
																	}
																})
											}, 100)
								};
								$scope._popConfirm = function(msg, callback) {
									$scope.s_confirm_msg = $sce
											.trustAsHtml(msg);
									setTimeout(
											function() {
												$scope._alertConfirm
														.show(
																true,
																function(e) {
																	if (e.dialogResult === "wj-hide-apply") {
																		if (typeof callback === 'function') {
																			setTimeout(
																					function() {
																						callback()
																					},
																					50)
																		}
																	}
																})
											}, 100)
								};
								$scope._initComboBox = function(s) {
									s._tbx.id = s._orgAtts.id.value;
									s._tbx.setAttribute("ng-model",
											s._orgAtts['ng-model']);
									s._tbx.attributes['ng-model'].value = s._orgAtts['ng-model'].value
								};
								$scope._initDateBox = function(s) {
									s.itemFormatter = function(date, element) {
										var day = date.getDay();
										if (day === 0) {
											element.style.color = 'red'
										} else if (day === 6) {
											element.style.color = '#1e88e5'
										}
									}
								};
								$scope._setPagingInfo = function(id, data) {
									pagingInfo.set(id, data)
								};
								$scope._getPagingInfo = function(id) {
									return pagingInfo.get(id)
								};
								$scope._setComboData = function(id, data) {
									comboData.set(id, data)
								};
								$scope._getComboData = function(id) {
									return comboData.get(id)
								};
								$scope._setInitMenu = function(data) {
									initMenu.set(data)
								};
								$scope._getInitMenu = function() {
									return initMenu.get()
								};
								$scope._setPNode = function(data) {
									pNode.set(data)
								};
								$scope._getPNode = function() {
									return pNode.get()
								}
							} ]);
	app.factory('comboData', function() {
		var comboDataMap = [];
		comboDataMap.set = function(id, data) {
			comboDataMap[id] = data
		};
		comboDataMap.get = function(id) {
			return comboDataMap[id]
		};
		return comboDataMap
	}).factory('pagingData', function() {
		var currentPage = {};
		currentPage.set = function(idx) {
			currentPage.value = idx
		};
		currentPage.get = function() {
			return currentPage.value
		};
		return currentPage
	}).factory('pagingInfo', function() {
		var pagingInfo = [];
		pagingInfo.set = function(id, data) {
			pagingInfo[id] = data
		};
		pagingInfo.get = function(id) {
			return pagingInfo[id]
		};
		return pagingInfo
	}).factory('pNode', function() {
		var pNode = {};
		pNode.set = function(data) {
			pNode.value = data
		};
		pNode.get = function() {
			return pNode.value
		};
		return pNode
	}).factory('initMenu', function() {
		var initMenu = {};
		initMenu.set = function(data) {
			initMenu.value = data
		};
		initMenu.get = function() {
			return initMenu.value
		};
		return initMenu
	});
	app.config(function($httpProvider) {
	});
	var agrid = {
		getApp : function() {
			return app
		},
		getScope : function(ctrlName) {
			var sel = 'div[ng-controller="' + ctrlName + '"]';
			return angular.element(sel).scope()
		}
	};
	win.agrid = agrid
}('undefined' !== typeof window ? window : this, angular);
