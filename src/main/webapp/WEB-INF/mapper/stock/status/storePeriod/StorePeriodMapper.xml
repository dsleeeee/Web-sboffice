<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.solbipos.stock.status.storeperiod.service.impl.StorePeriodMapper">

	<!-- 매장기간수불 - 리스트 조회 -->
    <!--
        TABLE    :
        PARAM    : storePeriodVO
        COMMENTS : 매장기간수불 - 리스트를 조회한다.
    -->
    <select id="getStorePeriodList" parameterType="storePeriodVO" resultType="DefaultMap">
        /* USE : StorePeriodMapper.getStorePeriodList */
    	<include refid="CmmSQL.PagingTemplateHeader"/>
		SELECT FN_GET_PROD_CLASS_CD_NM_STR(TMP.STORE_CD, TMP.PROD_CLASS_CD, 'NM_STR') AS PROD_CLASS_NM
				, TSSSD.PROD_CD
				, TMP.PROD_NM
				, TSSSD.STORE_CD
				, (SELECT STORE_NM FROM TB_MS_STORE Z WHERE Z.STORE_CD = TSSSD.STORE_CD) AS STORE_NM
				, TMP.PO_UNIT_QTY
				, TMP.PO_UNIT_FG
				,	(SELECT NMCODE_NM FROM TB_HQ_NMCODE WHERE NMCODE_GRP_CD = '093' AND HQ_OFFICE_CD = #{hqOfficeCd} AND NMCODE_CD = TMP.PO_UNIT_FG)  AS PO_UNIT_FG_NM
				, TMPB.BARCD_CD
				<if test='unitFg == "1"'>
				, SF_ZERO_TO_NULL(SUM(STORE_IN_QTY 	/ TMP.PO_UNIT_QTY)) AS STORE_IN_QTY   /* 매장입고 수량*/
				, SF_ZERO_TO_NULL(SUM(STORE_OUT_QTY 	/ TMP.PO_UNIT_QTY)) AS STORE_OUT_QTY  /* 매장반품 수량*/
				, SF_ZERO_TO_NULL(SUM(PURCHS_IN_QTY 	/ TMP.PO_UNIT_QTY)) AS PURCHS_IN_QTY  /* 사입입고 수량*/
				, SF_ZERO_TO_NULL(SUM(PURCHS_OUT_QTY 	/ TMP.PO_UNIT_QTY)) AS PURCHS_OUT_QTY /* 사입반품 수량*/
				, SF_ZERO_TO_NULL(SUM(STORE_SALE_QTY 	/ TMP.PO_UNIT_QTY)) AS STORE_SALE_QTY /* 매장판매 수량*/
				, SF_ZERO_TO_NULL(SUM(MOVE_IN_QTY 		/ TMP.PO_UNIT_QTY)) AS MOVE_IN_QTY 	 /* 매장이입 수량*/
				, SF_ZERO_TO_NULL(SUM(MOVE_OUT_QTY 	/ TMP.PO_UNIT_QTY)) AS MOVE_OUT_QTY   /* 매장이출 수량*/
				, SF_ZERO_TO_NULL(SUM(DISUSE_QTY 		/ TMP.PO_UNIT_QTY)) AS DISUSE_QTY 	 /* 재고폐기 수량*/
				, SF_ZERO_TO_NULL(SUM(ADJ_QTY 			/ TMP.PO_UNIT_QTY)) AS ADJ_QTY 		 /* 재고조정 수량*/
				, SF_ZERO_TO_NULL(SUM(SET_IN_QTY	 	/ TMP.PO_UNIT_QTY)) AS SET_IN_QTY	 /* 세트생성 수량*/
				, SF_ZERO_TO_NULL(SUM(v1.BASE_QTY / TMP.PO_UNIT_QTY))      AS BASE_QTY /* 기초재고수량 */
				, SF_ZERO_TO_NULL(SUM(v2.CLOSE_QTY / TMP.PO_UNIT_QTY))     AS CLOSE_QTY /* 기말재고수량 */
				</if>
				<if test='unitFg == "0"'>
				, SF_ZERO_TO_NULL(SUM(STORE_IN_QTY 	)) AS STORE_IN_QTY   /* 매장입고 수량*/
				, SF_ZERO_TO_NULL(SUM(STORE_OUT_QTY 	)) AS STORE_OUT_QTY  /* 매장반품 수량*/
				, SF_ZERO_TO_NULL(SUM(PURCHS_IN_QTY 	)) AS PURCHS_IN_QTY  /* 사입입고 수량*/
				, SF_ZERO_TO_NULL(SUM(PURCHS_OUT_QTY 	)) AS PURCHS_OUT_QTY /* 사입반품 수량*/
				, SF_ZERO_TO_NULL(SUM(STORE_SALE_QTY 	)) AS STORE_SALE_QTY /* 매장판매 수량*/
				, SF_ZERO_TO_NULL(SUM(MOVE_IN_QTY 		)) AS MOVE_IN_QTY 	 /* 매장이입 수량*/
				, SF_ZERO_TO_NULL(SUM(MOVE_OUT_QTY 	)) AS MOVE_OUT_QTY   /* 매장이출 수량*/
				, SF_ZERO_TO_NULL(SUM(DISUSE_QTY 		)) AS DISUSE_QTY 	 /* 재고폐기 수량*/
				, SF_ZERO_TO_NULL(SUM(ADJ_QTY 			)) AS ADJ_QTY 		 /* 재고조정 수량*/
				, SF_ZERO_TO_NULL(SUM(SET_IN_QTY	 	)) AS SET_IN_QTY	 /* 세트생성 수량*/
				, SF_ZERO_TO_NULL(SUM(v1.BASE_QTY))       AS BASE_QTY /* 기초재고수량 */
				, SF_ZERO_TO_NULL(SUM(v2.CLOSE_QTY))      AS CLOSE_QTY /* 기말재고수량 */
				</if>
				, SF_ZERO_TO_NULL(SUM(STORE_IN_TOT 	)) AS STORE_IN_TOT 	 /* 매장입고 금액*/
				, SF_ZERO_TO_NULL(SUM(STORE_OUT_TOT 	)) AS STORE_OUT_TOT  /* 매장반품 금액*/
				, SF_ZERO_TO_NULL(SUM(PURCHS_IN_TOT 	)) AS PURCHS_IN_TOT  /* 사입입고 금액*/
				, SF_ZERO_TO_NULL(SUM(PURCHS_OUT_TOT 	)) AS PURCHS_OUT_TOT /* 사입반품 금액*/
				, SF_ZERO_TO_NULL(SUM(STORE_SALE_TOT 	)) AS STORE_SALE_TOT /* 매장판매 금액*/
				, SF_ZERO_TO_NULL(SUM(MOVE_IN_TOT 		)) AS MOVE_IN_TOT 	 /* 매장이입 금액*/
				, SF_ZERO_TO_NULL(SUM(MOVE_OUT_TOT 	)) AS MOVE_OUT_TOT 	 /* 매장이출 금액*/
				, SF_ZERO_TO_NULL(SUM(v1.BASE_TOT))       AS BASE_TOT /* 기초재고금액 */
				, SF_ZERO_TO_NULL(SUM(v2.CLOSE_TOT))      AS CLOSE_TOT /* 기말재고금액 */
				, #{startDate} AS START_DATE
				, #{endDate} AS END_DATE
  		<include refid="CmmSQL.PagingTemplateCount"/>
  		FROM   TB_ST_STORE_STOCK_DAILY TSSSD 
			, TB_MS_PRODUCT TMP
			, TB_MS_PRODUCT_BARCD TMPB
			, (
					SELECT STORE_CD
					,       PROD_CD
					,       DATE_QTY AS BASE_QTY
					,       AVG_COST_UPRC AS BASE_TOT
					FROM   TB_ST_STORE_STOCK_CUR_DATE_V01
					WHERE  STORE_CD   	  (+) = #{storeCd}
					AND    THE_DATE      (+) = TO_CHAR(TO_DATE(#{startDate}, 'YYYYMMDD')-1, 'YYYYMMDD')
			) v1
			, (
					SELECT STORE_CD
					,       PROD_CD
					,       DATE_QTY AS CLOSE_QTY
					,       AVG_COST_UPRC AS CLOSE_TOT
					FROM   TB_ST_STORE_STOCK_CUR_DATE_V01
					WHERE  STORE_CD  	  (+) = #{storeCd}
					AND    THE_DATE      (+) = #{endDate}
			) v2
 		WHERE EXISTS (SELECT * FROM TB_MS_STORE Z WHERE Z.STORE_CD = tmp.STORE_CD AND Z.HQ_OFFICE_CD = #{hqOfficeCd})
 		AND	TSSSD.STORE_CD 	= TMP.STORE_CD
	    AND TSSSD.PROD_CD     = TMP.PROD_CD
	    AND TSSSD.STORE_CD 	= TMPB.STORE_CD(+)
	    AND TSSSD.PROD_CD     = TMPB.PROD_CD(+)
		AND v1.STORE_CD 	(+)= TSSSD.STORE_CD
		AND v1.PROD_CD      (+)= TSSSD.PROD_CD
		AND v2.STORE_CD		(+)= TSSSD.STORE_CD
		AND v2.PROD_CD      (+)= TSSSD.PROD_CD
		AND TMP.STOCK_PROD_YN = 'Y'
		AND TMP.USE_YN = 'Y'
	    <if test="startDate != '' and startDate != null and endDate != '' and endDate != null">
 			AND TSSSD.IOSTOCK_DATE BETWEEN #{startDate} AND #{endDate}
		</if>
		<if test="prodCd != null and prodCd != ''">
			AND TMP.PROD_CD = #{prodCd}
		</if>
        <if test='storeCdQuery != null and storeCdQuery != ""'>
            AND TMP.STORE_CD IN (${storeCdQuery})
        </if>
		<if test="prodNm != null and prodNm != ''">
			AND TMP.PROD_NM LIKE '%'||#{prodNm}||'%'
		</if>
		<if test="barcdCd != null and barcdCd != ''">
			AND TMPB.BARCD_CD = #{barcdCd}
		</if>
		<if test='prodClassCd != null and prodClassCd != ""'>
              AND TMP.PROD_CLASS_CD IN  (
                                          SELECT              PROD_CLASS_CD
                                          FROM                TB_HQ_PRODUCT_CLASS
                                          WHERE               HQ_OFFICE_CD = #{hqOfficeCd}
                                          START WITH          PROD_CLASS_CD   = #{prodClassCd}
                                          AND                 HQ_OFFICE_CD = #{hqOfficeCd}
                                          CONNECT BY PRIOR    PROD_CLASS_CD   = P_PROD_CLASS_CD
                                          AND                 HQ_OFFICE_CD = #{hqOfficeCd}
                                         )
	     </if>
	     <if test='arrVendrCd != null and arrVendrCd != ""'>
            AND tmp.PROD_CD IN    ( SELECT  PROD_CD
                                    FROM    TB_MS_VENDOR_PROD
                                    WHERE   STORE_CD = TSSSD.STORE_CD
                                    AND     VENDR_CD IN
                                    <foreach collection="arrVendrCd" item="item" open="(" close=")" separator=",">
                                        #{item}
                                    </foreach>
                                  )
        	</if>
 		GROUP BY
				TMP.STORE_CD
 		     , TMP.PROD_CLASS_CD
 			 , TSSSD.PROD_CD
		     , TMP.PROD_NM
		     , TSSSD.STORE_CD
		     , TMP.PO_UNIT_QTY
		     , TMP.PO_UNIT_FG
		     , TMPB.BARCD_CD
 		ORDER BY TSSSD.PROD_CD, TSSSD.STORE_CD
		<include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <select id="getStorePeriodDtlList" parameterType="storePeriodVO" resultType="DefaultMap">
    	/* USE : StorePeriodMapper.getPeriodiostockProdDtlList */
    	<!-- 쿼리 바꿔야함. PeriodIostockMapper.xml에 있는거 복붙함 -->
    	<include refid="CmmSQL.PagingTemplateHeader"/>
		SELECT TSHSD.IOSTOCK_DATE AS IO_OCCR_DT
		     , SF_ZERO_TO_NULL(SUM(VENDR_IN_QTY			)) AS VENDR_IN_QTY			/* 본사입고 수량*/
		     , SF_ZERO_TO_NULL(SUM(VENDR_IN_TOT			)) AS VENDR_IN_TOT			/* 본사입고 금액*/
		     , SF_ZERO_TO_NULL(SUM(VENDR_OUT_QTY		)) AS VENDR_OUT_QTY		 	/* 업체반출 수량*/
		     , SF_ZERO_TO_NULL(SUM(VENDR_OUT_TOT		)) AS VENDR_OUT_TOT		 	/* 업체반출 금액*/
		     , SF_ZERO_TO_NULL(SUM(HQ_OUT_QTY			)) AS HQ_OUT_QTY			/* 본사출고 수량*/
		     , SF_ZERO_TO_NULL(SUM(HQ_OUT_TOT			)) AS HQ_OUT_TOT			/* 본사출고 금액*/
		     , SF_ZERO_TO_NULL(SUM(HQ_IN_QTY			)) AS HQ_IN_QTY			 	/* 본사반입 수량*/
		     , SF_ZERO_TO_NULL(SUM(HQ_IN_TOT			)) AS HQ_IN_TOT			 	/* 본사반입 금액*/
		     , SF_ZERO_TO_NULL(SUM(STORE_MOVE_IN_QTY	)) AS STORE_MOVE_IN_QTY	 	/* 매장이입 수량*/
		     , SF_ZERO_TO_NULL(SUM(STORE_MOVE_IN_TOT	)) AS STORE_MOVE_IN_TOT	 	/* 매장이입 금액*/
		     , SF_ZERO_TO_NULL(SUM(STORE_MOVE_OUT_QTY	)) AS STORE_MOVE_OUT_QTY	/* 매장이출 수량*/
		     , SF_ZERO_TO_NULL(SUM(STORE_MOVE_OUT_TOT	)) AS STORE_MOVE_OUT_TOT	/* 매장이출 금액*/
		     , SF_ZERO_TO_NULL(SUM(DISUSE_QTY			)) AS DISUSE_QTY			/* 재고폐기 수량*/
		     , SF_ZERO_TO_NULL(SUM(ADJ_QTY				)) AS ADJ_QTY				/* 재고조정 수량*/
		     , SF_ZERO_TO_NULL(SUM(SET_IN_AMT			)) AS SET_IN_AMT			/* 세트생성 수량*/
		     , SF_ZERO_TO_NULL(SUM(SALE_VENDR_ORDER_QTY	)) AS SALE_VENDR_ORDER_QTY	/* 거래처출고 수량*/
		     , SF_ZERO_TO_NULL(SUM(SALE_VENDR_ORDER_TOT	)) AS SALE_VENDR_ORDER_TOT	/* 거래처출고 금액*/
		     , SF_ZERO_TO_NULL(SUM(SALE_VENDR_RTN_QTY	)) AS SALE_VENDR_RTN_QTY	/* 거래처반품 수량*/
		     , SF_ZERO_TO_NULL(SUM(SALE_VENDR_RTN_TOT	)) AS SALE_VENDR_RTN_TOT	/* 거래처반품 금액*/
		     <include refid="CmmSQL.PagingTemplateCount"/>
  		FROM TB_ST_HQ_STOCK_DAILY TSHSD
 		WHERE TSHSD.HQ_OFFICE_CD = #{hqOfficeCd}
 			 <!-- !!!!!!!!!!!!!!!!!!! 날짜랑 상품코드 조건은 '업무쿼리'에 없었는데 직접 추가함. 물어보고 빼든지 말든지 하기!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
 			  AND TSHSD.IOSTOCK_DATE BETWEEN #{startDate} AND #{endDate}
			  AND TSHSD.PROD_CD = #{prodCd}
 		GROUP BY TSHSD.IOSTOCK_DATE
 		ORDER BY TSHSD.IOSTOCK_DATE DESC
		<include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <select id="getStorePeriodQtyDtlList" parameterType="storePeriodVO" resultType="DefaultMap">
    	SELECT '2017-12-10' AS SALE_DATE
            , '200000' AS  STORE_CD
            , '본사출고매장' AS  STORE_NM
        FROM DUAL
        UNION ALL
        SELECT '2017-12-10' AS SALE_DATE
            , '300000' AS  STORE_CD
            , '반입매장' AS  STORE_NM
        FROM DUAL
    </select>

    <select id="getStoreperiodExcelList" parameterType="storePeriodVO" resultType="DefaultMap">
    	/* USE : StorePeriodMapper.getStoreperiodExcelList */
		SELECT FN_GET_PROD_CLASS_CD_NM_STR(TMP.STORE_CD, TMP.PROD_CLASS_CD, 'NM_STR') AS PROD_CLASS_NM
			, TSSSD.PROD_CD
			, TMP.PROD_NM
			, TSSSD.STORE_CD
			, (SELECT STORE_NM FROM TB_MS_STORE Z WHERE Z.STORE_CD = TSSSD.STORE_CD) AS STORE_NM
			, TMP.PO_UNIT_QTY
			, TMP.PO_UNIT_FG
			, TMPB.BARCD_CD
			<if test='unitFg == "1"'>
			, SF_ZERO_TO_NULL(SUM(STORE_IN_QTY 	/ TMP.PO_UNIT_QTY)) AS STORE_IN_QTY   /* 매장입고 수량*/
			, SF_ZERO_TO_NULL(SUM(STORE_OUT_QTY 	/ TMP.PO_UNIT_QTY)) AS STORE_OUT_QTY  /* 매장반품 수량*/
			, SF_ZERO_TO_NULL(SUM(PURCHS_IN_QTY 	/ TMP.PO_UNIT_QTY)) AS PURCHS_IN_QTY  /* 사입입고 수량*/
			, SF_ZERO_TO_NULL(SUM(PURCHS_OUT_QTY 	/ TMP.PO_UNIT_QTY)) AS PURCHS_OUT_QTY /* 사입반품 수량*/
			, SF_ZERO_TO_NULL(SUM(STORE_SALE_QTY 	/ TMP.PO_UNIT_QTY)) AS STORE_SALE_QTY /* 매장판매 수량*/
			, SF_ZERO_TO_NULL(SUM(MOVE_IN_QTY 		/ TMP.PO_UNIT_QTY)) AS MOVE_IN_QTY 	 /* 매장이입 수량*/
			, SF_ZERO_TO_NULL(SUM(MOVE_OUT_QTY 	/ TMP.PO_UNIT_QTY)) AS MOVE_OUT_QTY   /* 매장이출 수량*/
			, SF_ZERO_TO_NULL(SUM(DISUSE_QTY 		/ TMP.PO_UNIT_QTY)) AS DISUSE_QTY 	 /* 재고폐기 수량*/
			, SF_ZERO_TO_NULL(SUM(ADJ_QTY 			/ TMP.PO_UNIT_QTY)) AS ADJ_QTY 		 /* 재고조정 수량*/
			, SF_ZERO_TO_NULL(SUM(SET_IN_QTY	 	/ TMP.PO_UNIT_QTY)) AS SET_IN_QTY	 /* 세트생성 수량*/

			, SF_ZERO_TO_NULL(SUM(v1.BASE_QTY / TMP.PO_UNIT_QTY))      AS BASE_QTY /* 기초재고수량 */
			, SF_ZERO_TO_NULL(SUM(v2.CLOSE_QTY / TMP.PO_UNIT_QTY))     AS CLOSE_QTY /* 기말재고수량 */
			</if>
			<if test='unitFg == "0"'>
			, SF_ZERO_TO_NULL(SUM(STORE_IN_QTY 	)) AS STORE_IN_QTY   /* 매장입고 수량*/
			, SF_ZERO_TO_NULL(SUM(STORE_OUT_QTY 	)) AS STORE_OUT_QTY  /* 매장반품 수량*/
			, SF_ZERO_TO_NULL(SUM(PURCHS_IN_QTY 	)) AS PURCHS_IN_QTY  /* 사입입고 수량*/
			, SF_ZERO_TO_NULL(SUM(PURCHS_OUT_QTY 	)) AS PURCHS_OUT_QTY /* 사입반품 수량*/
			, SF_ZERO_TO_NULL(SUM(STORE_SALE_QTY 	)) AS STORE_SALE_QTY /* 매장판매 수량*/
			, SF_ZERO_TO_NULL(SUM(MOVE_IN_QTY 		)) AS MOVE_IN_QTY 	 /* 매장이입 수량*/
			, SF_ZERO_TO_NULL(SUM(MOVE_OUT_QTY 	)) AS MOVE_OUT_QTY   /* 매장이출 수량*/
			, SF_ZERO_TO_NULL(SUM(DISUSE_QTY 		)) AS DISUSE_QTY 	 /* 재고폐기 수량*/
			, SF_ZERO_TO_NULL(SUM(ADJ_QTY 			)) AS ADJ_QTY 		 /* 재고조정 수량*/
			, SF_ZERO_TO_NULL(SUM(SET_IN_QTY	 	)) AS SET_IN_QTY	 /* 세트생성 수량*/
			, SF_ZERO_TO_NULL(SUM(v1.BASE_QTY))       AS BASE_QTY /* 기초재고수량 */
			, SF_ZERO_TO_NULL(SUM(v2.CLOSE_QTY))      AS CLOSE_QTY /* 기말재고수량 */
			</if>
			, SF_ZERO_TO_NULL(SUM(STORE_IN_TOT 	)) AS STORE_IN_TOT 	 /* 매장입고 금액*/
			, SF_ZERO_TO_NULL(SUM(STORE_OUT_TOT 	)) AS STORE_OUT_TOT  /* 매장반품 금액*/
			, SF_ZERO_TO_NULL(SUM(PURCHS_IN_TOT 	)) AS PURCHS_IN_TOT  /* 사입입고 금액*/
			, SF_ZERO_TO_NULL(SUM(PURCHS_OUT_TOT 	)) AS PURCHS_OUT_TOT /* 사입반품 금액*/
			, SF_ZERO_TO_NULL(SUM(STORE_SALE_TOT 	)) AS STORE_SALE_TOT /* 매장판매 금액*/
			, SF_ZERO_TO_NULL(SUM(MOVE_IN_TOT 		)) AS MOVE_IN_TOT 	 /* 매장이입 금액*/
			, SF_ZERO_TO_NULL(SUM(MOVE_OUT_TOT 	)) AS MOVE_OUT_TOT 	 /* 매장이출 금액*/
			, SF_ZERO_TO_NULL(SUM(v1.BASE_TOT))       AS BASE_TOT /* 기초재고금액 */
			, SF_ZERO_TO_NULL(SUM(v2.CLOSE_TOT))      AS CLOSE_TOT /* 기말재고금액 */
		FROM   TB_ST_STORE_STOCK_DAILY TSSSD
			, TB_MS_PRODUCT TMP
			, TB_MS_PRODUCT_BARCD TMPB
			, (
					SELECT STORE_CD
					,       PROD_CD
					,       DATE_QTY AS BASE_QTY
					,       AVG_COST_UPRC AS BASE_TOT
					FROM   TB_ST_STORE_STOCK_CUR_DATE_V01
					WHERE  STORE_CD   	  (+) = #{storeCd}
					AND    THE_DATE      (+) = TO_CHAR(TO_DATE(#{startDate}, 'YYYYMMDD')-1, 'YYYYMMDD')
			) v1
			, (
					SELECT STORE_CD
					,       PROD_CD
					,       DATE_QTY AS CLOSE_QTY
					,       AVG_COST_UPRC AS CLOSE_TOT
					FROM   TB_ST_STORE_STOCK_CUR_DATE_V01
					WHERE  STORE_CD  	  (+) = #{storeCd}
					AND    THE_DATE      (+) = #{endDate}
			) v2
		WHERE EXISTS (SELECT * FROM TB_MS_STORE Z WHERE Z.STORE_CD = tmp.STORE_CD AND Z.HQ_OFFICE_CD = #{hqOfficeCd})
 		AND	TSSSD.STORE_CD 	= TMP.STORE_CD
	    AND TSSSD.PROD_CD     = TMP.PROD_CD
	    AND TSSSD.STORE_CD 	= TMPB.STORE_CD(+)
	    AND TSSSD.PROD_CD     = TMPB.PROD_CD(+)
		AND v1.STORE_CD 	(+)= TSSSD.STORE_CD
		AND v1.PROD_CD      (+)= TSSSD.PROD_CD
		AND v2.STORE_CD		(+)= TSSSD.STORE_CD
		AND v2.PROD_CD      (+)= TSSSD.PROD_CD
		AND TMP.STOCK_PROD_YN = 'Y'
		AND TMP.USE_YN = 'Y'
	    <if test="startDate != '' and startDate != null and endDate != '' and endDate != null">
 			AND TSSSD.IOSTOCK_DATE BETWEEN #{startDate} AND #{endDate}
		</if>
		<if test="prodCd != null and prodCd != ''">
			AND TMP.PROD_CD = #{prodCd}
		</if>
        <if test='storeCdQuery != null and storeCdQuery != ""'>
            AND TMP.STORE_CD IN (${storeCdQuery})
        </if>
		<if test="prodNm != null and prodNm != ''">
			AND TMP.PROD_NM LIKE '%'||#{prodNm}||'%'
		</if>
		<if test="barcdCd != null and barcdCd != ''">
			AND TMPB.BARCD_CD = #{barcdCd}
		</if>
		<if test='prodClassCd != null and prodClassCd != ""'>
              AND TMP.PROD_CLASS_CD IN  (
                                          SELECT              PROD_CLASS_CD
                                          FROM                TB_HQ_PRODUCT_CLASS
                                          WHERE               HQ_OFFICE_CD = #{hqOfficeCd}
                                          START WITH          PROD_CLASS_CD   = #{prodClassCd}
                                          AND                 HQ_OFFICE_CD = #{hqOfficeCd}
                                          CONNECT BY PRIOR    PROD_CLASS_CD   = P_PROD_CLASS_CD
                                          AND                 HQ_OFFICE_CD = #{hqOfficeCd}
                                         )
	     </if>
	     <if test='arrVendrCd != null and arrVendrCd != ""'>
            AND tmp.PROD_CD IN    ( SELECT  PROD_CD
                                    FROM    TB_MS_VENDOR_PROD
                                    WHERE   STORE_CD = TSSSD.STORE_CD
                                    AND     VENDR_CD IN
                                    <foreach collection="arrVendrCd" item="item" open="(" close=")" separator=",">
                                        #{item}
                                    </foreach>
                                  )
        	</if>
 		GROUP BY
			   TMP.STORE_CD
			 , TMP.PROD_CLASS_CD
 			 , TSSSD.PROD_CD
		     , TMP.PROD_NM
		     , TSSSD.STORE_CD
		     , TMP.PO_UNIT_QTY
		     , TMP.PO_UNIT_FG
		     , TMPB.BARCD_CD
 		ORDER BY TSSSD.PROD_CD, TSSSD.STORE_CD
    </select>

</mapper>
