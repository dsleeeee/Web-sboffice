<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    MobileStoreDay.xml
    매장일수불
    ======================================================
    No  ||  수정자 ||  수정일자    ||  수정내역
    ======================================================
    1       김유승     2024.07.23     최초작성
-->

<mapper namespace="kr.co.solbipos.mobile.stock.status.storeDay.service.impl.MobileStoreDayMapper">

    <!-- 매장일수불 - 리스트 조회 -->
    <!--
        TABLE    : TB_ST_STORE_STOCK_DAILY, TB_MS_PRODUCT, TB_MS_PRODUCT_BARCD, TB_HQ_PRODUCT_CLASS
        PARAM    : storeDayVO
        COMMENTS : 매장일수불현황 - 리스트를 조회한다.
    -->
    <select id="storeDayList" parameterType="mobileStoreDayVO" resultType="DefaultMap">
        /* MobileStoreDayMapper.storeDayList */
        <include refid="CmmSQL.PagingTemplateHeader"/>
        SELECT  A.*
        ,       (SELECT NMCODE_NM FROM TB_HQ_NMCODE WHERE NMCODE_GRP_CD = '093' AND HQ_OFFICE_CD = #{hqOfficeCd} AND NMCODE_CD = A.PO_UNIT_FG)  AS PO_UNIT_FG_NM      /* 본사 가상로그인시 */
        <include refid="CmmSQL.PagingTemplateCount"/>
        FROM
            (
                SELECT  A.*
                ,       B.BASE_QTY
                ,       B.BASE_TOT
                ,       C.CLOSE_QTY
                ,       C.CLOSE_TOT
                FROM
                    (
                        SELECT  FN_GET_PROD_CLASS_CD_NM_STR(TMP.STORE_CD, TMP.PROD_CLASS_CD, 'NM_STR') AS PROD_CLASS_NM
                        ,       TSSSD.PROD_CD
                        ,       TMP.PROD_NM
                        ,       TSSSD.STORE_CD
                        ,       (SELECT STORE_NM FROM TB_MS_STORE Z WHERE Z.STORE_CD = TSSSD.STORE_CD) AS STORE_NM
                        ,       TMP.PO_UNIT_QTY
                        ,       TMP.PO_UNIT_FG
                        ,       TMPB.BARCD_CD
                        <if test='unitFg == "1"'>
                            ,   SF_ZERO_TO_NULL(SUM(STORE_IN_QTY / TMP.PO_UNIT_QTY))    AS STORE_IN_QTY /* 매장입고 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(STORE_OUT_QTY / TMP.PO_UNIT_QTY))   AS STORE_OUT_QTY /* 매장반품 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(PURCHS_IN_QTY / TMP.PO_UNIT_QTY))   AS PURCHS_IN_QTY /* 사입입고 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(PURCHS_OUT_QTY / TMP.PO_UNIT_QTY))  AS PURCHS_OUT_QTY /* 사입반품 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(STORE_SALE_QTY / TMP.PO_UNIT_QTY))  AS STORE_SALE_QTY /* 매장판매 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(MOVE_IN_QTY / TMP.PO_UNIT_QTY))     AS MOVE_IN_QTY /* 매장이입 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(MOVE_OUT_QTY / TMP.PO_UNIT_QTY))    AS MOVE_OUT_QTY /* 매장이출 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(DISUSE_QTY / TMP.PO_UNIT_QTY))      AS DISUSE_QTY /* 재고폐기 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(ADJ_QTY / TMP.PO_UNIT_QTY))         AS ADJ_QTY /* 재고조정 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(SET_IN_QTY / TMP.PO_UNIT_QTY))      AS SET_IN_QTY /* 세트생성 수량*/
                        </if>
                        <if test='unitFg == "0"'>
                            ,   SF_ZERO_TO_NULL(SUM(STORE_IN_QTY))      AS STORE_IN_QTY /* 매장입고 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(STORE_OUT_QTY))     AS STORE_OUT_QTY /* 매장반품 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(PURCHS_IN_QTY))     AS PURCHS_IN_QTY /* 사입입고 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(PURCHS_OUT_QTY))    AS PURCHS_OUT_QTY /* 사입반품 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(STORE_SALE_QTY))    AS STORE_SALE_QTY /* 매장판매 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(MOVE_IN_QTY))       AS MOVE_IN_QTY /* 매장이입 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(MOVE_OUT_QTY))      AS MOVE_OUT_QTY /* 매장이출 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(DISUSE_QTY))        AS DISUSE_QTY /* 재고폐기 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(ADJ_QTY))           AS ADJ_QTY /* 재고조정 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(SET_IN_QTY))        AS SET_IN_QTY /* 세트생성 수량*/
                        </if>
                        ,       SF_ZERO_TO_NULL(SUM(STORE_IN_TOT))      AS STORE_IN_TOT /* 매장입고 금액*/
                        ,       SF_ZERO_TO_NULL(SUM(STORE_OUT_TOT))     AS STORE_OUT_TOT /* 매장반품 금액*/
                        ,       SF_ZERO_TO_NULL(SUM(PURCHS_IN_TOT))     AS PURCHS_IN_TOT /* 사입입고 금액*/
                        ,       SF_ZERO_TO_NULL(SUM(PURCHS_OUT_TOT))    AS PURCHS_OUT_TOT /* 사입반품 금액*/
                        ,       SF_ZERO_TO_NULL(SUM(STORE_SALE_TOT))    AS STORE_SALE_TOT /* 매장판매 금액*/
                        ,       SF_ZERO_TO_NULL(SUM(MOVE_IN_TOT))       AS MOVE_IN_TOT /* 매장이입 금액*/
                        ,       SF_ZERO_TO_NULL(SUM(MOVE_OUT_TOT))      AS MOVE_OUT_TOT /* 매장이출 금액*/
                        ,       #{startDate} AS START_DATE
                        FROM    TB_ST_STORE_STOCK_DAILY TSSSD
                        ,       TB_MS_PRODUCT TMP
                        ,       TB_MS_PRODUCT_BARCD TMPB
                        WHERE   TSSSD.STORE_CD = TMP.STORE_CD
                        AND     TSSSD.PROD_CD = TMP.PROD_CD
                        AND     TSSSD.STORE_CD = TMPB.STORE_CD(+)
                        AND     TSSSD.PROD_CD = TMPB.PROD_CD(+)
                        AND     TMP.STOCK_PROD_YN = 'Y'
                        AND     TMP.USE_YN = 'Y'
                        <if test='startDate != null and startDate != ""'>
                            AND TSSSD.IOSTOCK_DATE = #{startDate}
                        </if>
                        <if test='prodCd != null and prodCd != ""'>
                            AND TMP.PROD_CD = #{prodCd}
                        </if>
                        <choose>
                            <when test='storeCdQuery != null and storeCdQuery != ""'>
                                AND TSSSD.STORE_CD IN (${storeCdQuery})
                            </when>
                            <when test='storeCdQuery == null or storeCdQuery == ""'>
                                AND TSSSD.STORE_CD IN (SELECT STORE_CD FROM TB_MS_STORE WHERE HQ_OFFICE_CD = #{hqOfficeCd})
                            </when>
                        </choose>
                        <if test='arrVendrCd != null and arrVendrCd != ""'>
                            AND TMP.PROD_CD IN (
                                                    SELECT  PROD_CD
                                                    FROM    TB_MS_VENDOR_PROD
                                                    WHERE   STORE_CD = TSSSD.STORE_CD
                                                    AND     VENDR_CD IN
                                                    <foreach collection="arrVendrCd" item="item" open="(" close=")" separator=",">
                                                        #{item}
                                                    </foreach>
                                                )
                        </if>
                        <if test='prodClassCd != null and prodClassCd != ""'>
                            AND TMP.PROD_CLASS_CD IN    (
                                                            SELECT  PROD_CLASS_CD
                                                            FROM    TB_HQ_PRODUCT_CLASS
                                                            WHERE   HQ_OFFICE_CD = #{hqOfficeCd}
                                                            START
                                                            WITH    PROD_CLASS_CD = #{prodClassCd}
                                                            AND     HQ_OFFICE_CD = #{hqOfficeCd}
                                                            CONNECT BY
                                                            PRIOR   PROD_CLASS_CD = P_PROD_CLASS_CD
                                                            AND     HQ_OFFICE_CD = #{hqOfficeCd}
                                                        )
                        </if>
                        <if test='prodNm != null and prodNm != ""'>
                            AND TMP.PROD_NM LIKE '%'||#{prodNm}||'%'
                        </if>
                        <if test='barcdCd != null and barcdCd != ""'>
                            AND TMPB.BARCD_CD = #{barcdCd}
                        </if>
                        GROUP
                        BY      TMP.STORE_CD
                        ,       TMP.PROD_CLASS_CD
                        ,       TSSSD.PROD_CD
                        ,       TMP.PROD_NM
                        ,       TSSSD.STORE_CD
                        ,       TMP.PO_UNIT_QTY
                        ,       TMP.PO_UNIT_FG
                        ,       TMPB.BARCD_CD
                    ) A
                ,	(
                        SELECT 	AST.STORE_CD
                        ,		AST.PROD_CD
                        <if test='unitFg == "1"'>
                            ,   SF_ZERO_TO_NULL(SUM(AST.DATE_QTY / TMP.PO_UNIT_QTY))             AS BASE_QTY /* 기초재고수량 */
                            ,   SF_ZERO_TO_NULL(SUM(AST.AVG_COST_UPRC))                          AS BASE_TOT /* 기초재고금액 */
                        </if>
                        <if test='unitFg == "0"'>
                            ,	SF_ZERO_TO_NULL(SUM(AST.DATE_QTY))                               AS BASE_QTY /* 기초재고수량 */
                            , 	SF_ZERO_TO_NULL(SUM(AST.AVG_COST_UPRC))                          AS BASE_TOT /* 기초재고금액 */
                        </if>
                        FROM 	TB_ST_STORE_STOCK_CUR_DATE_V01 AST
                        ,		TB_MS_PRODUCT TMP
                        WHERE	AST.THE_DATE 	(+) =   TO_CHAR(TO_DATE(#{startDate}, 'YYYYMMDD')-1, 'YYYYMMDD')
                        <choose>
                            <when test='storeCdQuery != null and storeCdQuery != ""'>
                                AND AST.STORE_CD IN (${storeCdQuery})
                            </when>
                            <when test='storeCdQuery == null or storeCdQuery == ""'>
                                AND AST.STORE_CD IN (SELECT STORE_CD FROM TB_MS_STORE WHERE HQ_OFFICE_CD = #{hqOfficeCd})
                            </when>
                        </choose>
                        AND		TMP.STORE_CD        =   AST.STORE_CD
                        AND 	TMP.PROD_CD 	    =   AST.PROD_CD
                        GROUP
                        BY 		AST.STORE_CD
                        ,		AST.PROD_CD
                    ) B
                ,   (
                        SELECT 	BST.STORE_CD
                        ,		BST.PROD_CD
                        <if test='unitFg == "1"'>
                            ,   SF_ZERO_TO_NULL(SUM(BST.DATE_QTY / TMP.PO_UNIT_QTY))             AS CLOSE_QTY /* 기초재고수량 */
                            ,   SF_ZERO_TO_NULL(SUM(BST.AVG_COST_UPRC))                          AS CLOSE_TOT /* 기초재고금액 */
                        </if>
                        <if test='unitFg == "0"'>
                            ,	SF_ZERO_TO_NULL(SUM(BST.DATE_QTY))                               AS CLOSE_QTY /* 기초재고수량 */
                            , 	SF_ZERO_TO_NULL(SUM(BST.AVG_COST_UPRC))                          AS CLOSE_TOT /* 기초재고금액 */
                        </if>
                        FROM 	TB_ST_STORE_STOCK_CUR_DATE_V01 BST
                        ,		TB_MS_PRODUCT TMP
                        WHERE	BST.THE_DATE 	(+) =   #{endDate}
                        <choose>
                            <when test='storeCdQuery != null and storeCdQuery != ""'>
                                AND BST.STORE_CD IN (${storeCdQuery})
                            </when>
                            <when test='storeCdQuery == null or storeCdQuery == ""'>
                                AND BST.STORE_CD IN (SELECT STORE_CD FROM TB_MS_STORE WHERE HQ_OFFICE_CD = #{hqOfficeCd})
                            </when>
                        </choose>
                        AND		TMP.STORE_CD        =   BST.STORE_CD
                        AND 	TMP.PROD_CD 	    =   BST.PROD_CD
                        GROUP
                        BY 		BST.STORE_CD
                        ,		BST.PROD_CD
                    ) C
                WHERE 	B.STORE_CD  (+) =   A.STORE_CD
                AND     B.PROD_CD   (+) =   A.PROD_CD
                AND     C.STORE_CD  (+) =   A.STORE_CD
                AND     C.PROD_CD   (+) =   A.PROD_CD
                ORDER
                BY      A.PROD_CD
                ,       A.STORE_CD
            ) A
        <include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <select id="storeDayExcelList" parameterType="mobileStoreDayVO" resultType="DefaultMap">
        /* MobileStoreDayMapper.storeDayExcelList */
        SELECT  A.*
        ,       (SELECT NMCODE_NM FROM TB_HQ_NMCODE WHERE NMCODE_GRP_CD = '093' AND HQ_OFFICE_CD = #{hqOfficeCd} AND NMCODE_CD = A.PO_UNIT_FG)  AS PO_UNIT_FG_NM      /* 본사 가상로그인시 */
        FROM
            (
                SELECT  A.*
                ,       B.BASE_QTY
                ,       B.BASE_TOT
                ,       C.CLOSE_QTY
                ,       C.CLOSE_TOT
                FROM
                    (
                        SELECT  FN_GET_PROD_CLASS_CD_NM_STR(TMP.STORE_CD, TMP.PROD_CLASS_CD, 'NM_STR') AS PROD_CLASS_NM
                        ,       TSSSD.PROD_CD
                        ,       TMP.PROD_NM
                        ,       TSSSD.STORE_CD
                        ,       (SELECT STORE_NM FROM TB_MS_STORE Z WHERE Z.STORE_CD = TSSSD.STORE_CD) AS STORE_NM
                        ,       TMP.PO_UNIT_QTY
                        ,       TMP.PO_UNIT_FG
                        ,       TMPB.BARCD_CD
                        <if test='unitFg == "1"'>
                            ,   SF_ZERO_TO_NULL(SUM(STORE_IN_QTY / TMP.PO_UNIT_QTY))    AS STORE_IN_QTY /* 매장입고 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(STORE_OUT_QTY / TMP.PO_UNIT_QTY))   AS STORE_OUT_QTY /* 매장반품 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(PURCHS_IN_QTY / TMP.PO_UNIT_QTY))   AS PURCHS_IN_QTY /* 사입입고 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(PURCHS_OUT_QTY / TMP.PO_UNIT_QTY))  AS PURCHS_OUT_QTY /* 사입반품 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(STORE_SALE_QTY / TMP.PO_UNIT_QTY))  AS STORE_SALE_QTY /* 매장판매 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(MOVE_IN_QTY / TMP.PO_UNIT_QTY))     AS MOVE_IN_QTY /* 매장이입 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(MOVE_OUT_QTY / TMP.PO_UNIT_QTY))    AS MOVE_OUT_QTY /* 매장이출 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(DISUSE_QTY / TMP.PO_UNIT_QTY))      AS DISUSE_QTY /* 재고폐기 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(ADJ_QTY / TMP.PO_UNIT_QTY))         AS ADJ_QTY /* 재고조정 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(SET_IN_QTY / TMP.PO_UNIT_QTY))      AS SET_IN_QTY /* 세트생성 수량*/
                        </if>
                        <if test='unitFg == "0"'>
                            ,   SF_ZERO_TO_NULL(SUM(STORE_IN_QTY))      AS STORE_IN_QTY /* 매장입고 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(STORE_OUT_QTY))     AS STORE_OUT_QTY /* 매장반품 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(PURCHS_IN_QTY))     AS PURCHS_IN_QTY /* 사입입고 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(PURCHS_OUT_QTY))    AS PURCHS_OUT_QTY /* 사입반품 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(STORE_SALE_QTY))    AS STORE_SALE_QTY /* 매장판매 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(MOVE_IN_QTY))       AS MOVE_IN_QTY /* 매장이입 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(MOVE_OUT_QTY))      AS MOVE_OUT_QTY /* 매장이출 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(DISUSE_QTY))        AS DISUSE_QTY /* 재고폐기 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(ADJ_QTY))           AS ADJ_QTY /* 재고조정 수량*/
                            ,   SF_ZERO_TO_NULL(SUM(SET_IN_QTY))        AS SET_IN_QTY /* 세트생성 수량*/
                        </if>
                        ,       SF_ZERO_TO_NULL(SUM(STORE_IN_TOT))      AS STORE_IN_TOT /* 매장입고 금액*/
                        ,       SF_ZERO_TO_NULL(SUM(STORE_OUT_TOT))     AS STORE_OUT_TOT /* 매장반품 금액*/
                        ,       SF_ZERO_TO_NULL(SUM(PURCHS_IN_TOT))     AS PURCHS_IN_TOT /* 사입입고 금액*/
                        ,       SF_ZERO_TO_NULL(SUM(PURCHS_OUT_TOT))    AS PURCHS_OUT_TOT /* 사입반품 금액*/
                        ,       SF_ZERO_TO_NULL(SUM(STORE_SALE_TOT))    AS STORE_SALE_TOT /* 매장판매 금액*/
                        ,       SF_ZERO_TO_NULL(SUM(MOVE_IN_TOT))       AS MOVE_IN_TOT /* 매장이입 금액*/
                        ,       SF_ZERO_TO_NULL(SUM(MOVE_OUT_TOT))      AS MOVE_OUT_TOT /* 매장이출 금액*/
                        ,       #{startDate} AS START_DATE
                        FROM    TB_ST_STORE_STOCK_DAILY TSSSD
                        ,       TB_MS_PRODUCT TMP
                        ,       TB_MS_PRODUCT_BARCD TMPB
                        WHERE   TSSSD.STORE_CD = TMP.STORE_CD
                        AND     TSSSD.PROD_CD = TMP.PROD_CD
                        AND     TSSSD.STORE_CD = TMPB.STORE_CD(+)
                        AND     TSSSD.PROD_CD = TMPB.PROD_CD(+)
                        AND     TMP.STOCK_PROD_YN = 'Y'
                        AND     TMP.USE_YN = 'Y'
                        <if test='startDate != null and startDate != ""'>
                            AND TSSSD.IOSTOCK_DATE = #{startDate}
                        </if>
                        <if test='prodCd != null and prodCd != ""'>
                            AND TMP.PROD_CD = #{prodCd}
                        </if>
                        <choose>
                            <when test='storeCdQuery != null and storeCdQuery != ""'>
                                AND TSSSD.STORE_CD IN (${storeCdQuery})
                            </when>
                            <when test='storeCdQuery == null or storeCdQuery == ""'>
                                AND TSSSD.STORE_CD IN (SELECT STORE_CD FROM TB_MS_STORE WHERE HQ_OFFICE_CD = #{hqOfficeCd})
                            </when>
                        </choose>
                        <if test='arrVendrCd != null and arrVendrCd != ""'>
                            AND TMP.PROD_CD IN (
                            SELECT  PROD_CD
                            FROM    TB_MS_VENDOR_PROD
                            WHERE   STORE_CD = TSSSD.STORE_CD
                            AND     VENDR_CD IN
                            <foreach collection="arrVendrCd" item="item" open="(" close=")" separator=",">
                                #{item}
                            </foreach>
                            )
                        </if>
                        <if test='prodClassCd != null and prodClassCd != ""'>
                            AND TMP.PROD_CLASS_CD IN    (
                            SELECT  PROD_CLASS_CD
                            FROM    TB_HQ_PRODUCT_CLASS
                            WHERE   HQ_OFFICE_CD = #{hqOfficeCd}
                            START
                            WITH    PROD_CLASS_CD = #{prodClassCd}
                            AND     HQ_OFFICE_CD = #{hqOfficeCd}
                            CONNECT BY
                            PRIOR   PROD_CLASS_CD = P_PROD_CLASS_CD
                            AND     HQ_OFFICE_CD = #{hqOfficeCd}
                            )
                        </if>
                        <if test='prodNm != null and prodNm != ""'>
                            AND TMP.PROD_NM LIKE '%'||#{prodNm}||'%'
                        </if>
                        <if test='barcdCd != null and barcdCd != ""'>
                            AND TMPB.BARCD_CD = #{barcdCd}
                        </if>
                        GROUP
                        BY      TMP.STORE_CD
                        ,       TMP.PROD_CLASS_CD
                        ,       TSSSD.PROD_CD
                        ,       TMP.PROD_NM
                        ,       TSSSD.STORE_CD
                        ,       TMP.PO_UNIT_QTY
                        ,       TMP.PO_UNIT_FG
                        ,       TMPB.BARCD_CD
                    ) A
                ,	(
                        SELECT 	AST.STORE_CD
                        ,		AST.PROD_CD
                        <if test='unitFg == "1"'>
                            ,   SF_ZERO_TO_NULL(SUM(AST.DATE_QTY / TMP.PO_UNIT_QTY))             AS BASE_QTY /* 기초재고수량 */
                            ,   SF_ZERO_TO_NULL(SUM(AST.AVG_COST_UPRC))                          AS BASE_TOT /* 기초재고금액 */
                        </if>
                        <if test='unitFg == "0"'>
                            ,	SF_ZERO_TO_NULL(SUM(AST.DATE_QTY))                               AS BASE_QTY /* 기초재고수량 */
                            , 	SF_ZERO_TO_NULL(SUM(AST.AVG_COST_UPRC))                          AS BASE_TOT /* 기초재고금액 */
                        </if>
                        FROM 	TB_ST_STORE_STOCK_CUR_DATE_V01 AST
                        ,		TB_MS_PRODUCT TMP
                        WHERE	AST.THE_DATE 	(+) =   TO_CHAR(TO_DATE(#{startDate}, 'YYYYMMDD')-1, 'YYYYMMDD')
                        <choose>
                            <when test='storeCdQuery != null and storeCdQuery != ""'>
                                AND AST.STORE_CD IN (${storeCdQuery})
                            </when>
                            <when test='storeCdQuery == null or storeCdQuery == ""'>
                                AND AST.STORE_CD IN (SELECT STORE_CD FROM TB_MS_STORE WHERE HQ_OFFICE_CD = #{hqOfficeCd})
                            </when>
                        </choose>
                        AND		TMP.STORE_CD        =   AST.STORE_CD
                        AND 	TMP.PROD_CD 	    =   AST.PROD_CD
                        GROUP
                        BY 		AST.STORE_CD
                        ,		AST.PROD_CD
                    ) B
                ,   (
                        SELECT 	BST.STORE_CD
                        ,		BST.PROD_CD
                        <if test='unitFg == "1"'>
                            ,   SF_ZERO_TO_NULL(SUM(BST.DATE_QTY / TMP.PO_UNIT_QTY))             AS CLOSE_QTY /* 기초재고수량 */
                            ,   SF_ZERO_TO_NULL(SUM(BST.AVG_COST_UPRC))                          AS CLOSE_TOT /* 기초재고금액 */
                        </if>
                        <if test='unitFg == "0"'>
                            ,	SF_ZERO_TO_NULL(SUM(BST.DATE_QTY))                               AS CLOSE_QTY /* 기초재고수량 */
                            , 	SF_ZERO_TO_NULL(SUM(BST.AVG_COST_UPRC))                          AS CLOSE_TOT /* 기초재고금액 */
                        </if>
                        FROM 	TB_ST_STORE_STOCK_CUR_DATE_V01 BST
                        ,		TB_MS_PRODUCT TMP
                        WHERE	BST.THE_DATE 	(+) =   #{endDate}
                        <choose>
                            <when test='storeCdQuery != null and storeCdQuery != ""'>
                                AND BST.STORE_CD IN (${storeCdQuery})
                            </when>
                            <when test='storeCdQuery == null or storeCdQuery == ""'>
                                AND BST.STORE_CD IN (SELECT STORE_CD FROM TB_MS_STORE WHERE HQ_OFFICE_CD = #{hqOfficeCd})
                            </when>
                        </choose>
                        AND		TMP.STORE_CD        =   BST.STORE_CD
                        AND 	TMP.PROD_CD 	    =   BST.PROD_CD
                        GROUP
                        BY 		BST.STORE_CD
                        ,		BST.PROD_CD
                    ) C
                WHERE 	B.STORE_CD  (+) =   A.STORE_CD
                AND     B.PROD_CD   (+) =   A.PROD_CD
                AND     C.STORE_CD  (+) =   A.STORE_CD
                AND     C.PROD_CD   (+) =   A.PROD_CD
                ORDER
                BY      A.PROD_CD
                ,       A.STORE_CD
            ) A
    </select>

</mapper>