<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    PosFunc.xml
    포스기능정의 sql
    ======================================================
    No  ||  수정자 ||  수정일자    ||  수정내역
    ======================================================
    1       김지은     2018.07.26     최초작성
    2       노현수     2018.10.01     기능키관련 수정 외
-->
<mapper namespace="kr.co.solbipos.base.store.posfunc.service.impl.PosFuncMapper">

    <resultMap id="posFuncMap" type="DefaultMap">
        <result column="POSI_ADJ_YN" property="posiAdjYn" typeHandler="CustomBooleanTypeHandler"/>
        <result column="USE_YN" property="useYn" typeHandler="CustomBooleanTypeHandler"/>
        <result column="AUTH_YN" property="authYn" typeHandler="CustomBooleanTypeHandler"/>
    </resultMap>

    <resultMap id="posFuncKeyMap" type="DefaultMap">
        <result column="FNKEY_USED" property="fnkeyUsed" typeHandler="CustomBooleanTypeHandler"/>
    </resultMap>

    <!-- 포스목록 조회 -->
    <!--
        TABLE    : TB_MS_POS
        PARAM    : posFuncVO
        COMMENTS : 포스기능을 복사할 포스목록을 조회한다
    -->
    <select id="getPosList" parameterType="posFuncVO" resultType="DefaultMap">
        /* USE : PosFuncMapper.getPosList */
        SELECT
            tmp.POS_NO AS value,
            '['|| tmp.POS_NO || '] ' || tmp.POS_NM AS name
        FROM
            TB_MS_POS tmp
        WHERE
            tmp.STORE_CD = #{storeCd}
            AND tmp.USE_YN = 'Y'
        ORDER BY tmp.POS_NO ASC
    </select>

    <!-- 포스기능목록 조회 -->
    <!--
        TABLE    : TB_MS_POS, TB_MS_STORE_FNKEY, TB_MS_POS_ENVST, TB_MS_POS_FNKEY
        PARAM    : posFuncVO
        COMMENTS : 포스기능목록을 조회한다.
    -->
    <select id="getPosFuncList" parameterType="posFuncVO" resultType="DefaultMap">
        /* USE : PosFuncMapper.getPosFuncList */
        SELECT
            tmp.STORE_CD,
            tmpe1.POS_NO,
            tmpe1.ENVST_VAL AS ENV202,
            tmpe2.ENVST_VAL AS ENV204,
            tmp.FNKEY_FG,
            tcn.NMCODE_NM AS FNKEY_NM,
            COUNT(*) AS TOT_CNT,
            SUM(DECODE(tmpf.USE_YN, 'N', 0, 1)) AS REG_CNT
        FROM
            (
            SELECT
                tmp.STORE_CD,
                tmp.POS_NO,
                tmsf.POS_FG,
                tmsf.FNKEY_FG,
                tmsf.FNKEY_NO
            FROM
                TB_MS_POS tmp,
                TB_MS_STORE_FNKEY tmsf
            WHERE
                tmsf.STORE_CD = tmp.STORE_CD
            GROUP BY
                tmp.STORE_CD,
                tmp.POS_NO,
                tmsf.POS_FG,
                tmsf.FNKEY_FG,
                tmsf.FNKEY_NO ) tmp
        INNER JOIN TB_MS_POS_ENVST tmpe1 ON
            tmp.STORE_CD = tmpe1.STORE_CD
            AND tmp.POS_NO = tmpe1.POS_NO
            AND tmpe1.ENVST_CD = '4019'
        INNER JOIN TB_MS_POS_ENVST tmpe2 ON
            tmp.STORE_CD = tmpe2.STORE_CD
            AND tmp.POS_NO = tmpe2.POS_NO
            AND tmpe2.ENVST_CD = '4020'
        LEFT OUTER JOIN TB_MS_POS_FNKEY tmpf ON
            tmp.STORE_CD = tmpf.STORE_CD
            AND tmp.POS_NO = tmpf.POS_NO
            AND tmp.FNKEY_NO = tmpf.FNKEY_NO
        INNER JOIN TB_CM_NMCODE tcn ON
            tmp.FNKEY_FG = tcn.NMCODE_CD
            AND tcn.NMCODE_GRP_CD = '026'
        WHERE
            tmp.STORE_CD = #{storeCd}
            AND tmp.POS_NO = #{posNo}
        GROUP BY
            tmp.STORE_CD,
            tmpe1.POS_NO,
            tmpe1.ENVST_VAL,
            tmpe2.ENVST_VAL,
            tmp.FNKEY_FG,
            tcn.NMCODE_NM
        ORDER BY
            tmp.STORE_CD,
            tmpe1.POS_NO,
            tmp.FNKEY_FG

    </select>


    <!-- 포스기능상세 조회 -->
    <!--
        TABLE    : TB_MS_POS, TB_MS_STORE_FNKEY, TB_MS_POS_ENVST, TB_MS_POS_FNKEY
        PARAM    : posFuncVO
        COMMENTS : 포스기능 상세 목록을 조회한다.
    -->
    <select id="getPosConfDetail" parameterType="posFuncVO" resultMap="posFuncMap">
        /* USE : PosFuncMapper.getPosConfDetail */
        SELECT
            tms.FNKEY_FG,
            tms.FNKEY_NO,
            tms.FNKEY_NM,
            DECODE(tmp.DISP_SEQ, NULL, '0', '1') AS EXIST_FG_BEFORE,
            DECODE(tmp.DISP_SEQ, NULL, '0', '1') AS EXIST_FG,
            tms.POSI_ADJ_YN,
            tmp.DISP_SEQ,
            tmp.X,
            tmp.Y,
            tmp.WIDTH,
            tmp.HEIGHT,
            tmp.USE_YN
        FROM
            (
            SELECT
                tms.STORE_CD,
                tmp.POS_NO,
                tms.DISP_SEQ,
                tms.POSI_ADJ_YN,
                tms.FNKEY_FG,
                tms.FNKEY_NO,
                tms.FNKEY_NM,
                tms.USE_YN
            FROM
                TB_MS_POS_ENVST tmp
            LEFT OUTER JOIN TB_MS_STORE_FNKEY tms ON
                tmp.STORE_CD = tms.STORE_CD
            WHERE
                tmp.ENVST_CD = '4019' ) tms
        LEFT OUTER JOIN TB_MS_POS_FNKEY tmp ON
            tms.STORE_CD = tmp.STORE_CD
            AND tms.POS_NO = tmp.POS_NO
            AND tms.FNKEY_NO = tmp.FNKEY_NO
            AND tms.FNKEY_FG = tmp.FNKEY_FG
        WHERE
            tms.STORE_CD = #{storeCd}
            AND tms.POS_NO = #{posNo}
            AND tms.FNKEY_FG = #{fnkeyFg}
        ORDER BY
            tmp.DISP_SEQ,
            tms.USE_YN DESC
    </select>

    <!-- 포스기능상세 저장 -->
    <!--
      TABLE    : TB_MS_POS_FNKEY
      PARAM    : posFuncVO
      COMMENTS : 포스기능 상세 목록을 저장한다.
    -->
    <update id="savePosConf" parameterType="posFuncVO">
        /* USE : PosFuncMapper.savePosConf */
        UPDATE TB_MS_POS_FNKEY
           SET DISP_SEQ = #{dispSeq},
               USE_YN = #{useYn},
               MOD_DT = #{modDt},
               MOD_ID = #{modId}
        WHERE STORE_CD = #{storeCd}
          AND POS_NO = #{posNo}
          AND FNKEY_NO = #{fnkeyNo}
    </update>

    <!-- 포스기능 삭제 -->
    <!--
      TABLE    : TB_MS_POS_FNKEY
      PARAM    : posFuncVO
      COMMENTS : 포스기능을 삭제한다.
    -->
    <update id="deletePosFunc" parameterType="posFuncVO">
        /* USE : PosFuncMapper.deletePosFunc */
        DELETE TB_MS_POS_FNKEY
         WHERE STORE_CD = #{storeCd}
           AND POS_NO = #{targetPos}
    </update>

    <!-- 포스기능 복사 -->
    <!--
      TABLE    : TB_MS_POS_FNKEY
      PARAM    : posFuncVO
      COMMENTS : 포스기능을 복사한다.
    -->
    <update id="copyPosFunc" parameterType="posFuncVO">
        /* USE : PosFuncMapper.copyPosFunc */
        INSERT INTO TB_MS_POS_FNKEY
        ( STORE_CD,
          POS_NO,
          FNKEY_NO,
          FNKEY_FG,
          DISP_SEQ,
          X,
          Y,
          WIDTH,
          HEIGHT,
          USE_YN,
          REG_DT,
          REG_ID,
          MOD_DT,
          MOD_ID
        )
        SELECT #{storeCd},
               #{targetPos},
               FNKEY_NO,
               FNKEY_FG,
               DISP_SEQ,
               X,
               Y,
               WIDTH,
               HEIGHT,
               USE_YN,
               #{regDt},
               #{regId},
               #{modDt},
               #{modId}
          FROM TB_MS_POS_FNKEY
         WHERE STORE_CD = #{storeCd}
           AND POS_NO = #{copyPos}
    </update>

    <!-- 포스기능키 목록 조회 -->
    <!--
        TABLE    : TB_MS_STORE_FNKEY
        PARAM    : posFuncVO
        COMMENTS : 포스기능키 목록을 조회한다.
    -->
    <select id="getPosFuncKeyList" parameterType="posFuncVO" resultMap="posFuncKeyMap">
        /* USE : PosFuncMapper.getPosFuncKeyList */
        SELECT
            'N' AS FNKEY_USED,
            tmsf.FNKEY_NO,
            CASE WHEN #{hqOfficeCd} = 'A0001' AND tmsf.FNKEY_NO = '0083' THEN
                CASE WHEN tmse.ENVST_VAL1 = '1' THEN ENVST_VAL2
                ELSE tmsf.FNKEY_NM END
            ELSE
                tmsf.FNKEY_NM
            END FNKEY_NM,
            tmsf.DISP_SEQ,
            tmsf.IMG_FILE_NM
        FROM
            TB_MS_STORE_FNKEY tmsf
        LEFT OUTER JOIN
            (
                SELECT
                    STORE_CD,
                    MAX(CASE ENVST_CD WHEN '1045' THEN ENVST_VAL ELSE '' END) AS ENVST_VAL1,
                    MAX(CASE ENVST_CD WHEN '1048' THEN ENVST_VAL ELSE '' END) AS ENVST_VAL2
                FROM
                    TB_MS_STORE_ENVST
                WHERE
                    ENVST_CD IN ( '1045', '1048' )
                    AND STORE_CD = #{storeCd}
                GROUP BY
                    STORE_CD
            ) tmse ON
            tmsf.STORE_CD = tmse.STORE_CD
        WHERE
            tmsf.STORE_CD = #{storeCd}
            AND tmsf.FNKEY_FG = #{fnkeyFg}
            AND tmsf.USE_YN = 'Y'
        ORDER BY tmsf.DISP_SEQ
    </select>

    <!-- 포스기능키 XML 조회 -->
    <!--
        TABLE    : TB_WB_POS_CONFG_XML
        PARAM    : DefaultMap
        COMMENTS : 포스기능키 구성 XML 정보를 조회한다.
    -->
    <select id="getFuncKeyXml" parameterType="DefaultMap" resultType="java.lang.String">
        /* USE : PosFuncMapper.getFuncKeyXml */
        SELECT
            XML
        FROM
            TB_WB_POS_CONFG_XML twpcx
        WHERE
            twpcx.STORE_CD = #{storeCd}
            AND twpcx.POS_NO = #{posNo}
            AND twpcx.CONFG_FG = #{confgFg}
            AND twpcx.USE_YN = 'Y'
    </select>

    <!-- 포스기능키 XML 생성 -->
    <!--
        TABLE    : TB_WB_POS_CONFG_XML
        PARAM    : DefaultMap
        COMMENTS : 포스기능키키 구성 XML 정보를 생성한다.
    -->
    <insert id="insertFuncKeyConfgXml" parameterType="DefaultMap">
        /* USE : PosFuncMapper.insertFuncKeyConfgXml */
        MERGE INTO TB_WB_POS_CONFG_XML twpcx
        USING (SELECT #{storeCd} AS STORE_CD,
                      #{posNo} AS POS_NO,
                      #{confgFg} AS CONFG_FG
                 FROM DUAL
              ) tmp
           ON ( twpcx.STORE_CD = tmp.STORE_CD
                AND twpcx.POS_NO = tmp.POS_NO
                AND twpcx.CONFG_FG = tmp.CONFG_FG
              )
         WHEN MATCHED THEN
              UPDATE
                 SET twpcx.XML = #{xml:CLOB},
                     twpcx.USE_YN = #{useYn},
                     twpcx.MOD_DT = #{modDt},
                     twpcx.MOD_ID = #{modId}
         WHEN NOT MATCHED THEN
              INSERT
              (
                  twpcx.STORE_CD,
                  twpcx.POS_NO,
                  twpcx.CONFG_FG,
                  twpcx.XML,
                  twpcx.USE_YN,
                  twpcx.REG_DT,
                  twpcx.REG_ID
              ) VALUES (
                  #{storeCd},
                  #{posNo},
                  #{confgFg},
                  #{xml:CLOB},
                  #{useYn},
                  #{regDt},
                  #{regId}
              )
    </insert>

    <!-- 포스기능키 XML 수정 -->
    <!--
        TABLE    : TB_WB_POS_CONFG_XML
        PARAM    : DefaultMap
        COMMENTS : 포스기능키 구성 XML 정보를 수정한다.
    -->
    <update id="updateFuncKeyConfgXml" parameterType="DefaultMap">
        /* USE : PosFuncMapper.updateFuncKeyConfgXml */
        UPDATE
            TB_WB_POS_CONFG_XML twpcx
        SET
            twpcx.XML = #{xml:CLOB},
            twpcx.USE_YN = #{useYn},
            twpcx.MOD_DT = #{regDt},
            twpcx.MOD_ID = #{regId}
        WHERE
            twpcx.STORE_CD = #{storeCd}
            AND twpcx.POS_NO = #{posNo}
            AND twpcx.CONFG_FG = #{confgFg}
    </update>

    <!-- 포스기능키 생성 -->
    <!--
        TABLE    : TB_MS_POS_FNKEY
        PARAM    : posFuncVO
        COMMENTS : 포스기능키 정보를 생성한다.
    -->
    <insert id="insertPosFuncKey" parameterType="posFuncVO">
        /* USE : PosFuncMapper.insertPosFuncKey */
        INSERT INTO TB_MS_POS_FNKEY (
            STORE_CD,
            POS_NO,
            FNKEY_NO,
            FNKEY_FG,
            DISP_SEQ,
            X,
            Y,
            WIDTH,
            HEIGHT,
            STYLE_CD,
            IMG_NM,
            USE_YN,
            REG_DT,
            REG_ID,
            MOD_DT,
            MOD_ID
        ) VALUES(
            #{storeCd},
            #{posNo},
            #{fnkeyNo},
            #{fnkeyFg},
            #{dispSeq},
            #{x},
            #{y},
            #{width},
            #{height},
            '01',
            #{imgNm, jdbcType=VARCHAR},
            'Y',
            #{regDt},
            #{regId},
            #{modDt},
            #{modId}
        )
    </insert>

    <!-- 포스기능키 삭제 -->
    <!--
        TABLE    : TB_MS_POS_FNKEY
        PARAM    : posFuncVO
        COMMENTS : 포스기능키 정보를 삭제한다.
    -->
    <delete id="deletePosFuncKey" parameterType="posFuncVO">
        /* USE : PosFuncMapper.deletePosFuncKey */
        DELETE
        FROM
            TB_MS_POS_FNKEY
        WHERE
            STORE_CD = #{storeCd}
            AND POS_NO = #{posNo}
            AND FNKEY_FG = #{fnkeyFg}
    </delete>

    <!-- 포스기능 인증목록 조회 -->
    <!--
        TABLE    : TB_MS_STORE_FNKEY
        PARAM    : posFuncVO
        COMMENTS : 포스기능 인증목록을 조회한다.
    -->
    <select id="getPosConfAuthDetail" parameterType="posFuncVO" resultMap="posFuncMap">
        /* USE : PosFuncMapper.getPosConfAuthDetail */
        SELECT STORE_CD,
               FNKEY_FG,
               FNKEY_NO,
               FNKEY_NM,
               AUTH_YN,
               USE_YN
          FROM TB_MS_STORE_FNKEY
         WHERE STORE_CD = #{storeCd}
           AND FNKEY_FG = #{fnkeyFg}
    </select>

    <!-- 포스기능 인증허용대상 조회 -->
    <!--
        TABLE    : TB_MS_EMPLOYEE, TB_MS_EMPLOYEE_FNKEY
        PARAM    : posFuncVO
        COMMENTS : 포스기능 인증허용대상을 조회한다.
    -->
    <select id="getAuthEmpList" parameterType="posFuncVO" resultType="DefaultMap">
        /* USE : PosFuncMapper.getAuthEmpList */
        SELECT
            tme.STORE_CD,
            tme.EMP_NO,
            tme.EMP_NM,
            tmf.EMP_NO,
            (CASE WHEN tmf.USE_YN = 'Y' THEN 1 ELSE 0 END) AS USE_YN
 --           DECODE(tmf.EMP_NO, NULL, 0, 1) AS USE_YN
        FROM
            TB_MS_EMPLOYEE tme
        LEFT OUTER JOIN TB_MS_EMPLOYEE_FNKEY tmf ON
                tme.STORE_CD = tmf.STORE_CD
            AND tme.EMP_NO = tmf.EMP_NO
            AND tmf.FNKEY_NO = #{fnkeyNo}
        WHERE
            tme.STORE_CD = #{storeCd}
    </select>

    <!-- 포스기능 인증관리 인증여부 저장 -->
    <!--
        TABLE    : TB_MS_STORE_FNKEY
        PARAM    : DefaultMap
        COMMENTS : 포스기능 인증관리 인증여부 저장.
    -->
    <update id="savePosAuthConf" parameterType="posFuncVO">
        /* USE : PosFuncMapper.savePosAuthConf */
        UPDATE
            TB_MS_STORE_FNKEY tmsf
        SET
            tmsf.AUTH_YN = #{authYn},
            tmsf.MOD_DT = #{modDt},
            tmsf.MOD_ID = #{modId}
        WHERE
            tmsf.STORE_CD = #{storeCd}
          AND
            tmsf.FNKEY_NO = #{fnkeyNo}
    </update>


    <!-- 포스기능 인증허용대상 저장 -->
    <!--
      TABLE    : TB_MS_POS_FNKEY
      PARAM    : posFuncVO
      COMMENTS : 포스기능 상세 목록을 저장한다.
    -->
    <update id="saveAuthEmp" parameterType="posFuncVO">
        /* USE : PosFuncMapper.saveAuthEmp */
        MERGE INTO TB_MS_EMPLOYEE_FNKEY tmf
        USING (SELECT #{storeCd} AS STORE_CD,
                      #{empNo} AS EMP_NO,
                      #{fnkeyNo} AS FNKEY_NO
                 FROM DUAL
              ) tmp
           ON (tmf.STORE_CD = tmp.STORE_CD AND tmf.EMP_NO = tmp.EMP_NO AND tmf.FNKEY_NO = tmp.FNKEY_NO)
         WHEN MATCHED THEN
         UPDATE
            SET tmf.USE_YN = #{useYn},
                tmf.MOD_DT = #{modDt},
                tmf.MOD_ID = #{modId}
         WHEN NOT MATCHED THEN
         INSERT (
                tmf.STORE_CD,
                tmf.EMP_NO,
                tmf.FNKEY_NO,
                tmf.USE_YN,
                tmf.REG_DT,
                tmf.REG_ID,
                tmf.MOD_DT,
                tmf.MOD_ID
         )
         VALUES(
                #{storeCd},
                #{empNo},
                #{fnkeyNo},
                #{useYn},
                #{regDt},
                #{regId},
                #{modDt},
                #{modId}
         )
    </update>




</mapper>
