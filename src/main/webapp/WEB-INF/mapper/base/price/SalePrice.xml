<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    SalePrice.xml
    판매가 관리
    ======================================================
    No  ||  수정자 ||  수정일자    ||  수정내역
    ======================================================
    1       김지은     2018.12.24     최초작성
-->
<mapper namespace="kr.co.solbipos.base.price.salePrice.service.impl.SalePriceMapper">

   <!-- 매장 판매가관리 > 상품의 본사 가격정보 조회 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_HQ_PRODUCT_SALE_PRICE
        COMMENTS : 판매가 관리 대상의 본사 가격정보를 조회한다.
    -->
    <select id="getProdInfo"  parameterType="salePriceVO" resultType="DefaultMap">
        /* SalePriceMapper.getProdInfo */
      <![CDATA[
        SELECT thp.HQ_OFFICE_CD,
               thp.PROD_CD,
               thp.PROD_NM,
               thpsp.SALE_UPRC,     -- 본사 판매가
               thpsp.STIN_SALE_UPRC,     -- 본사내점-판매가
               thpsp.DLVR_SALE_UPRC,     -- 본사배달-판매가
               thpsp.PACK_SALE_UPRC,     -- 본사포장-판매가
               thp.PO_UNIT_QTY,		-- 입수
               thp.COST_UPRC, 		-- 본사 원가
               thp.SPLY_UPRC   		-- 본사 공급가
          FROM TB_HQ_PRODUCT thp,
               TB_HQ_PRODUCT_SALE_PRICE_V01 thpsp
         WHERE thp.HQ_OFFICE_CD = #{hqOfficeCd}
           AND thp.PROD_CD = #{prodCd}
           AND thpsp.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
           AND thpsp.PROD_CD = thp.PROD_CD
           AND thpsp.SALE_DATE = TO_CHAR(SYSDATE, 'yyyyMMdd')
        ]]>
    </select>

    <!-- 매장 판매가관리 > 상품 기준 판매가 관리 대상 조회 -->
    <!--
        TABLE    : TB_MS_PRODUCT, TB_MS_STORE, TB_MS_PRODUCT_SALE_PRICE
        COMMENTS : 판매가 관리 대상 목록을 조회한다.
    -->
    <select id="getProdSalePriceList"  parameterType="salePriceVO" resultType="DefaultMap">
        /* SalePriceMapper.getProdSalePriceList */
        <include refid="CmmSQL.PagingTemplateHeader"/>
        SELECT
        tms.STORE_CD,
        tms.STORE_NM,
        tmp.PROD_CD,
        tmp.PROD_NM,
        tmp.COST_UPRC,                     -- 원가단가
        tmp.LAST_COST_UPRC,                -- 최종원가단가
        tmp.SPLY_UPRC,                     -- 공급가
        tmp.SPLY_UPRC AS STORE_SPLY_UPRC,  -- 매장공급가
        tmpsp.SALE_UPRC AS SALE_UPRC_P,    -- 변경전 판매금액
        tmpsp.SALE_UPRC,                   -- 판매금액(변경가능)
        tmpsp.STIN_SALE_UPRC AS STIN_SALE_UPRC_P,    -- 변경전 내점판매금액
        tmpsp.STIN_SALE_UPRC,                        -- 내점판매금액(변경가능)
        tmpsp.DLVR_SALE_UPRC AS DLVR_SALE_UPRC_P,    -- 변경전 배달판매금액
        tmpsp.DLVR_SALE_UPRC,                        -- 배달판매금액(변경가능)
        tmpsp.PACK_SALE_UPRC AS PACK_SALE_UPRC_P,    -- 변경전 포장판매금액
        tmpsp.PACK_SALE_UPRC,                        -- 포장판매금액(변경가능)
        tmp.PO_UNIT_QTY,                   -- 주문(발주)단위수량
        tmp.PRC_CTRL_FG,
        thpsp.SALE_UPRC AS HQ_SALE_UPRC,   -- 본사판매가
        thpsp.STIN_SALE_UPRC AS HQ_STIN_SALE_UPRC,   -- 본사내점-판매가
        thpsp.DLVR_SALE_UPRC AS HQ_DLVR_SALE_UPRC,   -- 본사배달-판매가
        thpsp.PACK_SALE_UPRC AS HQ_PACK_SALE_UPRC    -- 본사포장-판매가
        <include refid="CmmSQL.PagingTemplateCount"/>
        FROM TB_MS_PRODUCT tmp,
        TB_MS_STORE tms,
        TB_MS_STORE_INFO tmsi,
        (
            SELECT STORE_CD, PROD_CD,
                    MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC,
                    MIN(STIN_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS STIN_SALE_UPRC,
                    MIN(DLVR_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS DLVR_SALE_UPRC,
                    MIN(PACK_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS PACK_SALE_UPRC
            FROM TB_MS_PRODUCT_SALE_PRICE
            WHERE 1 = 1
            <![CDATA[
                AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
            ]]>
            AND SALE_PRC_FG = '1'
            GROUP BY STORE_CD, PROD_CD
        ) tmpsp,
        TB_HQ_PRODUCT thp,
        (
            SELECT HQ_OFFICE_CD, PROD_CD,
                    MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC,
                    MIN(STIN_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS STIN_SALE_UPRC,
                    MIN(DLVR_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS DLVR_SALE_UPRC,
                    MIN(PACK_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS PACK_SALE_UPRC
            FROM TB_HQ_PRODUCT_SALE_PRICE
            WHERE 1 = 1
            <![CDATA[
                AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
            ]]>
            AND SALE_PRC_FG = '1'
            GROUP BY HQ_OFFICE_CD, PROD_CD
        ) thpsp
        WHERE tmp.PROD_CD = #{prodCd}
        AND tmp.SALE_PROD_YN = 'Y'             -- 판매상품 여부
        AND tms.HQ_OFFICE_CD = #{hqOfficeCd}
        AND tms.STORE_CD = tmp.STORE_CD
        AND tms.STORE_CD = tmsi.STORE_CD(+)
        AND tmpsp.STORE_CD (+)= tmp.STORE_CD
        AND tmpsp.PROD_CD (+)= tmp.PROD_CD
        AND thp.HQ_OFFICE_CD = #{hqOfficeCd}
        AND thp.PROD_CD = tmp.PROD_CD
        AND thpsp.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
        AND thpsp.PROD_CD = thp.PROD_CD
        <if test='arrStoreCd != null and arrStoreCd != ""'>
            AND tms.STORE_CD IN
            <foreach collection="arrStoreCd" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        <if test='storeHqBrandCd != null and storeHqBrandCd != ""'>
            AND tms.HQ_BRAND_CD = #{storeHqBrandCd} -- 선택한 매장브랜드가 있을 때
        </if>
        <if test='storeHqBrandCd == null or storeHqBrandCd == ""'>
            <if test='userBrands != null and userBrands != ""'>
                -- 선택한 매장브랜드가 없을 때('전체' 일때), 사용자 관리브랜드에 속한 정보만 조회
                AND tms.HQ_BRAND_CD IN
                <foreach collection="userBrandList" item="item" open=" (" separator="," close=")" >
                    #{item}
                </foreach>
            </if>
        </if>
        <if test='momsTeam != null and momsTeam != ""'>
            AND tmsi.MOMS_TEAM = #{momsTeam}
        </if>
        <if test='momsAcShop != null and momsAcShop != ""'>
            AND tmsi.MOMS_AC_SHOP = #{momsAcShop}
        </if>
        <if test='momsAreaFg != null and momsAreaFg != ""'>
            AND tmsi.MOMS_AREA_FG = #{momsAreaFg}
        </if>
        <if test='momsCommercial != null and momsCommercial != ""'>
            AND tmsi.MOMS_COMMERCIAL = #{momsCommercial}
        </if>
        <if test='momsShopType != null and momsShopType != ""'>
            AND tmsi.MOMS_SHOP_TYPE = #{momsShopType}
        </if>
        <if test='momsStoreManageType != null and momsStoreManageType != ""'>
            AND tmsi.MOMS_STORE_MANAGE_TYPE = #{momsStoreManageType}
        </if>
        <if test='branchCd != null and branchCd != ""'>
            AND tms.BRANCH_CD = #{branchCd}
        </if>
        ORDER BY tms.STORE_CD, tmp.PROD_CD
        <include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <!-- 매장 판매가관리 > 판매가 히스토리 등록을 위한 COUNT 조회 -->
    <!--
        TABLE    : TB_MS_PRODUCT_SALE_PRICE
        COMMENTS : 판매가 히스토리 등록을 위한 COUNT 조회한다.
    -->
    <select id="getRegistProdCount" parameterType="salePriceVO" resultType="Integer">
        /* USE : SalePriceMapper.getRegistProdCount */
        SELECT COUNT(SALE_UPRC) AS CNT
          FROM TB_MS_PRODUCT_SALE_PRICE
         WHERE STORE_CD = #{storeCd}
           AND PROD_CD = #{prodCd}
           AND SALE_PRC_FG = '1'
           AND START_DATE = #{startDate}
    </select>

    <!-- 매장 판매가관리 > 판매가 변경 히스토리 등록 -->
    <!--
        TABLE    : TB_MS_PRODUCT_SALE_PRICE_HISTORY
        COMMENTS : 판매가 변경 히스토리를 등록한다.
    -->
    <insert id="updateStoreProdSalePriceHistory"  parameterType="salePriceVO" >
        /* USE : SalePriceMapper.updateStoreProdSalePriceHistory */
        <![CDATA[
        INSERT INTO TB_MS_PRODUCT_SALE_PRICE_HISTORY
        SELECT SQ_MS_PRODUCT_SALE_PRICE_HISTORY.NEXTVAL,
               STORE_CD,
               PROD_CD,
               SALE_PRC_FG,
               START_DATE,
               END_DATE,
               SALE_UPRC,
               #{regDt},
               #{regId},
               NVL(STIN_SALE_UPRC, SALE_UPRC),
               NVL(DLVR_SALE_UPRC, SALE_UPRC),
               NVL(PACK_SALE_UPRC, SALE_UPRC)
          FROM TB_MS_PRODUCT_SALE_PRICE
         WHERE STORE_CD = #{storeCd}
           AND PROD_CD = #{prodCd}
           AND SALE_PRC_FG = '1'
           AND START_DATE = #{startDate}
          ]]>
  </insert>

    <!-- 매장 판매가관리 > 판매가 변경 히스토리 등록 -->
    <!--
        TABLE    : TB_MS_PRODUCT_SALE_PRICE_HISTORY
        COMMENTS : 판매가 변경 히스토리를 등록한다.
    -->
    <!--<insert id="insertStoreProdSalePriceHistory"  parameterType="salePriceVO" >-->
        <!--/* USE : SalePriceMapper.insertStoreProdSalePriceHistory */-->
        <!--INSERT INTO TB_MS_PRODUCT_SALE_PRICE_HISTORY-->
        <!--(-->
            <!--HIS_SEQ,-->
            <!--STORE_CD,-->
            <!--PROD_CD,-->
            <!--SALE_PRC_FG,-->
            <!--START_DATE,-->
            <!--END_DATE,-->
            <!--SALE_UPRC,-->
            <!--REG_DT,-->
            <!--REG_ID-->
        <!--)-->
        <!--VALUES-->
        <!--(-->
            <!--SQ_MS_PRODUCT_SALE_PRICE_HISTORY.NEXTVAL,-->
            <!--#{storeCd},-->
            <!--#{prodCd},-->
            <!--#{prcCtrlFg},-->
            <!--#{startDate},-->
            <!--#{endDate},-->
            <!--#{saleUprc},-->
            <!--#{regDt},-->
            <!--#{regId}-->
        <!--)-->
    <!--</insert>-->

    <!-- 매장 판매가관리 > 상품기준 매장 판매가 변경 -->
    <!--
        TABLE    : TB_MS_PRODUCT_SALE_PRICE
        COMMENTS : 매장 판매가를 일괄 변경한다.
    -->
    <insert id="modifyStoreProdSalePrice"  parameterType="salePriceVO" >
        /* USE : SalePriceMapper.modifyStoreProdSalePrice */
        MERGE INTO TB_MS_PRODUCT_SALE_PRICE tmpsp
        USING DUAL
        ON (
            tmpsp.STORE_CD = #{storeCd}
            AND tmpsp.PROD_CD = #{prodCd}
            AND tmpsp.SALE_PRC_FG = '1'
            AND tmpsp.START_DATE = #{startDate}
        )
        WHEN MATCHED THEN
        UPDATE
        SET
            tmpsp.SALE_UPRC = #{saleUprc}, -- 판매가
            tmpsp.STIN_SALE_UPRC = NVL(#{stinSaleUprc}, #{saleUprc}), -- 내점가
            tmpsp.DLVR_SALE_UPRC = NVL(#{dlvrSaleUprc}, #{saleUprc}), -- 배달가
            tmpsp.PACK_SALE_UPRC = NVL(#{packSaleUprc}, #{saleUprc}), -- 포장가
            tmpsp.MOD_DT = #{modDt},
            tmpsp.MOD_ID = #{modId}
        WHEN NOT MATCHED THEN
        INSERT
        (
            STORE_CD,
            PROD_CD,
            SALE_PRC_FG,
            START_DATE,
            END_DATE,
            SALE_UPRC,
            STIN_SALE_UPRC,
            DLVR_SALE_UPRC,
            PACK_SALE_UPRC,
            REG_DT,
            REG_ID,
            MOD_DT,
            MOD_ID
        ) VALUES (
            #{storeCd},
            #{prodCd},
            '1',
            #{startDate},
            #{endDate},
            #{saleUprc},
            NVL(#{stinSaleUprc}, #{saleUprc}),
            NVL(#{dlvrSaleUprc}, #{saleUprc}),
            NVL(#{packSaleUprc}, #{saleUprc}),
            #{regDt},
            #{regId},
            #{modDt},
            #{modId}
        )
    </insert>



    <!-- 매장 판매가관리 > 매장 기준 판매가 관리 대상 조회 -->
    <!--
        TABLE    : TB_MS_PRODUCT, TB_MS_STORE, TB_MS_PRODUCT_SALE_PRICE
        COMMENTS : 판매가 관리 대상 목록을 조회한다.
    -->
    <select id="getStoreSalePriceList"  parameterType="salePriceVO" resultType="DefaultMap">
        /* SalePriceMapper.getStoreSalePriceList */
        <include refid="CmmSQL.PagingTemplateHeader"/>
        SELECT
        tmp.PROD_CD,
        tmp.PROD_NM,
        thp.PROD_CLASS_CD,  -- 상품분류코드
        tmp.PO_UNIT_QTY, -- 입수
        thp.COST_UPRC AS HQ_COST_UPRC,   -- 본사원가
        thp.SPLY_UPRC AS HQ_SPLY_UPRC,   -- 대표공급가
        tmp.SPLY_UPRC AS STORE_SPLY_UPRC,   -- 매장공급가
        thpsp.SALE_UPRC AS HQ_SALE_UPRC, -- 본사판매가
        tmpsp.SALE_UPRC AS STORE_SALE_UPRC, -- 매장판매가
        tmpsp.SALE_UPRC AS SALE_UPRC, -- 매장변경판매가
        thpsp.STIN_SALE_UPRC AS HQ_STIN_SALE_UPRC,    -- 본사내점-판매가
        tmpsp.STIN_SALE_UPRC AS STORE_STIN_SALE_UPRC, -- 매장내점-판매가
        tmpsp.STIN_SALE_UPRC AS STIN_SALE_UPRC,       -- 변경내점-판매가
        thpsp.DLVR_SALE_UPRC AS HQ_DLVR_SALE_UPRC,    -- 본사배달-판매가
        tmpsp.DLVR_SALE_UPRC AS STORE_DLVR_SALE_UPRC, -- 매장배달-판매가
        tmpsp.DLVR_SALE_UPRC AS DLVR_SALE_UPRC,       -- 변경배달-판매가
        thpsp.PACK_SALE_UPRC AS HQ_PACK_SALE_UPRC,    -- 본사포장-판매가
        tmpsp.PACK_SALE_UPRC AS STORE_PACK_SALE_UPRC, -- 매장포장-판매가
        tmpsp.PACK_SALE_UPRC AS PACK_SALE_UPRC,       -- 변경포장-판매가
        tmp.PRC_CTRL_FG
        <include refid="CmmSQL.PagingTemplateCount"/>
        FROM TB_MS_PRODUCT tmp,
        TB_HQ_PRODUCT thp,
        (
            SELECT HQ_OFFICE_CD, PROD_CD,
            MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC,
            MIN(STIN_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS STIN_SALE_UPRC,
            MIN(DLVR_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS DLVR_SALE_UPRC,
            MIN(PACK_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS PACK_SALE_UPRC
            FROM TB_HQ_PRODUCT_SALE_PRICE
            WHERE 1 = 1
            <![CDATA[
                AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
            ]]>
            AND SALE_PRC_FG = '1'
            GROUP BY HQ_OFFICE_CD, PROD_CD
        ) thpsp,
        (
            SELECT STORE_CD, PROD_CD,
            MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC,
            MIN(STIN_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS STIN_SALE_UPRC,
            MIN(DLVR_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS DLVR_SALE_UPRC,
            MIN(PACK_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS PACK_SALE_UPRC
            FROM TB_MS_PRODUCT_SALE_PRICE
            WHERE 1 = 1
            <![CDATA[
                AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
            ]]>
            AND SALE_PRC_FG = '1'
            GROUP BY STORE_CD, PROD_CD
        ) tmpsp
        WHERE tmp.STORE_CD = #{storeCd}
        AND thp.HQ_OFFICE_CD = #{hqOfficeCd}
        <if test='prodClassCd != null and prodClassCd != ""'>
            AND thp.PROD_CLASS_CD IN (
                                        SELECT PROD_CLASS_CD
                                        FROM TB_HQ_PRODUCT_CLASS
                                        WHERE 1=1
                                        AND HQ_OFFICE_CD = #{hqOfficeCd}
                                        START WITH PROD_CLASS_CD = #{prodClassCd} AND HQ_OFFICE_CD = #{hqOfficeCd}
                                        CONNECT BY P_PROD_CLASS_CD = PRIOR PROD_CLASS_CD AND HQ_OFFICE_CD = #{hqOfficeCd}
                                    )
        </if>
        <if test='prodCd != null and prodCd != ""'>
            AND thp.PROD_CD LIKE '%'||#{prodCd}||'%'
        </if>
        <if test='prodNm != null and prodNm != ""'>
            AND thp.PROD_NM LIKE '%'||#{prodNm}||'%'
        </if>
        AND (
                ( ((SELECT COUNT(HQ_BRAND_CD) FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId}) != 0) AND (thp.HQ_BRAND_CD IN (SELECT HQ_BRAND_CD FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId})) )
                OR
                ( ((SELECT COUNT(HQ_BRAND_CD) FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId}) = 0) AND 1=1 )
            )
        AND (
                ( ((SELECT COUNT(HQ_BRAND_CD) FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId}) != 0) AND (tmp.HQ_BRAND_CD IN (SELECT HQ_BRAND_CD FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId})) )
                OR
                ( ((SELECT COUNT(HQ_BRAND_CD) FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId}) = 0) AND 1=1 )
            )
        AND thp.PROD_CD = tmp.PROD_CD
        AND thpsp.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
        AND thpsp.PROD_CD = thp.PROD_CD
        AND tmpsp.STORE_CD = tmp.STORE_CD
        AND tmpsp.PROD_CD = tmp.PROD_CD
        ORDER BY tmp.PROD_CD
        <include refid="CmmSQL.PagingTemplateBottom"/>
    </select>


    <!-- 본사 판매가관리 -->
    <!--
        TABLE    : 본사판매가 관리 조회
        COMMENTS : TB_HQ_PRODUCT, TB_HQ_PRODUCT_SALE_PRICE, TB_HQ_PRODUCT_CLASS
    -->
    <select id="getHqSalePriceList"  parameterType="salePriceVO" resultType="DefaultMap">
        /* SalePriceMapper.getHqSalePriceList */
        <include refid="CmmSQL.PagingTemplateHeader"/>
        SELECT
        thp.PROD_CD,
        thp.PROD_NM,
        thp.PROD_CLASS_CD,  -- 상품분류코드
        thp.PO_UNIT_QTY, -- 입수
        thp.COST_UPRC AS HQ_COST_UPRC,   -- 본사원가
        thp.SPLY_UPRC AS HQ_SPLY_UPRC,   -- 대표공급가
        thpsp.SALE_UPRC AS HQ_SALE_UPRC, -- 본사판매가
        thpsp.SALE_UPRC AS SALE_UPRC, -- 변경판매가
        thpsp.STIN_SALE_UPRC AS HQ_STIN_SALE_UPRC,    -- 본사내점-판매가
        thpsp.STIN_SALE_UPRC AS STIN_SALE_UPRC,       -- 변경내점-판매가
        thpsp.DLVR_SALE_UPRC AS HQ_DLVR_SALE_UPRC,    -- 본사배달-판매가
        thpsp.DLVR_SALE_UPRC AS DLVR_SALE_UPRC,       -- 변경배달-판매가
        thpsp.PACK_SALE_UPRC AS HQ_PACK_SALE_UPRC,    -- 본사포장-판매가
        thpsp.PACK_SALE_UPRC AS PACK_SALE_UPRC,       -- 변경포장-판매가
        thp.PRC_CTRL_FG
        <include refid="CmmSQL.PagingTemplateCount"/>
        FROM TB_HQ_PRODUCT thp,
        (
        SELECT HQ_OFFICE_CD, PROD_CD,
        MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC,
        MIN(STIN_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS STIN_SALE_UPRC,
        MIN(DLVR_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS DLVR_SALE_UPRC,
        MIN(PACK_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS PACK_SALE_UPRC
        FROM TB_HQ_PRODUCT_SALE_PRICE
        WHERE 1 = 1
        <![CDATA[
                AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
            ]]>
        AND SALE_PRC_FG = '1'
        GROUP BY HQ_OFFICE_CD, PROD_CD
        ) thpsp
        WHERE thp.HQ_OFFICE_CD = #{hqOfficeCd}
        <if test='prodClassCd != null and prodClassCd != ""'>
            AND thp.PROD_CLASS_CD IN (
            SELECT PROD_CLASS_CD
            FROM TB_HQ_PRODUCT_CLASS
            WHERE 1=1
            AND HQ_OFFICE_CD = #{hqOfficeCd}
            START WITH PROD_CLASS_CD = #{prodClassCd} AND HQ_OFFICE_CD = #{hqOfficeCd}
            CONNECT BY P_PROD_CLASS_CD = PRIOR PROD_CLASS_CD AND HQ_OFFICE_CD = #{hqOfficeCd}
            )
        </if>
        <if test='prodCd != null and prodCd != ""'>
            AND thp.PROD_CD LIKE '%'||#{prodCd}||'%'
        </if>
        <if test='prodNm != null and prodNm != ""'>
            AND thp.PROD_NM LIKE '%'||#{prodNm}||'%'
        </if>
        <if test='prodHqBrandCd != null and prodHqBrandCd != ""'>
            AND thp.HQ_BRAND_CD = #{prodHqBrandCd} -- 선택한 상품브랜드가 있을 때
        </if>
        <if test='prodHqBrandCd == null or prodHqBrandCd == ""'>
            <if test='userProdBrands != null and userProdBrands != ""'>
                -- 선택한 상품브랜드가 없을 때('전체' 일때), 사용자 관리브랜드에 속한 정보만 조회
                AND thp.HQ_BRAND_CD IN
                <foreach collection="userProdBrandList" item="item" open=" (" separator="," close=")" >
                    #{item}
                </foreach>
            </if>
        </if>
        AND (
                ( ((SELECT COUNT(HQ_BRAND_CD) FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId}) != 0) AND (thp.HQ_BRAND_CD IN (SELECT HQ_BRAND_CD FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId})) )
                OR
                ( ((SELECT COUNT(HQ_BRAND_CD) FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId}) = 0) AND 1=1 )
            )
        AND thpsp.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
        AND thpsp.PROD_CD = thp.PROD_CD
        ORDER BY thp.PROD_CD
        <include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <!-- 본사 판매가관리 > 판매가 히스토리 등록을 위한 COUNT 조회 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_SALE_PRICE
        COMMENTS : 판매가 히스토리 등록을 위한 COUNT 조회한다.
    -->
    <select id="getRegistHqProdCount" parameterType="salePriceVO" resultType="Integer">
        /* USE : SalePriceMapper.getRegistHqProdCount */
        SELECT COUNT(SALE_UPRC) AS CNT
        FROM TB_HQ_PRODUCT_SALE_PRICE
        WHERE HQ_OFFICE_CD = #{hqOfficeCd}
          AND PROD_CD = #{prodCd}
          AND SALE_PRC_FG = '1'
          AND START_DATE = #{startDate}
    </select>

    <!-- 본사 판매가관리 > 판매가 변경 히스토리 등록 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_SALE_PRICE_HISTORY
        COMMENTS : 판매가 변경 히스토리를 등록한다.
    -->
    <insert id="updateHqProdSalePriceHistory"  parameterType="salePriceVO" >
        /* USE : SalePriceMapper.updateHqProdSalePriceHistory */
        <![CDATA[
        INSERT INTO TB_HQ_PRODUCT_SALE_PRICE_HISTORY
                  (
                    HIS_SEQ,
                    HQ_OFFICE_CD,
                    PROD_CD,
                    SALE_PRC_FG,
                    START_DATE,
                    END_DATE,
                    SALE_UPRC,
                    REG_DT,
                    REG_ID,
                    STIN_SALE_UPRC,
                    DLVR_SALE_UPRC,
                    PACK_SALE_UPRC
                 )
        SELECT SQ_HQ_PRODUCT_SALE_PRICE_HISTORY.NEXTVAL,
               HQ_OFFICE_CD,
               PROD_CD,
               SALE_PRC_FG,
               START_DATE,
               END_DATE,
               SALE_UPRC,
               #{regDt},
               #{regId},
               NVL(STIN_SALE_UPRC, SALE_UPRC),
               NVL(DLVR_SALE_UPRC, SALE_UPRC),
               NVL(PACK_SALE_UPRC, SALE_UPRC)
        FROM TB_HQ_PRODUCT_SALE_PRICE
        WHERE HQ_OFFICE_CD = #{hqOfficeCd}
          AND PROD_CD = #{prodCd}
          AND SALE_PRC_FG = '1'
          AND START_DATE = #{startDate}
        ]]>
    </insert>

    <!-- 본사 판매가관리 > 판매가 변경 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_SALE_PRICE
        COMMENTS : 판매가를 일괄 변경한다.
    -->
    <insert id="modifyHqProdSalePrice"  parameterType="salePriceVO" >
        /* USE : SalePriceMapper.modifyHqProdSalePrice */
        MERGE INTO TB_HQ_PRODUCT_SALE_PRICE tmpsp
            USING DUAL
            ON (
                    tmpsp.HQ_OFFICE_CD = #{hqOfficeCd}
                    AND tmpsp.PROD_CD = #{prodCd}
                    AND tmpsp.SALE_PRC_FG = '1'
                    AND tmpsp.START_DATE = #{startDate}
                )
            WHEN MATCHED THEN
                UPDATE
                    SET
                        tmpsp.SALE_UPRC = #{saleUprc}, -- 판매가
                        tmpsp.STIN_SALE_UPRC = NVL(#{stinSaleUprc}, #{saleUprc}), -- 내점가
                        tmpsp.DLVR_SALE_UPRC = NVL(#{dlvrSaleUprc}, #{saleUprc}), -- 배달가
                        tmpsp.PACK_SALE_UPRC = NVL(#{packSaleUprc}, #{saleUprc}), -- 포장가
                        tmpsp.MOD_DT = #{modDt},
                        tmpsp.MOD_ID = #{modId}
            WHEN NOT MATCHED THEN
                INSERT
                    (
                     HQ_OFFICE_CD,
                     PROD_CD,
                     SALE_PRC_FG,
                     START_DATE,
                     END_DATE,
                     SALE_UPRC,
                     STIN_SALE_UPRC,
                     DLVR_SALE_UPRC,
                     PACK_SALE_UPRC,
                     REG_DT,
                     REG_ID,
                     MOD_DT,
                     MOD_ID
                        ) VALUES (
                                     #{hqOfficeCd},
                                     #{prodCd},
                                     '1',
                                     #{startDate},
                                     #{endDate},
                                     #{saleUprc},
                                     NVL(#{stinSaleUprc}, #{saleUprc}),
                                     NVL(#{dlvrSaleUprc}, #{saleUprc}),
                                     NVL(#{packSaleUprc}, #{saleUprc}),
                                     #{regDt},
                                     #{regId},
                                     #{modDt},
                                     #{modId}
                                 )
    </insert>

    <!-- 매장 판매가 등록 -->
    <!--
        TABLE    : TB_MS_PRODUCT_SALE_PRICE, TB_MS_PRODUCT_SALE_PRICE_HISTORY
        PARAM    : salePriceVO
        COMMENTS : 매장 판매가 등록
                   20210914 미사용 -> SalePriceMapper.modifyMsProdSalePrice 로 변경
    -->
    <select id="saveStoreSalePrice" statementType="CALLABLE"  parameterType="salePriceVO">
        /* USE : SalePriceMapper.saveStoreSalePrice */
        {
            CALL PKG_HQ_PRODUCT_SALE_PRICE.SP_HQ_PRODUCT_SALE_PRICE_I
            (
                #{hqOfficeCd},
                #{prodCd},
                #{storeCd},
                #{workMode},
                #{result, mode=OUT, jdbcType=VARCHAR}
            )
            }
    </select>

    <!-- 전매장적용: 매장 판매가 등록 -->
    <!--
        TABLE    : TB_MS_PRODUCT_SALE_PRICE
        COMMENTS : 판매가를 일괄 변경한다.
    -->
    <insert id="modifyMsProdSalePrice"  parameterType="salePriceVO" >
        /* USE : SalePriceMapper.modifyMsProdSalePrice */
        MERGE INTO TB_MS_PRODUCT_SALE_PRICE A
        USING   (
                    SELECT  A.STORE_CD
                    ,       B.PROD_CD
                    ,       B.SALE_PRC_FG
                    ,       B.START_DATE
                    ,       B.END_DATE
                    ,       B.SALE_UPRC
                    ,       B.REG_DT
                    ,       B.REG_ID
                    ,       B.MOD_DT
                    ,       B.MOD_ID
                    ,       B.STIN_SALE_UPRC
                    ,       B.DLVR_SALE_UPRC
                    ,       B.PACK_SALE_UPRC
                    FROM    TB_MS_STORE A
                    ,       TB_HQ_PRODUCT_SALE_PRICE B
                    WHERE   A.HQ_OFFICE_CD  =   #{hqOfficeCd}
                    AND     A.STORE_CD NOT IN (SELECT NMCODE_NM FROM TB_HQ_NMCODE WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND NMCODE_GRP_CD = '164' AND USE_YN = 'Y')
                    AND     B.HQ_OFFICE_CD  =   #{hqOfficeCd}
                    AND     B.PROD_CD       =   #{prodCd}
                    AND     B.SALE_PRC_FG   =   '1'
                    AND     B.START_DATE    =   #{startDate}
                ) B
        ON      (           A.STORE_CD      =   B.STORE_CD
                AND         A.PROD_CD       =   B.PROD_CD
                AND         A.SALE_PRC_FG   =   B.SALE_PRC_FG
                AND         A.START_DATE    =   B.START_DATE
                )
        WHEN MATCHED THEN
        UPDATE
        SET     A.END_DATE          =   B.END_DATE
        ,       A.SALE_UPRC         =   B.SALE_UPRC
        ,       A.STIN_SALE_UPRC    =   B.STIN_SALE_UPRC
        ,       A.DLVR_SALE_UPRC    =   B.DLVR_SALE_UPRC
        ,       A.PACK_SALE_UPRC    =   B.PACK_SALE_UPRC
        ,       A.MOD_DT            =   B.MOD_DT
        ,       A.MOD_ID            =   B.MOD_ID
        WHEN NOT MATCHED THEN
        INSERT
        (
                A.STORE_CD
        ,       A.PROD_CD
        ,       A.SALE_PRC_FG
        ,       A.START_DATE
        ,       A.END_DATE
        ,       A.SALE_UPRC
        ,       A.REG_DT
        ,       A.REG_ID
        ,       A.MOD_DT
        ,       A.MOD_ID
        ,       A.STIN_SALE_UPRC
        ,       A.DLVR_SALE_UPRC
        ,       A.PACK_SALE_UPRC
        )
        VALUES
        (
                B.STORE_CD
        ,       B.PROD_CD
        ,       B.SALE_PRC_FG
        ,       B.START_DATE
        ,       B.END_DATE
        ,       B.SALE_UPRC
        ,       B.REG_DT
        ,       B.REG_ID
        ,       B.MOD_DT
        ,       B.MOD_ID
        ,       B.STIN_SALE_UPRC
        ,       B.DLVR_SALE_UPRC
        ,       B.PACK_SALE_UPRC
        )
    </insert>

    <!-- 엑셀업로드 탭 - 엑셀 양식다운로드 조회 -->
    <!--
        TABLE    :
        COMMENTS :
    -->
    <select id="getSalePriceExcelUploadSampleList"  parameterType="salePriceVO" resultType="DefaultMap">
        /* SalePriceMapper.getSalePriceExcelUploadSampleList */
        <choose>
            <!-- 본사판매가 -->
            <when test='salePriceOrgnFg != null and salePriceOrgnFg != "" and salePriceOrgnFg == "H"'>
                <include refid="CmmSQL.PagingTemplateHeader"/>
                SELECT
                thp.PROD_CD,
                thp.PROD_NM,
                thpsp.SALE_UPRC AS HQ_SALE_UPRC, -- 본사판매가
                thpsp.SALE_UPRC AS SALE_UPRC -- 변경판매가
                <include refid="CmmSQL.PagingTemplateCount"/>
                FROM TB_HQ_PRODUCT thp,
                (
                    SELECT HQ_OFFICE_CD, PROD_CD,
                    MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC,
                    MIN(STIN_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS STIN_SALE_UPRC,
                    MIN(DLVR_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS DLVR_SALE_UPRC,
                    MIN(PACK_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS PACK_SALE_UPRC
                    FROM TB_HQ_PRODUCT_SALE_PRICE
                    WHERE 1=1
                    <![CDATA[
                        AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                    ]]>
                    AND SALE_PRC_FG = '1'
                    GROUP BY HQ_OFFICE_CD, PROD_CD
                ) thpsp
                WHERE 1=1
                AND thp.HQ_OFFICE_CD = #{hqOfficeCd}
                AND (
                        ( ((SELECT COUNT(HQ_BRAND_CD) FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId}) != 0) AND (thp.HQ_BRAND_CD IN (SELECT HQ_BRAND_CD FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId})) )
                        OR
                        ( ((SELECT COUNT(HQ_BRAND_CD) FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId}) = 0) AND 1=1 )
                    )
                AND thpsp.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
                AND thpsp.PROD_CD = thp.PROD_CD
                ORDER BY thp.PROD_CD
                <include refid="CmmSQL.PagingTemplateBottom"/>
            </when>
            <!-- 매장판매가 -->
            <when test='salePriceOrgnFg != null and salePriceOrgnFg != "" and salePriceOrgnFg == "S"'>
                <include refid="CmmSQL.PagingTemplateHeader"/>
                SELECT
                tmp.STORE_CD,
                tmp.PROD_CD,
                tmp.PROD_NM,
                thpsp.SALE_UPRC AS HQ_SALE_UPRC, -- 본사판매가
                tmpsp.SALE_UPRC AS STORE_SALE_UPRC, -- 매장판매가
                tmpsp.SALE_UPRC AS SALE_UPRC, -- 매장변경판매가
                thn.STORE_CHG_NOT
                <include refid="CmmSQL.PagingTemplateCount"/>
                FROM TB_MS_PRODUCT tmp,
                TB_HQ_PRODUCT thp,
                (
                    SELECT HQ_OFFICE_CD, PROD_CD,
                    MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC,
                    MIN(STIN_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS STIN_SALE_UPRC,
                    MIN(DLVR_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS DLVR_SALE_UPRC,
                    MIN(PACK_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS PACK_SALE_UPRC
                    FROM TB_HQ_PRODUCT_SALE_PRICE
                    WHERE 1=1
                    <![CDATA[
                        AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                    ]]>
                    AND SALE_PRC_FG = '1'
                    GROUP BY HQ_OFFICE_CD, PROD_CD
                ) thpsp,
                (
                    SELECT STORE_CD, PROD_CD,
                    MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC,
                    MIN(STIN_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS STIN_SALE_UPRC,
                    MIN(DLVR_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS DLVR_SALE_UPRC,
                    MIN(PACK_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS PACK_SALE_UPRC
                    FROM TB_MS_PRODUCT_SALE_PRICE
                    WHERE 1=1
                    <![CDATA[
                        AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                    ]]>
                    AND SALE_PRC_FG = '1'
                    GROUP BY STORE_CD, PROD_CD
                ) tmpsp,
                (
                    SELECT
                    NMCODE_NM AS STORE_CD,
                    '불가' AS STORE_CHG_NOT
                    FROM TB_HQ_NMCODE
                    WHERE 1=1
                    AND HQ_OFFICE_CD = #{hqOfficeCd}
                    AND NMCODE_GRP_CD = '164'
                    AND USE_YN = 'Y'
                ) thn
                WHERE 1=1
                AND tmp.STORE_CD IN (SELECT STORE_CD FROM TB_MS_STORE WHERE HQ_OFFICE_CD = #{hqOfficeCd})
                AND thp.HQ_OFFICE_CD = #{hqOfficeCd}
                AND (
                        ( ((SELECT COUNT(HQ_BRAND_CD) FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId}) != 0) AND (tmp.HQ_BRAND_CD IN (SELECT HQ_BRAND_CD FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId})) )
                        OR
                        ( ((SELECT COUNT(HQ_BRAND_CD) FROM TB_WB_USER_BRAND WHERE USER_ID = #{userId}) = 0) AND 1=1 )
                    )
                AND thp.PROD_CD = tmp.PROD_CD
                AND thpsp.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
                AND thpsp.PROD_CD = thp.PROD_CD
                AND tmpsp.STORE_CD = tmp.STORE_CD
                AND tmpsp.PROD_CD = tmp.PROD_CD
                AND thn.STORE_CD (+)= tmp.STORE_CD
                ORDER BY tmp.STORE_CD, tmp.PROD_CD
                <include refid="CmmSQL.PagingTemplateBottom"/>
            </when>
        </choose>
    </select>

    <!-- 검증결과 조회 -->
    <!--
        TABLE    :
        COMMENTS :
    -->
    <select id="getSalePriceExcelUploadCheckList"  parameterType="salePriceVO" resultType="DefaultMap">
        /* SalePriceMapper.getSalePriceExcelUploadCheckList */
        <choose>
            <!-- 본사판매가 -->
            <when test='salePriceOrgnFg != null and salePriceOrgnFg != "" and salePriceOrgnFg == "H"'>
                SELECT
                A.RESULT,
                A.PROD_CD,
                thp.PROD_NM,
                thpsp.SALE_UPRC AS HQ_SALE_UPRC, -- 본사판매가
                A.SALE_UPRC, -- 변경판매가
                thp.PRC_CTRL_FG,
                A.SEQ
                FROM TB_TMP_EXCEL_SALE_PRICE A,
                TB_HQ_PRODUCT thp,
                (
                    SELECT HQ_OFFICE_CD, PROD_CD,
                    MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC,
                    MIN(STIN_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS STIN_SALE_UPRC,
                    MIN(DLVR_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS DLVR_SALE_UPRC,
                    MIN(PACK_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS PACK_SALE_UPRC
                    FROM TB_HQ_PRODUCT_SALE_PRICE
                    WHERE 1=1
                    <![CDATA[
                        AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                    ]]>
                    AND SALE_PRC_FG = '1'
                    GROUP BY HQ_OFFICE_CD, PROD_CD
                ) thpsp
                WHERE 1=1
                AND A.SESSION_ID = #{sessionId}
                AND A.HQ_OFFICE_CD = #{hqOfficeCd}
                AND thp.HQ_OFFICE_CD (+)= A.HQ_OFFICE_CD
                AND thp.PROD_CD (+)= A.PROD_CD
                AND thpsp.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
                AND thpsp.PROD_CD = thp.PROD_CD
                ORDER BY A.SEQ
            </when>
            <!-- 매장판매가 -->
            <when test='salePriceOrgnFg != null and salePriceOrgnFg != "" and salePriceOrgnFg == "S"'>
                SELECT
                A.RESULT,
                A.STORE_CD,
                tms.STORE_NM,
                A.PROD_CD,
                tmp.PROD_NM,
                thpsp.SALE_UPRC AS HQ_SALE_UPRC, -- 본사판매가
                tmpsp.SALE_UPRC AS STORE_SALE_UPRC, -- 매장판매가
                A.SALE_UPRC,
                tmp.PRC_CTRL_FG,
                A.SEQ
                FROM TB_TMP_EXCEL_SALE_PRICE A,
                TB_MS_PRODUCT tmp,
                TB_MS_STORE tms,
                TB_HQ_PRODUCT thp,
                (
                    SELECT HQ_OFFICE_CD, PROD_CD,
                    MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC,
                    MIN(STIN_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS STIN_SALE_UPRC,
                    MIN(DLVR_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS DLVR_SALE_UPRC,
                    MIN(PACK_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS PACK_SALE_UPRC
                    FROM TB_HQ_PRODUCT_SALE_PRICE
                    WHERE 1=1
                    <![CDATA[
                        AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                    ]]>
                    AND SALE_PRC_FG = '1'
                    GROUP BY HQ_OFFICE_CD, PROD_CD
                ) thpsp,
                (
                    SELECT STORE_CD, PROD_CD,
                    MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC,
                    MIN(STIN_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS STIN_SALE_UPRC,
                    MIN(DLVR_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS DLVR_SALE_UPRC,
                    MIN(PACK_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS PACK_SALE_UPRC
                    FROM TB_MS_PRODUCT_SALE_PRICE
                    WHERE 1=1
                    <![CDATA[
                        AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                        AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                    ]]>
                    AND SALE_PRC_FG = '1'
                    GROUP BY STORE_CD, PROD_CD
                ) tmpsp
                WHERE 1=1
                AND A.SESSION_ID = #{sessionId}
                AND A.HQ_OFFICE_CD = #{hqOfficeCd}
                AND tmp.STORE_CD (+)= A.STORE_CD
                AND tmp.PROD_CD (+)= A.PROD_CD
                AND tms.STORE_CD (+)= A.STORE_CD
                AND thp.HQ_OFFICE_CD = #{hqOfficeCd}
                AND thp.PROD_CD = tmp.PROD_CD
                AND thpsp.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
                AND thpsp.PROD_CD = thp.PROD_CD
                AND tmpsp.STORE_CD = tmp.STORE_CD
                AND tmpsp.PROD_CD = tmp.PROD_CD
                ORDER BY A.SEQ
            </when>
        </choose>
    </select>

    <!-- 검증결과 전체 삭제 -->
    <!--
        TABLE    :
        COMMENTS :
    -->
    <delete id="getSalePriceExcelUploadCheckDeleteAll" parameterType="salePriceVO">
        /* SalePriceMapper.getSalePriceExcelUploadCheckDeleteAll */
        DELETE
        TB_TMP_EXCEL_SALE_PRICE
        WHERE 1=1
        AND SESSION_ID = #{sessionId}
        AND HQ_OFFICE_CD = #{hqOfficeCd}
    </delete>

    <!-- 검증결과 삭제 -->
    <!--
        TABLE    :
        COMMENTS :
    -->
    <delete id="getSalePriceExcelUploadCheckDelete" parameterType="salePriceVO">
        /* SalePriceMapper.getSalePriceExcelUploadCheckDelete */
        <choose>
            <!-- 본사판매가 -->
            <when test='salePriceOrgnFg != null and salePriceOrgnFg != "" and salePriceOrgnFg == "H"'>
                DELETE
                TB_TMP_EXCEL_SALE_PRICE
                WHERE 1=1
                AND SESSION_ID = #{sessionId}
                AND HQ_OFFICE_CD = #{hqOfficeCd}
                AND PROD_CD = #{prodCd}
                AND SEQ = #{seq}
            </when>
            <!-- 매장판매가 -->
            <when test='salePriceOrgnFg != null and salePriceOrgnFg != "" and salePriceOrgnFg == "S"'>
                DELETE
                TB_TMP_EXCEL_SALE_PRICE
                WHERE 1=1
                AND SESSION_ID = #{sessionId}
                AND HQ_OFFICE_CD = #{hqOfficeCd}
                AND STORE_CD = #{storeCd}
                AND PROD_CD = #{prodCd}
                AND SEQ = #{seq}
            </when>
        </choose>
    </delete>

    <!-- 업로드시 임시테이블 저장 -->
    <!--
        TABLE    :
        COMMENTS :
    -->
    <insert id="getSalePriceExcelUploadCheckSave" parameterType="salePriceVO">
        /* SalePriceMapper.getSalePriceExcelUploadCheckSave */
        INSERT INTO TB_TMP_EXCEL_SALE_PRICE
        (
            SESSION_ID,
            SEQ,
            HQ_OFFICE_CD,
            STORE_CD,
            PROD_CD,
            SALE_UPRC,
            RESULT,
            REG_DT,
            REG_ID,
            MOD_DT,
            MOD_ID
        ) VALUES (
            #{sessionId},
            #{seq},
            #{hqOfficeCd},
            #{storeCd},
            #{prodCd},
            #{saleUprc},
            #{result},
            #{regDt},
            #{regId},
            #{modDt},
            #{modId}
         )
    </insert>

    <!-- 상품코드 존재여부 체크 -->
    <!--
        TABLE    :
        COMMENTS :
    -->
    <select id="getProdCdChk"  parameterType="salePriceVO" resultType="Integer">
        /* SalePriceMapper.getProdCdChk */
        <choose>
            <!-- 본사판매가 -->
            <when test='salePriceOrgnFg != null and salePriceOrgnFg != "" and salePriceOrgnFg == "H"'>
                SELECT COUNT(*)
                FROM TB_HQ_PRODUCT
                WHERE 1=1
                AND HQ_OFFICE_CD = #{hqOfficeCd}
                AND PROD_CD = #{prodCd}
            </when>
            <!-- 매장판매가 -->
            <when test='salePriceOrgnFg != null and salePriceOrgnFg != "" and salePriceOrgnFg == "S"'>
                SELECT COUNT(*)
                FROM TB_MS_PRODUCT
                WHERE 1=1
                AND STORE_CD = #{storeCd}
                AND PROD_CD = #{prodCd}
            </when>
        </choose>
    </select>

    <!-- 매장코드 존재여부 체크 -->
    <!--
        TABLE    :
        COMMENTS :
    -->
    <select id="getStoreCdChk"  parameterType="salePriceVO" resultType="Integer">
        /* SalePriceMapper.getStoreCdChk */
        SELECT COUNT(*)
        FROM TB_MS_STORE
        WHERE 1=1
        AND HQ_OFFICE_CD = #{hqOfficeCd}
        AND STORE_CD = #{storeCd}
    </select>

</mapper>