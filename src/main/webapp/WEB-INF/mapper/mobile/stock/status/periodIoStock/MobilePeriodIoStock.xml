<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    MobilePeriodIoStock.xml
    기간수불현황
    ======================================================
    No  ||  수정자 ||  수정일자    ||  수정내역
    ======================================================
    1       김유승     2024.07.19     최초작성
-->

<mapper namespace="kr.co.solbipos.mobile.stock.status.periodIoStock.service.impl.MobilePeriodIoStockMapper">

    <!-- 기간수불현황 - 본사 리스트 조회 -->
    <!--
        TABLE    :
        PARAM    : mobilePeriodIoStockVO
        COMMENTS : 기간수불현황 - 본사 리스트를 조회한다.
    -->
    <select id="getPeriodIoStockList" parameterType="mobilePeriodIoStockVO" resultType="DefaultMap">
        /* USE : MobilePeriodIoStockMapper.getPeriodIoStockList */
        <include refid="CmmSQL.PagingTemplateHeader"/>
        SELECT  A.*
        ,       B.BASE_QTY
        ,       B.BASE_TOT
        ,       C.CLOSE_QTY
        ,       C.CLOSE_TOT
        FROM
            (
                SELECT  FN_GET_PROD_CLASS_CD_NM_STR(#{hqOfficeCd}, thp.PROD_CLASS_CD, 'NM_STR') AS PROD_CLASS_NM
                ,       TSHSD.PROD_CD
                ,       THP.PROD_NM
                ,       THP.PO_UNIT_QTY
                ,       THP.PO_UNIT_FG
                ,       TSHSD.HQ_OFFICE_CD
                ,       (SELECT NMCODE_NM FROM TB_HQ_NMCODE WHERE NMCODE_GRP_CD = '093' AND HQ_OFFICE_CD = #{hqOfficeCd} AND NMCODE_CD = THP.PO_UNIT_FG) AS PO_UNIT_FG_NM
                ,       THPB.BARCD_CD
                <if test='unitFg == "1"'>
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.VENDR_IN_QTY / THP.PO_UNIT_QTY)) AS VENDR_IN_QTY /* 업체반입 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.VENDR_OUT_QTY / THP.PO_UNIT_QTY)) AS VENDR_OUT_QTY /* 업체반출 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.HQ_IN_QTY / THP.PO_UNIT_QTY)) AS HQ_IN_QTY /* 본사반입 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.HQ_OUT_QTY / THP.PO_UNIT_QTY)) AS HQ_OUT_QTY /* 본사출고 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.STORE_MOVE_IN_QTY / THP.PO_UNIT_QTY)) AS STORE_MOVE_IN_QTY /* 매장이출 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.STORE_MOVE_OUT_QTY / THP.PO_UNIT_QTY)) AS STORE_MOVE_OUT_QTY /* 매장출고 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.DISUSE_QTY / THP.PO_UNIT_QTY)) AS DISUSE_QTY /* 재고폐기 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.ADJ_QTY / THP.PO_UNIT_QTY)) AS ADJ_QTY /* 재고조정 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.SET_IN_QTY / THP.PO_UNIT_QTY)) AS SET_IN_QTY /* 세트생성 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.SALE_VENDR_ORDER_QTY / THP.PO_UNIT_QTY)) AS SALE_VENDR_ORDER_QTY /* 거래처출고 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.SALE_VENDR_RTN_QTY / THP.PO_UNIT_QTY)) AS SALE_VENDR_RTN_QTY /* 거래처반품 수량*/
                </if>
                <if test='unitFg == "0"'>
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.VENDR_IN_QTY )) AS VENDR_IN_QTY /* 업체반입 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.VENDR_OUT_QTY )) AS VENDR_OUT_QTY /* 업체반출 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.HQ_IN_QTY )) AS HQ_IN_QTY /* 본사반입 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.HQ_OUT_QTY )) AS HQ_OUT_QTY /* 본사출고 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.STORE_MOVE_IN_QTY )) AS STORE_MOVE_IN_QTY /* 매장이출 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.STORE_MOVE_OUT_QTY )) AS STORE_MOVE_OUT_QTY /* 매장출고 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.DISUSE_QTY )) AS DISUSE_QTY /* 재고폐기 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.ADJ_QTY )) AS ADJ_QTY /* 재고조정 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.SET_IN_QTY )) AS SET_IN_QTY /* 세트생성 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.SALE_VENDR_ORDER_QTY )) AS SALE_VENDR_ORDER_QTY /* 거래처출고 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.SALE_VENDR_RTN_QTY )) AS SALE_VENDR_RTN_QTY /* 거래처반품 수량*/
                </if>
                ,       SF_ZERO_TO_NULL(SUM(TSHSD.VENDR_IN_TOT )) AS VENDR_IN_TOT /* 본사입고 금액*/
                ,       SF_ZERO_TO_NULL(SUM(TSHSD.VENDR_OUT_TOT )) AS VENDR_OUT_TOT /* 업체반출 금액*/
                ,       SF_ZERO_TO_NULL(SUM(TSHSD.HQ_OUT_TOT )) AS HQ_OUT_TOT /* 본사출고 금액*/
                ,       SF_ZERO_TO_NULL(SUM(TSHSD.HQ_IN_TOT )) AS HQ_IN_TOT /* 본사반입 금액*/
                ,       SF_ZERO_TO_NULL(SUM(TSHSD.STORE_MOVE_IN_TOT )) AS STORE_MOVE_IN_TOT /* 매장이입 금액*/
                ,       SF_ZERO_TO_NULL(SUM(TSHSD.STORE_MOVE_OUT_TOT )) AS STORE_MOVE_OUT_TOT /* 매장이출 금액*/
                ,       SF_ZERO_TO_NULL(SUM(TSHSD.SALE_VENDR_ORDER_TOT )) AS SALE_VENDR_ORDER_TOT /* 거래처출고 금액*/
                ,       SF_ZERO_TO_NULL(SUM(TSHSD.SALE_VENDR_RTN_TOT )) AS SALE_VENDR_RTN_TOT /* 거래처반품 금액*/
                ,       #{startDate} AS START_DATE
                ,       #{endDate} AS END_DATE
                <include refid="CmmSQL.PagingTemplateCount"/>
                FROM    TB_ST_HQ_STOCK_DAILY TSHSD
                ,       TB_HQ_PRODUCT THP
                ,       TB_HQ_PRODUCT_BARCD THPB
                WHERE   TSHSD.HQ_OFFICE_CD  = #{hqOfficeCd}
                AND     THP.STOCK_PROD_YN   = 'Y'
                AND     THP.USE_YN          = 'Y'
                AND     TSHSD.HQ_OFFICE_CD  = THP.HQ_OFFICE_CD
                AND     TSHSD.PROD_CD       = THP.PROD_CD
                AND     TSHSD.HQ_OFFICE_CD  = THPB.HQ_OFFICE_CD(+)
                AND     TSHSD.PROD_CD       = THPB.PROD_CD(+)
                <if test="startDate != '' and startDate != null and endDate != '' and endDate != null">
                    AND TSHSD.IOSTOCK_DATE BETWEEN #{startDate} AND #{endDate}
                </if>
                <if test="prodCd != null and prodCd != ''">
                    AND THP.PROD_CD = #{prodCd}
                </if>
                <if test="prodNm != null and prodNm != ''">
                    AND THP.PROD_NM LIKE '%'||#{prodNm}||'%'
                </if>
                <if test="barcdCd != null and barcdCd != ''">
                    AND THPB.BARCD_CD = #{barcdCd}
                </if>
                <if test='prodClassCd != null and prodClassCd != ""'>
                    AND THP.PROD_CLASS_CD IN    (
                                                    SELECT  PROD_CLASS_CD
                                                    FROM    TB_HQ_PRODUCT_CLASS
                                                    WHERE   HQ_OFFICE_CD = #{hqOfficeCd}
                                                    START
                                                    WITH    PROD_CLASS_CD = #{prodClassCd}
                                                    AND     HQ_OFFICE_CD = #{hqOfficeCd}
                                                    CONNECT BY
                                                    PRIOR   PROD_CLASS_CD = P_PROD_CLASS_CD
                                                    AND     HQ_OFFICE_CD = #{hqOfficeCd}
                                                )
                </if>
                <if test='arrVendrCd != null and arrVendrCd != ""'>
                    AND thp.PROD_CD IN  (
                                            SELECT  PROD_CD
                                            FROM    TB_HQ_VENDOR_PROD
                                            WHERE   HQ_OFFICE_CD = #{hqOfficeCd}
                                            AND     VENDR_CD IN
                                            <foreach collection="arrVendrCd" item="item" open="(" close=")" separator=",">
                                                #{item}
                                            </foreach>
                                        )
                </if>
                GROUP
                BY      THP.PROD_CLASS_CD
                ,       TSHSD.PROD_CD
                ,       THP.PROD_NM
                ,       THP.PO_UNIT_QTY
                ,       THP.PO_UNIT_FG
                ,       THPB.BARCD_CD
                ,       TSHSD.HQ_OFFICE_CD
            ) A
        ,	(
                SELECT 	AST.HQ_OFFICE_CD
                ,		AST.PROD_CD
                <if test='unitFg == "1"'>
                    ,   SF_ZERO_TO_NULL(SUM(AST.DATE_QTY / TMP.PO_UNIT_QTY))             AS BASE_QTY /* 기초재고수량 */
                    ,   SF_ZERO_TO_NULL(SUM(AST.AVG_COST_UPRC))                          AS BASE_TOT /* 기초재고금액 */
                </if>
                <if test='unitFg == "0"'>
                    ,	SF_ZERO_TO_NULL(SUM(AST.DATE_QTY))                               AS BASE_QTY /* 기초재고수량 */
                    , 	SF_ZERO_TO_NULL(SUM(AST.AVG_COST_UPRC))                          AS BASE_TOT /* 기초재고금액 */
                </if>
                FROM 	TB_ST_HQ_STOCK_CUR_DATE_V01 AST
                ,		TB_HQ_PRODUCT THP
                WHERE	AST.HQ_OFFICE_CD    =   #{hqOfficeCd}
                AND     AST.THE_DATE 	(+) =   TO_CHAR(TO_DATE(#{startDate}, 'YYYYMMDD')-1, 'YYYYMMDD')
                AND		THP.HQ_OFFICE_CD    =   AST.HQ_OFFICE_CD
                AND 	THP.PROD_CD 	    =   AST.PROD_CD
                GROUP
                BY 		AST.HQ_OFFICE_CD
                ,		AST.PROD_CD
            ) B
        ,   (
                SELECT 	BST.HQ_OFFICE_CD
                ,		BST.PROD_CD
                <if test='unitFg == "1"'>
                    ,   SF_ZERO_TO_NULL(SUM(BST.DATE_QTY / TMP.PO_UNIT_QTY))             AS CLOSE_QTY /* 기초재고수량 */
                    ,   SF_ZERO_TO_NULL(SUM(BST.AVG_COST_UPRC))                          AS CLOSE_TOT /* 기초재고금액 */
                </if>
                <if test='unitFg == "0"'>
                    ,	SF_ZERO_TO_NULL(SUM(BST.DATE_QTY))                               AS CLOSE_QTY /* 기초재고수량 */
                    , 	SF_ZERO_TO_NULL(SUM(BST.AVG_COST_UPRC))                          AS CLOSE_TOT /* 기초재고금액 */
                </if>
                FROM 	TB_ST_HQ_STOCK_CUR_DATE_V01 BST
                ,		TB_HQ_PRODUCT THP
                WHERE	BST.HQ_OFFICE_CD    =   #{hqOfficeCd}
                AND     BST.THE_DATE 	(+) =   #{endDate}
                AND		THP.HQ_OFFICE_CD    =   BST.HQ_OFFICE_CD
                AND 	THP.PROD_CD 	    =   BST.PROD_CD
                GROUP
                BY 		BST.HQ_OFFICE_CD
                ,		BST.PROD_CD
            ) C
        WHERE 	B.HQ_OFFICE_CD  (+) =   A.HQ_OFFICE_CD
        AND     B.PROD_CD       (+) =   A.PROD_CD
        AND     C.HQ_OFFICE_CD  (+) =   A.HQ_OFFICE_CD
        AND     C.PROD_CD       (+) =   A.PROD_CD
        ORDER
        BY      A.PROD_CD
        <include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <!-- 기간수불현황 - 매장리스트 조회 -->
    <!--
        TABLE    :
        PARAM    : mobilePeriodIoStockVO
        COMMENTS : 기간수불현황 - 매장리스트를 조회한다.
    -->
    <select id="getPeriodIoStockStoreList" parameterType="mobilePeriodIoStockVO" resultType="DefaultMap">
        /* USE : MobilePeriodIoStockMapper.getPeriodIoStockStoreList */
        <include refid="CmmSQL.PagingTemplateHeader"/>
        SELECT  A.*
        ,       B.BASE_QTY
        ,       B.BASE_TOT
        ,       C.CLOSE_QTY
        ,       C.CLOSE_TOT
        FROM
            (
                SELECT  FN_GET_PROD_CLASS_CD_NM_STR(#{storeCd}, TMP.PROD_CLASS_CD, 'NM_STR') AS PROD_CLASS_NM
                ,       TSSSD.PROD_CD
                ,       TMP.PROD_NM
                ,       TMP.PO_UNIT_QTY
                ,       TMP.PO_UNIT_FG
                ,       (SELECT NMCODE_NM FROM TB_MS_STORE_NMCODE WHERE NMCODE_GRP_CD = '093' AND STORE_CD = #{storeCd} AND NMCODE_CD = TMP.PO_UNIT_FG) AS PO_UNIT_FG_NM
                ,       TMPB.BARCD_CD
                ,       TSSSD.STORE_CD
                <if test='unitFg == "1"'>
                    , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_IN_QTY	/ TMP.PO_UNIT_QTY))     AS STORE_IN_QTY /* 매장입고 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_OUT_QTY	/ TMP.PO_UNIT_QTY))     AS STORE_OUT_QTY /* 매장반품 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.PURCHS_IN_QTY	/ TMP.PO_UNIT_QTY))     AS PURCHS_IN_QTY /* 사입입고 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.PURCHS_OUT_QTY	/ TMP.PO_UNIT_QTY))     AS PURCHS_OUT_QTY /* 사입반품 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_SALE_QTY	/ TMP.PO_UNIT_QTY))     AS STORE_SALE_QTY /* 매장판매 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.MOVE_IN_QTY	/ TMP.PO_UNIT_QTY))         AS MOVE_IN_QTY /* 매장이입 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.MOVE_OUT_QTY	/ TMP.PO_UNIT_QTY))     AS MOVE_OUT_QTY /* 매장이출 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.DISUSE_QTY		/ TMP.PO_UNIT_QTY))     AS DISUSE_QTY /* 재고폐기 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.ADJ_QTY		/ TMP.PO_UNIT_QTY))         AS ADJ_QTY /* 재고조정 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.SET_IN_QTY		/ TMP.PO_UNIT_QTY))     AS SET_IN_QTY /* 세트생성 수량*/
                </if>
                <if test='unitFg == "0"'>
                    , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_IN_QTY	))      AS STORE_IN_QTY /* 매장입고 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_OUT_QTY	))      AS STORE_OUT_QTY /* 매장반품 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.PURCHS_IN_QTY	))      AS PURCHS_IN_QTY /* 사입입고 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.PURCHS_OUT_QTY	))      AS PURCHS_OUT_QTY /* 사입반품 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_SALE_QTY	))      AS STORE_SALE_QTY /* 매장판매 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.MOVE_IN_QTY	))          AS MOVE_IN_QTY /* 매장이입 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.MOVE_OUT_QTY	))      AS MOVE_OUT_QTY /* 매장이출 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.DISUSE_QTY		))      AS DISUSE_QTY /* 재고폐기 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.ADJ_QTY		))          AS ADJ_QTY /* 재고조정 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.SET_IN_QTY		))      AS SET_IN_QTY /* 세트생성 수량*/
                </if>
                , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_IN_TOT	))      AS STORE_IN_TOT /* 매장입고 금액*/
                , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_OUT_TOT	))      AS STORE_OUT_TOT /* 매장반품 금액*/
                , SF_ZERO_TO_NULL(SUM(TSSSD.PURCHS_IN_TOT	))      AS PURCHS_IN_TOT /* 사입입고 금액*/
                , SF_ZERO_TO_NULL(SUM(TSSSD.PURCHS_OUT_TOT	))      AS PURCHS_OUT_TOT /* 사입반품 금액*/
                , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_SALE_TOT	))      AS STORE_SALE_TOT /* 매장판매 금액*/
                , SF_ZERO_TO_NULL(SUM(TSSSD.MOVE_IN_TOT	))          AS MOVE_IN_TOT /* 매장이입 금액*/
                , SF_ZERO_TO_NULL(SUM(TSSSD.MOVE_OUT_TOT	))      AS MOVE_OUT_TOT /* 매장이출 금액*/
                -- 			     , SF_ZERO_TO_NULL(SUM()) AS IO_OCCR_TOT_17 /* 재고폐기 금액*/
                -- 			     , SF_ZERO_TO_NULL(SUM()) AS IO_OCCR_TOT_21 /* 재고조정 금액*/
                -- 			     , SF_ZERO_TO_NULL(SUM()) AS IO_OCCR_TOT_22 /* 세트생성 금액*/
                , #{startDate}  AS START_DATE
                , #{endDate}    AS END_DATE
                <include refid="CmmSQL.PagingTemplateCount"/>
                FROM    TB_ST_STORE_STOCK_DAILY TSSSD
                ,       TB_MS_PRODUCT TMP
                ,       TB_MS_PRODUCT_BARCD TMPB
                WHERE   TSSSD.STORE_CD 	    = #{storeCd}
                AND     TMP.STOCK_PROD_YN   = 'Y'
                AND     TMP.USE_YN          = 'Y'
                AND     TSSSD.STORE_CD 	    = TMP.STORE_CD
                AND     TSSSD.PROD_CD       = TMP.PROD_CD
                AND     TSSSD.STORE_CD 	    = TMPB.STORE_CD(+)
                AND     TSSSD.PROD_CD       = TMPB.PROD_CD(+)
                <if test="startDate != '' and startDate != null and endDate != '' and endDate != null">
                    AND TSSSD.IOSTOCK_DATE BETWEEN #{startDate} AND #{endDate}
                </if>
                <if test="prodCd != null and prodCd != ''">
                    AND TMP.PROD_CD = #{prodCd}
                </if>
                <if test="prodNm != null and prodNm != ''">
                    AND TMP.PROD_NM LIKE '%'||#{prodNm}||'%'
                </if>
                <if test="barcdCd != null and barcdCd != ''">
                    AND TMPB.BARCD_CD = #{barcdCd}
                </if>
                <if test='prodClassCd != null and prodClassCd != ""'>
                    AND TMP.PROD_CLASS_CD IN    (
                                                    SELECT  PROD_CLASS_CD
                                                    FROM    TB_MS_PRODUCT_CLASS
                                                    WHERE   STORE_CD        = #{storeCd}
                                                    START
                                                    WITH    PROD_CLASS_CD   = #{prodClassCd}
                                                    AND     STORE_CD        = #{storeCd}
                                                    CONNECT BY
                                                    PRIOR   PROD_CLASS_CD   = P_PROD_CLASS_CD
                                                    AND     STORE_CD        = #{storeCd}
                                                )
                </if>
                <if test='arrVendrCd != null and arrVendrCd != ""'>
                    AND tmp.PROD_CD IN  (
                                            SELECT  PROD_CD
                                            FROM    TB_HQ_VENDOR_PROD
                                            WHERE   HQ_OFFICE_CD = #{hqOfficeCd}
                                            AND     VENDR_CD IN
                                            <foreach collection="arrVendrCd" item="item" open="(" close=")" separator=",">
                                                #{item}
                                            </foreach>
                                        )
                </if>
                GROUP
                BY      TMP.PROD_CLASS_CD
                ,       TSSSD.PROD_CD
                ,       TMP.PROD_NM
                ,       TMP.PO_UNIT_QTY
                ,       TMP.PO_UNIT_FG
                ,       TMPB.BARCD_CD
                ,       TSSSD.STORE_CD
            ) A
        ,   (
                SELECT  AST.STORE_CD
                ,       AST.PROD_CD
                <if test='unitFg == "1"'>
                    ,   SF_ZERO_TO_NULL(SUM(AST.DATE_QTY / TMP.PO_UNIT_QTY))             AS BASE_QTY /* 기초재고수량 */
                    ,   SF_ZERO_TO_NULL(SUM(AST.AVG_COST_UPRC))                          AS BASE_TOT /* 기초재고금액 */
                </if>
                <if test='unitFg == "0"'>
                    ,	SF_ZERO_TO_NULL(SUM(AST.DATE_QTY))                               AS BASE_QTY /* 기초재고수량 */
                    , 	SF_ZERO_TO_NULL(SUM(AST.AVG_COST_UPRC))                          AS BASE_TOT /* 기초재고금액 */
                </if>
                FROM 	TB_ST_STORE_STOCK_CUR_DATE_V01 AST
                ,		TB_MS_PRODUCT TMP
                WHERE	AST.STORE_CD        =   #{storeCd}
                AND     AST.THE_DATE 	(+) =   TO_CHAR(TO_DATE(#{startDate}, 'YYYYMMDD')-1, 'YYYYMMDD')
                AND		TMP.STORE_CD        =   AST.STORE_CD
                AND 	TMP.PROD_CD 	    =   AST.PROD_CD
                GROUP
                BY 		AST.STORE_CD
                ,		AST.PROD_CD
            ) B
        ,   (
                SELECT 	BST.STORE_CD
                ,		BST.PROD_CD
                <if test='unitFg == "1"'>
                    ,   SF_ZERO_TO_NULL(SUM(BST.DATE_QTY / TMP.PO_UNIT_QTY))             AS CLOSE_QTY /* 기초재고수량 */
                    ,   SF_ZERO_TO_NULL(SUM(BST.AVG_COST_UPRC))                          AS CLOSE_TOT /* 기초재고금액 */
                </if>
                <if test='unitFg == "0"'>
                    ,	SF_ZERO_TO_NULL(SUM(BST.DATE_QTY))                               AS CLOSE_QTY /* 기초재고수량 */
                    , 	SF_ZERO_TO_NULL(SUM(BST.AVG_COST_UPRC))                          AS CLOSE_TOT /* 기초재고금액 */
                </if>
                FROM 	TB_ST_STORE_STOCK_CUR_DATE_V01 BST
                ,		TB_MS_PRODUCT TMP
                WHERE	BST.STORE_CD        =   #{storeCd}
                AND     BST.THE_DATE 	(+) =   #{endDate}
                AND		TMP.STORE_CD        =   BST.STORE_CD
                AND 	TMP.PROD_CD 	    =   BST.PROD_CD
                GROUP
                BY 		BST.STORE_CD
                ,		BST.PROD_CD
            ) C
        WHERE 	B.STORE_CD  (+) =   A.STORE_CD
        AND     B.PROD_CD   (+) =   A.PROD_CD
        AND     C.STORE_CD  (+) =   A.STORE_CD
        AND     C.PROD_CD   (+) =   A.PROD_CD
        ORDER
        BY      A.PROD_CD
        <include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <!-- 기간수불현황 - 본사 상세 조회 -->
    <!--
        TABLE    :
        PARAM    : mobilePeriodIoStockVO
        COMMENTS : 기간수불현황 - 본사 상세 조회
    -->
    <select id="getPeriodIoStockProdDtlList" parameterType="mobilePeriodIoStockVO" resultType="DefaultMap">
        /* USE : MobilePeriodIoStockMapper.getPeriodIoStockProdDtlList */
        <include refid="CmmSQL.PagingTemplateHeader"/>
        SELECT IOSTOCK_DATE AS IO_OCCR_DT
        , SF_ZERO_TO_NULL(SUM(VENDR_IN_QTY)) AS IO_OCCR_QTY_01 /* 본사입고 수량*/
        , SF_ZERO_TO_NULL(SUM(VENDR_IN_TOT)) AS IO_OCCR_TOT_01 /* 본사입고 금액*/
        , SF_ZERO_TO_NULL(SUM(VENDR_OUT_QTY)) AS IO_OCCR_QTY_16 /* 업체반출 수량*/
        , SF_ZERO_TO_NULL(SUM(VENDR_OUT_TOT)) AS IO_OCCR_TOT_16 /* 업체반출 금액*/
        , SF_ZERO_TO_NULL(SUM(HQ_OUT_QTY)) AS IO_OCCR_QTY_13 /* 본사출고 수량*/
        , SF_ZERO_TO_NULL(SUM(HQ_OUT_TOT)) AS IO_OCCR_TOT_13 /* 본사출고 금액*/
        , SF_ZERO_TO_NULL(SUM(HQ_IN_QTY)) AS IO_OCCR_QTY_02 /* 본사반입 수량*/
        , SF_ZERO_TO_NULL(SUM(HQ_IN_TOT)) AS IO_OCCR_TOT_02 /* 본사반입 금액*/
        , SF_ZERO_TO_NULL(SUM(STORE_MOVE_IN_QTY)) AS IO_OCCR_QTY_04 /* 매장이입 수량*/
        , SF_ZERO_TO_NULL(SUM(STORE_MOVE_IN_TOT)) AS IO_OCCR_TOT_04 /* 매장이입 금액*/
        , SF_ZERO_TO_NULL(SUM(STORE_MOVE_OUT_QTY)) AS IO_OCCR_QTY_14 /* 매장이출 수량*/
        , SF_ZERO_TO_NULL(SUM(STORE_MOVE_OUT_TOT)) AS IO_OCCR_TOT_14 /* 매장이출 금액*/
        , SF_ZERO_TO_NULL(SUM(DISUSE_QTY)) AS IO_OCCR_QTY_17 /* 재고폐기 수량*/
        -- 		     , SF_ZERO_TO_NULL(SUM()) AS IO_OCCR_TOT_17 /* 재고폐기 금액*/
        , SF_ZERO_TO_NULL(SUM(ADJ_QTY)) AS IO_OCCR_QTY_21 /* 재고조정 수량*/
        -- 		     , SF_ZERO_TO_NULL(SUM()) AS IO_OCCR_TOT_21 /* 재고조정 금액*/
        , SF_ZERO_TO_NULL(SUM(SET_IN_QTY)) AS IO_OCCR_QTY_22 /* 세트생성 수량*/
        -- 		     , SF_ZERO_TO_NULL(SUM()) AS IO_OCCR_TOT_22 /* 세트생성 금액*/
        , SF_ZERO_TO_NULL(SUM(SALE_VENDR_ORDER_QTY)) AS IO_OCCR_QTY_19 /* 거래처출고 수량*/
        , SF_ZERO_TO_NULL(SUM(SALE_VENDR_ORDER_TOT)) AS IO_OCCR_TOT_19 /* 거래처출고 금액*/
        , SF_ZERO_TO_NULL(SUM(SALE_VENDR_RTN_QTY)) AS IO_OCCR_QTY_33 /* 거래처반품 수량*/
        , SF_ZERO_TO_NULL(SUM(SALE_VENDR_RTN_TOT)) AS IO_OCCR_TOT_33 /* 거래처반품 금액*/
        <include refid="CmmSQL.PagingTemplateCount"/>
        FROM TB_ST_HQ_STOCK_DAILY TSHSD
        WHERE TPHS.HQ_OFFICE_CD = #{hqOfficeCd}
        <!-- !!!!!!!!!!!!!!!!!!! 날짜랑 상품코드 조건은 '업무쿼리'에 없었는데 직접 추가함. 물어보고 빼든지 말든지 하기!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
        AND IOSTOCK_DATE BETWEEN #{startDate} AND #{endDate}
        AND PROD_CD = #{prodCd}
        GROUP BY IOSTOCK_DATE
        ORDER BY IOSTOCK_DATE DESC
        <include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <!-- 기간수불현황 - 매장 상세 조회 -->
    <!--
        TABLE    :
        PARAM    : mobilePeriodIoStockVO
        COMMENTS : 기간수불현황 - 매장 상세 조회
    -->
    <select id="getPeriodIoStockProdStoreDtlList" parameterType="mobilePeriodIoStockVO" resultType="DefaultMap">
        /* USE : MobilePeriodIoStockMapper.getPeriodIoStockProdStoreDtlList */
        <include refid="CmmSQL.PagingTemplateHeader"/>
        SELECT TSSSD.IOSTOCK_DATE AS IO_OCCR_DT
        , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_IN_QTY)) AS IO_OCCR_QTY_03 /* 매장입고 수량*/
        , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_IN_TOT)) AS IO_OCCR_TOT_03 /* 매장입고 금액*/
        , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_OUT_QTY)) AS IO_OCCR_QTY_12 /* 매장반품 수량*/
        , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_OUT_TOT)) AS IO_OCCR_TOT_12 /* 매장반품 금액*/
        , SF_ZERO_TO_NULL(SUM(TSSSD.PURCHS_IN_QTY)) AS IO_OCCR_QTY_06 /* 사입입고 수량*/
        , SF_ZERO_TO_NULL(SUM(TSSSD.PURCHS_IN_TOT)) AS IO_OCCR_TOT_06 /* 사입입고 금액*/
        , SF_ZERO_TO_NULL(SUM(TSSSD.PURCHS_OUT_QTY)) AS IO_OCCR_QTY_18 /* 사입반품 수량*/
        , SF_ZERO_TO_NULL(SUM(TSSSD.PURCHS_OUT_TOT)) AS IO_OCCR_TOT_18 /* 사입반품 금액*/
        , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_SALE_QTY)) AS IO_OCCR_QTY_11 /* 매장판매 수량*/
        , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_SALE_TOT)) AS IO_OCCR_TOT_11 /* 매장판매 금액*/
        , SF_ZERO_TO_NULL(SUM(TSSSD.MOVE_IN_QTY)) AS IO_OCCR_QTY_04 /* 매장이입 수량*/
        , SF_ZERO_TO_NULL(SUM(TSSSD.MOVE_IN_TOT)) AS IO_OCCR_TOT_04 /* 매장이입 금액*/
        , SF_ZERO_TO_NULL(SUM(TSSSD.MOVE_OUT_QTY)) AS IO_OCCR_QTY_14 /* 매장이출 수량*/
        , SF_ZERO_TO_NULL(SUM(TSSSD.MOVE_OUT_TOT)) AS IO_OCCR_TOT_14 /* 매장이출 금액*/
        , SF_ZERO_TO_NULL(SUM(TSSSD.DISUSE_QTY)) AS IO_OCCR_QTY_17 /* 재고폐기 수량*/
        -- 		     , SF_ZERO_TO_NULL(SUM()) AS IO_OCCR_TOT_17 /* 재고폐기 금액*/
        , SF_ZERO_TO_NULL(SUM(TSSSD.ADJ_QTY)) AS IO_OCCR_QTY_21 /* 재고조정 수량*/
        -- 		     , SF_ZERO_TO_NULL(SUM()) AS IO_OCCR_TOT_21 /* 재고조정 금액*/
        , SF_ZERO_TO_NULL(SUM(TSSSD.SET_IN_QTY)) AS IO_OCCR_QTY_22 /* 세트생성 수량*/
        -- 		     , SF_ZERO_TO_NULL(SUM()) AS IO_OCCR_TOT_22 /* 세트생성 금액*/
        <include refid="CmmSQL.PagingTemplateCount"/>
        FROM TB_ST_STORE_STOCK_DAILY TSSSD
        WHERE TSSSD.STORE_CD 	= #{storeCd}
        <!-- !!!!!!!!!!!!!!!!!!! 날짜랑 상품코드 조건은 '업무쿼리'에 없었는데 직접 추가함. 물어보고 빼든지 말든지 하기!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
        AND TSSSD.IOSTOCK_DATE BETWEEN #{startDate} AND #{endDate}
        AND TSSSD.PROD_CD = #{prodCd}
        GROUP BY TSSSD.IOSTOCK_DATE
        ORDER BY TSSSD.IOSTOCK_DATE DESC
        <include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <!-- 기간수불현황 - 본사 엑셀 조회 -->
    <!--
        TABLE    :
        PARAM    : mobilePeriodIoStockVO
        COMMENTS : 기간수불현황 - 본사 엑셀 조회
    -->
    <select id="getPeriodIoStockExcelList" parameterType="mobilePeriodIoStockVO" resultType="DefaultMap">
        /* USE : MobilePeriodIoStockMapper.getPeriodIoStockExcelList */
        SELECT  A.*
        ,       B.BASE_QTY
        ,       B.BASE_TOT
        ,       C.CLOSE_QTY
        ,       C.CLOSE_TOT
        FROM
            (
                SELECT  FN_GET_PROD_CLASS_CD_NM_STR(#{hqOfficeCd}, thp.PROD_CLASS_CD, 'NM_STR') AS PROD_CLASS_NM
                ,       TSHSD.PROD_CD
                ,       THP.PROD_NM
                ,       THP.PO_UNIT_QTY
                ,       THP.PO_UNIT_FG
                ,       TSHSD.HQ_OFFICE_CD
                ,       (SELECT NMCODE_NM FROM TB_HQ_NMCODE WHERE NMCODE_GRP_CD = '093' AND HQ_OFFICE_CD = #{hqOfficeCd} AND NMCODE_CD = THP.PO_UNIT_FG) AS PO_UNIT_FG_NM
                ,       THPB.BARCD_CD
                <if test='unitFg == "1"'>
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.VENDR_IN_QTY / THP.PO_UNIT_QTY)) AS VENDR_IN_QTY /* 업체반입 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.VENDR_OUT_QTY / THP.PO_UNIT_QTY)) AS VENDR_OUT_QTY /* 업체반출 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.HQ_IN_QTY / THP.PO_UNIT_QTY)) AS HQ_IN_QTY /* 본사반입 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.HQ_OUT_QTY / THP.PO_UNIT_QTY)) AS HQ_OUT_QTY /* 본사출고 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.STORE_MOVE_IN_QTY / THP.PO_UNIT_QTY)) AS STORE_MOVE_IN_QTY /* 매장이출 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.STORE_MOVE_OUT_QTY / THP.PO_UNIT_QTY)) AS STORE_MOVE_OUT_QTY /* 매장출고 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.DISUSE_QTY / THP.PO_UNIT_QTY)) AS DISUSE_QTY /* 재고폐기 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.ADJ_QTY / THP.PO_UNIT_QTY)) AS ADJ_QTY /* 재고조정 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.SET_IN_QTY / THP.PO_UNIT_QTY)) AS SET_IN_QTY /* 세트생성 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.SALE_VENDR_ORDER_QTY / THP.PO_UNIT_QTY)) AS SALE_VENDR_ORDER_QTY /* 거래처출고 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.SALE_VENDR_RTN_QTY / THP.PO_UNIT_QTY)) AS SALE_VENDR_RTN_QTY /* 거래처반품 수량*/
                </if>
                <if test='unitFg == "0"'>
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.VENDR_IN_QTY )) AS VENDR_IN_QTY /* 업체반입 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.VENDR_OUT_QTY )) AS VENDR_OUT_QTY /* 업체반출 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.HQ_IN_QTY )) AS HQ_IN_QTY /* 본사반입 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.HQ_OUT_QTY )) AS HQ_OUT_QTY /* 본사출고 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.STORE_MOVE_IN_QTY )) AS STORE_MOVE_IN_QTY /* 매장이출 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.STORE_MOVE_OUT_QTY )) AS STORE_MOVE_OUT_QTY /* 매장출고 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.DISUSE_QTY )) AS DISUSE_QTY /* 재고폐기 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.ADJ_QTY )) AS ADJ_QTY /* 재고조정 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.SET_IN_QTY )) AS SET_IN_QTY /* 세트생성 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.SALE_VENDR_ORDER_QTY )) AS SALE_VENDR_ORDER_QTY /* 거래처출고 수량*/
                    ,   SF_ZERO_TO_NULL(SUM(TSHSD.SALE_VENDR_RTN_QTY )) AS SALE_VENDR_RTN_QTY /* 거래처반품 수량*/
                </if>
                ,       SF_ZERO_TO_NULL(SUM(TSHSD.VENDR_IN_TOT )) AS VENDR_IN_TOT /* 본사입고 금액*/
                ,       SF_ZERO_TO_NULL(SUM(TSHSD.VENDR_OUT_TOT )) AS VENDR_OUT_TOT /* 업체반출 금액*/
                ,       SF_ZERO_TO_NULL(SUM(TSHSD.HQ_OUT_TOT )) AS HQ_OUT_TOT /* 본사출고 금액*/
                ,       SF_ZERO_TO_NULL(SUM(TSHSD.HQ_IN_TOT )) AS HQ_IN_TOT /* 본사반입 금액*/
                ,       SF_ZERO_TO_NULL(SUM(TSHSD.STORE_MOVE_IN_TOT )) AS STORE_MOVE_IN_TOT /* 매장이입 금액*/
                ,       SF_ZERO_TO_NULL(SUM(TSHSD.STORE_MOVE_OUT_TOT )) AS STORE_MOVE_OUT_TOT /* 매장이출 금액*/
                ,       SF_ZERO_TO_NULL(SUM(TSHSD.SALE_VENDR_ORDER_TOT )) AS SALE_VENDR_ORDER_TOT /* 거래처출고 금액*/
                ,       SF_ZERO_TO_NULL(SUM(TSHSD.SALE_VENDR_RTN_TOT )) AS SALE_VENDR_RTN_TOT /* 거래처반품 금액*/
                ,       #{startDate} AS START_DATE
                ,       #{endDate} AS END_DATE
                FROM    TB_ST_HQ_STOCK_DAILY TSHSD
                ,       TB_HQ_PRODUCT THP
                ,       TB_HQ_PRODUCT_BARCD THPB
                WHERE   TSHSD.HQ_OFFICE_CD  = #{hqOfficeCd}
                AND     THP.STOCK_PROD_YN   = 'Y'
                AND     THP.USE_YN          = 'Y'
                AND     TSHSD.HQ_OFFICE_CD  = THP.HQ_OFFICE_CD
                AND     TSHSD.PROD_CD       = THP.PROD_CD
                AND     TSHSD.HQ_OFFICE_CD  = THPB.HQ_OFFICE_CD(+)
                AND     TSHSD.PROD_CD       = THPB.PROD_CD(+)
                <if test="startDate != '' and startDate != null and endDate != '' and endDate != null">
                    AND TSHSD.IOSTOCK_DATE BETWEEN #{startDate} AND #{endDate}
                </if>
                <if test="prodCd != null and prodCd != ''">
                    AND THP.PROD_CD = #{prodCd}
                </if>
                <if test="prodNm != null and prodNm != ''">
                    AND THP.PROD_NM LIKE '%'||#{prodNm}||'%'
                </if>
                <if test="barcdCd != null and barcdCd != ''">
                    AND THPB.BARCD_CD = #{barcdCd}
                </if>
                <if test='prodClassCd != null and prodClassCd != ""'>
                    AND THP.PROD_CLASS_CD IN    (
                    SELECT  PROD_CLASS_CD
                    FROM    TB_HQ_PRODUCT_CLASS
                    WHERE   HQ_OFFICE_CD = #{hqOfficeCd}
                    START
                    WITH    PROD_CLASS_CD = #{prodClassCd}
                    AND     HQ_OFFICE_CD = #{hqOfficeCd}
                    CONNECT BY
                    PRIOR   PROD_CLASS_CD = P_PROD_CLASS_CD
                    AND     HQ_OFFICE_CD = #{hqOfficeCd}
                    )
                </if>
                <if test='arrVendrCd != null and arrVendrCd != ""'>
                    AND thp.PROD_CD IN  (
                    SELECT  PROD_CD
                    FROM    TB_HQ_VENDOR_PROD
                    WHERE   HQ_OFFICE_CD = #{hqOfficeCd}
                    AND     VENDR_CD IN
                    <foreach collection="arrVendrCd" item="item" open="(" close=")" separator=",">
                        #{item}
                    </foreach>
                    )
                </if>
                GROUP
                BY      THP.PROD_CLASS_CD
                ,       TSHSD.PROD_CD
                ,       THP.PROD_NM
                ,       THP.PO_UNIT_QTY
                ,       THP.PO_UNIT_FG
                ,       THPB.BARCD_CD
                ,       TSHSD.HQ_OFFICE_CD
            ) A
        ,	(
                SELECT 	AST.HQ_OFFICE_CD
                ,		AST.PROD_CD
                <if test='unitFg == "1"'>
                    ,   SF_ZERO_TO_NULL(SUM(AST.DATE_QTY / TMP.PO_UNIT_QTY))             AS BASE_QTY /* 기초재고수량 */
                    ,   SF_ZERO_TO_NULL(SUM(AST.AVG_COST_UPRC))                          AS BASE_TOT /* 기초재고금액 */
                </if>
                <if test='unitFg == "0"'>
                    ,	SF_ZERO_TO_NULL(SUM(AST.DATE_QTY))                               AS BASE_QTY /* 기초재고수량 */
                    , 	SF_ZERO_TO_NULL(SUM(AST.AVG_COST_UPRC))                          AS BASE_TOT /* 기초재고금액 */
                </if>
                FROM 	TB_ST_HQ_STOCK_CUR_DATE_V01 AST
                ,		TB_HQ_PRODUCT THP
                WHERE	AST.HQ_OFFICE_CD    =   #{hqOfficeCd}
                AND     AST.THE_DATE 	(+) =   TO_CHAR(TO_DATE(#{startDate}, 'YYYYMMDD')-1, 'YYYYMMDD')
                AND		THP.HQ_OFFICE_CD    =   AST.HQ_OFFICE_CD
                AND 	THP.PROD_CD 	    =   AST.PROD_CD
                GROUP
                BY 		AST.HQ_OFFICE_CD
                ,		AST.PROD_CD
            ) B
        ,   (
                SELECT 	BST.HQ_OFFICE_CD
                ,		BST.PROD_CD
                <if test='unitFg == "1"'>
                    ,   SF_ZERO_TO_NULL(SUM(BST.DATE_QTY / TMP.PO_UNIT_QTY))             AS CLOSE_QTY /* 기초재고수량 */
                    ,   SF_ZERO_TO_NULL(SUM(BST.AVG_COST_UPRC))                          AS CLOSE_TOT /* 기초재고금액 */
                </if>
                <if test='unitFg == "0"'>
                    ,	SF_ZERO_TO_NULL(SUM(BST.DATE_QTY))                               AS CLOSE_QTY /* 기초재고수량 */
                    , 	SF_ZERO_TO_NULL(SUM(BST.AVG_COST_UPRC))                          AS CLOSE_TOT /* 기초재고금액 */
                </if>
                FROM 	TB_ST_HQ_STOCK_CUR_DATE_V01 BST
                ,		TB_HQ_PRODUCT THP
                WHERE	BST.HQ_OFFICE_CD    =   #{hqOfficeCd}
                AND     BST.THE_DATE 	(+) =   #{endDate}
                AND		THP.HQ_OFFICE_CD    =   BST.HQ_OFFICE_CD
                AND 	THP.PROD_CD 	    =   BST.PROD_CD
                GROUP
                BY 		BST.HQ_OFFICE_CD
                ,		BST.PROD_CD
            ) C
        WHERE 	B.HQ_OFFICE_CD  (+) =   A.HQ_OFFICE_CD
        AND     B.PROD_CD       (+) =   A.PROD_CD
        AND     C.HQ_OFFICE_CD  (+) =   A.HQ_OFFICE_CD
        AND     C.PROD_CD       (+) =   A.PROD_CD
        ORDER
        BY      A.PROD_CD
    </select>

    <!-- 기간수불현황 - 매장 엑셀 조회 -->
    <!--
        TABLE    :
        PARAM    : mobilePeriodIoStockVO
        COMMENTS : 기간수불현황 - 매장 엑셀 조회
    -->
    <select id="getPeriodIoStockStoreExcelList" parameterType="mobilePeriodIoStockVO" resultType="DefaultMap">
        /* USE : MobilePeriodIoStockMapper.getPeriodIoStockStoreExcelList */
        SELECT  A.*
        ,       B.BASE_QTY
        ,       B.BASE_TOT
        ,       C.CLOSE_QTY
        ,       C.CLOSE_TOT
        FROM
            (
                SELECT  FN_GET_PROD_CLASS_CD_NM_STR(#{storeCd}, TMP.PROD_CLASS_CD, 'NM_STR') AS PROD_CLASS_NM
                ,       TSSSD.PROD_CD
                ,       TMP.PROD_NM
                ,       TMP.PO_UNIT_QTY
                ,       TMP.PO_UNIT_FG
                ,       (SELECT NMCODE_NM FROM TB_MS_STORE_NMCODE WHERE NMCODE_GRP_CD = '093' AND STORE_CD = #{storeCd} AND NMCODE_CD = TMP.PO_UNIT_FG) AS PO_UNIT_FG_NM
                ,       TMPB.BARCD_CD
                ,       TSSSD.STORE_CD
                <if test='unitFg == "1"'>
                    , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_IN_QTY	/ TMP.PO_UNIT_QTY))     AS STORE_IN_QTY /* 매장입고 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_OUT_QTY	/ TMP.PO_UNIT_QTY))     AS STORE_OUT_QTY /* 매장반품 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.PURCHS_IN_QTY	/ TMP.PO_UNIT_QTY))     AS PURCHS_IN_QTY /* 사입입고 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.PURCHS_OUT_QTY	/ TMP.PO_UNIT_QTY))     AS PURCHS_OUT_QTY /* 사입반품 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_SALE_QTY	/ TMP.PO_UNIT_QTY))     AS STORE_SALE_QTY /* 매장판매 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.MOVE_IN_QTY	/ TMP.PO_UNIT_QTY))         AS MOVE_IN_QTY /* 매장이입 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.MOVE_OUT_QTY	/ TMP.PO_UNIT_QTY))     AS MOVE_OUT_QTY /* 매장이출 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.DISUSE_QTY		/ TMP.PO_UNIT_QTY))     AS DISUSE_QTY /* 재고폐기 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.ADJ_QTY		/ TMP.PO_UNIT_QTY))         AS ADJ_QTY /* 재고조정 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.SET_IN_QTY		/ TMP.PO_UNIT_QTY))     AS SET_IN_QTY /* 세트생성 수량*/
                </if>
                <if test='unitFg == "0"'>
                    , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_IN_QTY	))      AS STORE_IN_QTY /* 매장입고 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_OUT_QTY	))      AS STORE_OUT_QTY /* 매장반품 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.PURCHS_IN_QTY	))      AS PURCHS_IN_QTY /* 사입입고 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.PURCHS_OUT_QTY	))      AS PURCHS_OUT_QTY /* 사입반품 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_SALE_QTY	))      AS STORE_SALE_QTY /* 매장판매 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.MOVE_IN_QTY	))          AS MOVE_IN_QTY /* 매장이입 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.MOVE_OUT_QTY	))      AS MOVE_OUT_QTY /* 매장이출 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.DISUSE_QTY		))      AS DISUSE_QTY /* 재고폐기 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.ADJ_QTY		))          AS ADJ_QTY /* 재고조정 수량*/
                    , SF_ZERO_TO_NULL(SUM(TSSSD.SET_IN_QTY		))      AS SET_IN_QTY /* 세트생성 수량*/
                </if>
                , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_IN_TOT	))      AS STORE_IN_TOT /* 매장입고 금액*/
                , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_OUT_TOT	))      AS STORE_OUT_TOT /* 매장반품 금액*/
                , SF_ZERO_TO_NULL(SUM(TSSSD.PURCHS_IN_TOT	))      AS PURCHS_IN_TOT /* 사입입고 금액*/
                , SF_ZERO_TO_NULL(SUM(TSSSD.PURCHS_OUT_TOT	))      AS PURCHS_OUT_TOT /* 사입반품 금액*/
                , SF_ZERO_TO_NULL(SUM(TSSSD.STORE_SALE_TOT	))      AS STORE_SALE_TOT /* 매장판매 금액*/
                , SF_ZERO_TO_NULL(SUM(TSSSD.MOVE_IN_TOT	))          AS MOVE_IN_TOT /* 매장이입 금액*/
                , SF_ZERO_TO_NULL(SUM(TSSSD.MOVE_OUT_TOT	))      AS MOVE_OUT_TOT /* 매장이출 금액*/
                -- 			     , SF_ZERO_TO_NULL(SUM()) AS IO_OCCR_TOT_17 /* 재고폐기 금액*/
                -- 			     , SF_ZERO_TO_NULL(SUM()) AS IO_OCCR_TOT_21 /* 재고조정 금액*/
                -- 			     , SF_ZERO_TO_NULL(SUM()) AS IO_OCCR_TOT_22 /* 세트생성 금액*/
                , #{startDate}  AS START_DATE
                , #{endDate}    AS END_DATE
                FROM    TB_ST_STORE_STOCK_DAILY TSSSD
                ,       TB_MS_PRODUCT TMP
                ,       TB_MS_PRODUCT_BARCD TMPB
                WHERE   TSSSD.STORE_CD 	    = #{storeCd}
                AND     TMP.STOCK_PROD_YN   = 'Y'
                AND     TMP.USE_YN          = 'Y'
                AND     TSSSD.STORE_CD 	    = TMP.STORE_CD
                AND     TSSSD.PROD_CD       = TMP.PROD_CD
                AND     TSSSD.STORE_CD 	    = TMPB.STORE_CD(+)
                AND     TSSSD.PROD_CD       = TMPB.PROD_CD(+)
                <if test="startDate != '' and startDate != null and endDate != '' and endDate != null">
                    AND TSSSD.IOSTOCK_DATE BETWEEN #{startDate} AND #{endDate}
                </if>
                <if test="prodCd != null and prodCd != ''">
                    AND TMP.PROD_CD = #{prodCd}
                </if>
                <if test="prodNm != null and prodNm != ''">
                    AND TMP.PROD_NM LIKE '%'||#{prodNm}||'%'
                </if>
                <if test="barcdCd != null and barcdCd != ''">
                    AND TMPB.BARCD_CD = #{barcdCd}
                </if>
                <if test='prodClassCd != null and prodClassCd != ""'>
                    AND TMP.PROD_CLASS_CD IN    (
                    SELECT  PROD_CLASS_CD
                    FROM    TB_MS_PRODUCT_CLASS
                    WHERE   STORE_CD        = #{storeCd}
                    START
                    WITH    PROD_CLASS_CD   = #{prodClassCd}
                    AND     STORE_CD        = #{storeCd}
                    CONNECT BY
                    PRIOR   PROD_CLASS_CD   = P_PROD_CLASS_CD
                    AND     STORE_CD        = #{storeCd}
                    )
                </if>
                <if test='arrVendrCd != null and arrVendrCd != ""'>
                    AND tmp.PROD_CD IN  (
                    SELECT  PROD_CD
                    FROM    TB_HQ_VENDOR_PROD
                    WHERE   HQ_OFFICE_CD = #{hqOfficeCd}
                    AND     VENDR_CD IN
                    <foreach collection="arrVendrCd" item="item" open="(" close=")" separator=",">
                        #{item}
                    </foreach>
                    )
                </if>
                GROUP
                BY      TMP.PROD_CLASS_CD
                ,       TSSSD.PROD_CD
                ,       TMP.PROD_NM
                ,       TMP.PO_UNIT_QTY
                ,       TMP.PO_UNIT_FG
                ,       TMPB.BARCD_CD
                ,       TSSSD.STORE_CD
            ) A
        ,   (
                SELECT  AST.STORE_CD
                ,       AST.PROD_CD
                <if test='unitFg == "1"'>
                    ,   SF_ZERO_TO_NULL(SUM(AST.DATE_QTY / TMP.PO_UNIT_QTY))             AS BASE_QTY /* 기초재고수량 */
                    ,   SF_ZERO_TO_NULL(SUM(AST.AVG_COST_UPRC))                          AS BASE_TOT /* 기초재고금액 */
                </if>
                <if test='unitFg == "0"'>
                    ,	SF_ZERO_TO_NULL(SUM(AST.DATE_QTY))                               AS BASE_QTY /* 기초재고수량 */
                    , 	SF_ZERO_TO_NULL(SUM(AST.AVG_COST_UPRC))                          AS BASE_TOT /* 기초재고금액 */
                </if>
                FROM 	TB_ST_STORE_STOCK_CUR_DATE_V01 AST
                ,		TB_MS_PRODUCT TMP
                WHERE	AST.STORE_CD        =   #{storeCd}
                AND     AST.THE_DATE 	(+) =   TO_CHAR(TO_DATE(#{startDate}, 'YYYYMMDD')-1, 'YYYYMMDD')
                AND		TMP.STORE_CD        =   AST.STORE_CD
                AND 	TMP.PROD_CD 	    =   AST.PROD_CD
                GROUP
                BY 		AST.STORE_CD
                ,		AST.PROD_CD
            ) B
        ,   (
                SELECT 	BST.STORE_CD
                ,		BST.PROD_CD
                <if test='unitFg == "1"'>
                    ,   SF_ZERO_TO_NULL(SUM(BST.DATE_QTY / TMP.PO_UNIT_QTY))             AS CLOSE_QTY /* 기초재고수량 */
                    ,   SF_ZERO_TO_NULL(SUM(BST.AVG_COST_UPRC))                          AS CLOSE_TOT /* 기초재고금액 */
                </if>
                <if test='unitFg == "0"'>
                    ,	SF_ZERO_TO_NULL(SUM(BST.DATE_QTY))                               AS CLOSE_QTY /* 기초재고수량 */
                    , 	SF_ZERO_TO_NULL(SUM(BST.AVG_COST_UPRC))                          AS CLOSE_TOT /* 기초재고금액 */
                </if>
                FROM 	TB_ST_STORE_STOCK_CUR_DATE_V01 BST
                ,		TB_MS_PRODUCT TMP
                WHERE	BST.STORE_CD        =   #{storeCd}
                AND     BST.THE_DATE 	(+) =   #{endDate}
                AND		TMP.STORE_CD        =   BST.STORE_CD
                AND 	TMP.PROD_CD 	    =   BST.PROD_CD
                GROUP
                BY 		BST.STORE_CD
                ,		BST.PROD_CD
            ) C
        WHERE 	B.STORE_CD  (+) =   A.STORE_CD
        AND     B.PROD_CD   (+) =   A.PROD_CD
        AND     C.STORE_CD  (+) =   A.STORE_CD
        AND     C.PROD_CD   (+) =   A.PROD_CD
        ORDER
        BY      A.PROD_CD
    </select>

</mapper>