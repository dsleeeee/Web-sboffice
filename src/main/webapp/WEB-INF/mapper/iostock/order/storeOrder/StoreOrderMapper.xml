<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.solbipos.iostock.order.storeOrder.service.impl.StoreOrderMapper">

    <!-- 주문등록 HD 리스트 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : storeOrderVO
        COMMENTS : 주문등록 HD 리스트를 조회한다.
    -->
    <select id="getStoreOrderList" parameterType="storeOrderVO" resultType="DefaultMap">
        /* USE : storeOrderMapper.getStoreOrderList */
        <![CDATA[
        SELECT   tphso.REQ_DATE, tphso.STORE_CD
        ,        tphso.DTL_CNT, tphso.PROC_FG, tphso.REMARK
        ,        tphso.SLIP_FG, tphso.MOD_DT
        ,        tphso.ORDER_TOT_QTY*tphso.SLIP_FG AS ORDER_TOT_QTY
        ,        tphso.ORDER_AMT*tphso.SLIP_FG     AS ORDER_AMT
        ,        tphso.ORDER_VAT*tphso.SLIP_FG     AS ORDER_VAT
        ,        tphso.ORDER_TOT*tphso.SLIP_FG     AS ORDER_TOT
        ,        tphso.MD_TOT_QTY*tphso.SLIP_FG    AS MD_TOT_QTY
        ,        tphso.MD_AMT*tphso.SLIP_FG        AS MD_AMT
        ,        tphso.MD_VAT*tphso.SLIP_FG        AS MD_VAT
        ,        tphso.MD_TOT*tphso.SLIP_FG        AS MD_TOT
        FROM     TB_PO_HQ_STORE_ORDER tphso
        WHERE    tphso.STORE_CD   =   #{storeCd}
        ]]>
        <if test='dateFg == "req"'>
          AND tphso.REQ_DATE BETWEEN #{startDate} AND #{endDate}
        </if>
        <if test='dateFg == "reg"'>
            AND tphso.REG_DT BETWEEN #{startDate}||'000000' AND #{endDate}||'235959'
        </if>
        <if test='dateFg == "mod"'>
            AND tphso.MOD_DT BETWEEN #{startDate}||'000000' AND #{endDate}||'235959'
        </if>
        <if test='slipFg != null and slipFg != ""'>
            AND tphso.SLIP_FG = #{slipFg}
        </if>
        ORDER BY tphso.REQ_DATE DESC
    </select>

    <!-- 주문등록 DT 리스트 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL, TB_MS_PRODUCT, TB_HQ_ENVST
        PARAM    : storeOrderDtlVO
        COMMENTS : 주문등록 DT 리스트를 조회한다.
    -->
    <select id="getStoreOrderDtlList" parameterType="storeOrderDtlVO" resultType="DefaultMap">
        /* USE : storeOrderMapper.getStoreOrderDtlList */
        <![CDATA[
        SELECT  tphso.PROD_CD, tmp.PROD_NM, tphso.PO_UNIT_FG, tphso.PO_UNIT_QTY, tmp.PO_UNIT_ALLOW_FG
        ,       tphso.SLIP_FG, tphso.REMARK, tphso.ORDER_SPLY_UPRC, tmp.PO_MIN_QTY
        ,       DECODE(tphso.ORDER_TOT_QTY,  0, NULL, tphso.ORDER_TOT_QTY*tphso.SLIP_FG ) AS PREV_ORDER_TOT_QTY
        ,       DECODE(tphso.ORDER_UNIT_QTY, 0, NULL, tphso.ORDER_UNIT_QTY*tphso.SLIP_FG) AS ORDER_UNIT_QTY
        ,       DECODE(tphso.ORDER_ETC_QTY , 0, NULL, tphso.ORDER_ETC_QTY*tphso.SLIP_FG)  AS ORDER_ETC_QTY
        ,       tphso.ORDER_AMT*tphso.SLIP_FG AS ORDER_AMT
        ,       tphso.ORDER_VAT*tphso.SLIP_FG AS ORDER_VAT
        ,       tphso.ORDER_TOT*tphso.SLIP_FG AS ORDER_TOT
        ,       DECODE(tmp.VAT_FG, 'Y', 1, 0) AS VAT_FG01
        ,       0 AS ENVST0011
        FROM    TB_PO_HQ_STORE_ORDER_DTL tphso
        ,       TB_MS_PRODUCT tmp
        WHERE   tphso.REQ_DATE           =   #{reqDate}
        AND     tphso.STORE_CD           =   #{storeCd}
        AND     tphso.SLIP_FG            =   #{slipFg}
        AND     tmp.STORE_CD             =   tphso.STORE_CD
        AND     tmp.PROD_CD              =   tphso.PROD_CD
        ORDER
        BY      tphso.PROD_CD
        ]]>
    </select>

    <!-- 주문등록 상품추가 리스트 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL, TB_MS_PRODUCT, TB_HQ_ENVST
        PARAM    : storeOrderDtlVO
        COMMENTS : 주문등록 상품추가 리스트를 조회한다.
    -->
    <select id="getStoreOrderRegistList" parameterType="storeOrderDtlVO" resultType="DefaultMap">
        /* USE : storeOrderMapper.getStoreOrderRegistList */
        <include refid="CmmSQL.PagingTemplateHeader"/>
        <![CDATA[
        SELECT  NVL((SELECT SUBSTR(MAX(SYS_CONNECT_BY_PATH( PROD_CLASS_NM,  '|')), 2)
                       FROM TB_MS_PRODUCT_CLASS
                      WHERE STORE_CD = tmp.STORE_CD
                      START WITH PROD_CLASS_CD = tmp.PROD_CLASS_CD
                      CONNECT BY PRIOR PROD_CLASS_CD = P_PROD_CLASS_CD ),' ') AS PROD_CLASS_NM
        ,       tmp.PROD_CD
        ,       tmp.PROD_NM
        ,       DECODE(tmp.VAT_FG,'Y',1,0) AS VAT_FG01
        ,       TRUNC(DECODE(SIGN(tshsc.CURR_QTY),-1,0,tshsc.CURR_QTY) / tmp.PO_UNIT_QTY) AS HD_CUR_QTY1
        ,       MOD  (DECODE(SIGN(tshsc.CURR_QTY),-1,0,tshsc.CURR_QTY) , tmp.PO_UNIT_QTY) AS HD_CUR_QTY2
        ,       TRUNC(NVL(tsssc.CURR_QTY,0)                            / tmp.PO_UNIT_QTY) AS CUR_QTY1
        ,       MOD  (NVL(tsssc.CURR_QTY,0)                            , tmp.PO_UNIT_QTY) AS CUR_QTY2
        ,		NVL((SELECT MAX(SALE_UPRC) KEEP(DENSE_RANK FIRST ORDER BY REG_DT DESC)
                              FROM TB_MS_PRODUCT_SALE_PRICE
                             WHERE STORE_CD = tmp.STORE_CD
                               AND PROD_CD = tmp.PROD_CD
                               AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN START_DATE AND END_DATE
                            ), 0) AS SALE_UPRC
        , 		tmp.SPLY_UPRC AS ORDER_SPLY_UPRC
        ,       tmp.PO_MIN_QTY
        ,       tmp.PO_UNIT_ALLOW_FG
        ,       tmp.PO_PROD_FG
        ,       tmp.USE_YN
        ,       tmp.PO_UNIT_FG
        ,       tmp.PO_UNIT_QTY
        ,       0 AS ENVST0011
        ,       tmp.SAFE_STOCK_QTY
        ,       TRUNC(DECODE(SIGN(tmp.SAFE_STOCK_QTY),-1,0,tmp.SAFE_STOCK_QTY) / tmp.PO_UNIT_QTY) AS SAFE_STOCK_QTY1
        ,       MOD  (DECODE(SIGN(tmp.SAFE_STOCK_QTY),-1,0,tmp.SAFE_STOCK_QTY) , tmp.PO_UNIT_QTY) AS SAFE_STOCK_QTY2
        ,       DECODE(tphso.ORDER_UNIT_QTY, 0, NULL, tphso.ORDER_UNIT_QTY*tphso.SLIP_FG) AS PREV_ORDER_UNIT_QTY
        ,       DECODE(tphso.ORDER_ETC_QTY,  0, NULL, tphso.ORDER_ETC_QTY*tphso.SLIP_FG ) AS PREV_ORDER_ETC_QTY
        ,       DECODE(tphso.ORDER_TOT_QTY,  0, NULL, tphso.ORDER_TOT_QTY*tphso.SLIP_FG ) AS PREV_ORDER_TOT_QTY
        ,       DECODE(tphso.ORDER_AMT,  0, NULL, tphso.ORDER_AMT*tphso.SLIP_FG ) AS ORDER_AMT
        ,       DECODE(tphso.ORDER_VAT,  0, NULL, tphso.ORDER_VAT*tphso.SLIP_FG ) AS ORDER_VAT
        ,       DECODE(tphso.ORDER_TOT,  0, NULL, tphso.ORDER_TOT*tphso.SLIP_FG ) AS ORDER_TOT
        ]]>
        <include refid="CmmSQL.PagingTemplateCount"/>
        <![CDATA[
        FROM    TB_MS_PRODUCT tmp
        ,       TB_ST_STORE_STOCK_CUR tsssc
        ,       (   SELECT  PROD_CD, CURR_QTY
                    FROM    TB_ST_HQ_STOCK_CUR
                    WHERE   HQ_OFFICE_CD  =   #{hqOfficeCd}
                )   tshsc
        ,       TB_PO_HQ_STORE_ORDER_DTL tphso
        WHERE   tmp.STORE_CD          =   #{storeCd}
        AND     tmp.USE_YN            =   'Y'
        AND     tsssc.STORE_CD    (+) =   tmp.STORE_CD
        AND     tsssc.PROD_CD     (+) =   tmp.PROD_CD
        AND     tshsc.PROD_CD     (+) =   tmp.PROD_CD
        AND     tphso.REQ_DATE    (+) =   #{reqDate}
        AND     tphso.STORE_CD    (+) =   tmp.STORE_CD
        AND     tphso.PROD_CD     (+) =   tmp.PROD_CD
        AND     tphso.SLIP_FG     (+) =   #{slipFg}
        ]]>
        <if test='prodCd != null and prodCd != ""'>
            AND tmp.PROD_CD = #{prodCd}
        </if>
        <if test='prodNm != null and prodNm != ""'>
            AND tmp.PROD_NM LIKE '%'||#{prodNm}||'%'
        </if>
        <include refid="CmmSQL.PagingTemplateBottom"/>
    </select>

    <!-- 주문등록 요청일의 상품건수 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : storeOrderDtlVO
        COMMENTS : 주문등록 요청일의 상품건수 조회한다.
    -->
    <select id="getDtlCnt" parameterType="storeOrderVO" resultType="Integer">
        /* USE : storeOrderMapper.getDtlCnt */
        SELECT  COUNT(tphsod.PROD_CD) AS DTL_CNT
        FROM    TB_PO_HQ_STORE_ORDER_DTL tphsod
        WHERE   tphsod.REQ_DATE    = #{reqDate}
        AND     tphsod.STORE_CD    = #{storeCd}
        AND     tphsod.SLIP_FG     = #{slipFg}
    </select>

    <!-- 주문등록 요청일의 HD 내용이 존재하는지 여부 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : storeOrderDtlVO
        COMMENTS : 주문등록 요청일의 HD 내용이 존재하는지 여부 조회한다.
    -->
    <select id="getHdExist" parameterType="storeOrderVO" resultType="String">
        /* USE : storeOrderMapper.getHdExist */
        SELECT  DECODE(COUNT(*), 0, 'N', 'Y') AS IS_EXIST
        FROM    TB_PO_HQ_STORE_ORDER tphso
        WHERE   tphso.REQ_DATE    = #{reqDate}
        AND     tphso.STORE_CD    = #{storeCd}
        AND     tphso.SLIP_FG     = #{slipFg}
    </select>

    <!-- 주문등록 매장마감 여부 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_CLOSE
        PARAM    : storeOrderVO
        COMMENTS : 주문등록 매장마감 여부를 조회한다.
    -->
    <select id="getStoreCloseCheck" parameterType="storeOrderVO" resultType="DefaultMap">
        /* USE : storeOrderMapper.getStoreCloseCheck */
        SELECT  tphsc.ORDER_CLOSE_FG
        FROM    TB_PO_HQ_STORE_CLOSE tphsc
        WHERE   tphsc.HQ_OFFICE_CD  = #{hqOfficeCd}
        AND     tphsc.CLOSE_DATE    = #{reqDate}
    </select>

    <!-- 주문등록 주문진행구분 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : storeOrderVO
        COMMENTS : 주문등록 주문진행구분을 조회한다.
    -->
    <select id="getOrderProcFgCheck" parameterType="storeOrderVO" resultType="DefaultMap">
        /* USE : storeOrderMapper.getOrderProcFgCheck */
        SELECT  PROC_FG
        FROM    TB_PO_HQ_STORE_ORDER tphso
        WHERE   tphso.REQ_DATE    = #{reqDate}
        AND     tphso.STORE_CD    = #{storeCd}
        AND     tphso.SLIP_FG     = #{slipFg}
    </select>

    <!-- 매장여신 조회 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_LOAN
        PARAM    : storeOrderVO
        COMMENTS : 매장여신을 내역을 조회한다.
    -->
    <select id="getStoreLoan" parameterType="storeOrderVO" resultType="DefaultMap">
        /* USE : storeOrderMapper.getStoreLoan */
        <![CDATA[
        SELECT  NVL(tphso.PREV_ORDER_TOT, 0) AS PREV_ORDER_TOT
        ,       tphsl.LIMIT_LOAN_AMT, tphsl.CURR_LOAN_AMT, tphsl.MAX_ORDER_AMT
        ,       tphsl.AVAILABLE_ORDER_AMT, tphsl.NO_OUTSTOCK_AMT_FG, tphsl.ORDER_CLOSE_YN
        FROM    (   SELECT  SUM(tphso.ORDER_TOT) AS PREV_ORDER_TOT
                    FROM    TB_PO_HQ_STORE_ORDER tphso
                    WHERE   STORE_CD  =   #{storeCd}
                    AND     REQ_DATE  !=  #{reqDate}
                    AND     PROC_FG   IN  ('0','1')
                ) tphso
        ,       (   SELECT  NVL(tphsl.LIMIT_LOAN_AMT, 0) AS LIMIT_LOAN_AMT, tphsl.CURR_LOAN_AMT
                    ,       NVL(tphsl.MAX_ORDER_AMT, 0) AS MAX_ORDER_AMT, NVL(tphsl.NO_OUTSTOCK_AMT_FG, 'N') AS NO_OUTSTOCK_AMT_FG
                    ,       NVL(tphsl.ORDER_CLOSE_YN, 'N') AS ORDER_CLOSE_YN
                    ,       DECODE(tphsl.ORDER_FG
                                  ,'1'
                                  ,DECODE(SIGN(tphsl.CURR_LOAN_AMT)
                                         ,1
                                         ,DECODE(tphsl.MAX_ORDER_AMT
                                                ,NULL
                                                ,tphsl.CURR_LOAN_AMT
                                                ,DECODE(SIGN(tphsl.CURR_LOAN_AMT-tphsl.MAX_ORDER_AMT)
                                                       ,1
                                                       ,tphsl.MAX_ORDER_AMT
                                                       ,tphsl.CURR_LOAN_AMT
                                                       )
                                                )
                                         ,0
                                         )
                                  ,'2'
                                  ,DECODE(SIGN(tphsl.CURR_LOAN_AMT)
                                         ,1
                                         ,DECODE(tphsl.MAX_ORDER_AMT
                                                ,NULL
                                                ,tphsl.LIMIT_LOAN_AMT+tphsl.CURR_LOAN_AMT
                                                ,DECODE(SIGN(tphsl.LIMIT_LOAN_AMT+tphsl.CURR_LOAN_AMT-tphsl.MAX_ORDER_AMT)
                                                       ,1
                                                       ,tphsl.MAX_ORDER_AMT
                                                       ,tphsl.LIMIT_LOAN_AMT+tphsl.CURR_LOAN_AMT
                                                       )
                                                )
                                         ,0
                                         )
                                  ,'3'
                                  ,DECODE(SIGN(tphsl.CURR_LOAN_AMT)
                                         ,1
                                         ,tphsl.MAX_ORDER_AMT
                                         ,0
                                         )
                                  ) AS AVAILABLE_ORDER_AMT
                    FROM    TB_PO_HQ_STORE_LOAN tphsl
                    WHERE   tphsl.HQ_OFFICE_CD  =   #{hqOfficeCd}
                    AND     tphsl.STORE_CD      =   #{storeCd}
                ) tphsl
        ]]>
    </select>

    <!-- 주문등록 주문상품 DTL 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : storeOrderDtlVO
        COMMENTS : 주문등록 주문상품 DTL을 등록한다.
    -->
    <insert id="insertStoreOrderDtl" parameterType="storeOrderDtlVO">
        /* USE : storeOrderMapper.insertStoreOrderDtl */
        INSERT INTO TB_PO_HQ_STORE_ORDER_DTL
        (
            REQ_DATE,
            STORE_CD,
            SLIP_FG,
            HQ_BRAND_CD,
            PROD_CD,
            PO_UNIT_FG,
            PO_UNIT_QTY,
            ORDER_SPLY_UPRC,
            ORDER_UNIT_QTY,
            ORDER_ETC_QTY,
            ORDER_TOT_QTY,
            ORDER_AMT,
            ORDER_VAT,
            ORDER_TOT,
            REMARK,
            REG_DT,
            REG_ID,
            MOD_DT,
            MOD_ID
        )
        VALUES
        (
            #{reqDate},
            #{storeCd},
            #{slipFg},
            #{hqBrandCd},
            #{prodCd},
            #{poUnitFg},
            #{poUnitQty},
            #{orderSplyUprc},
            #{orderUnitQty},
            #{orderEtcQty},
            #{orderTotQty},
            #{orderAmt},
            #{orderVat},
            #{orderTot},
            #{remark},
            #{regDt},
            #{regId},
            #{modDt},
            #{modId}
        )
    </insert>

    <!-- 주문등록 주문상품 DTL 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : storeOrderDtlVO
        COMMENTS : 주문등록 주문상품 DTL을 수정한다.
    -->
    <update id="updateStoreOrderDtl" parameterType="storeOrderDtlVO">
        /* USE : storeOrderMapper.updateStoreOrderDtl */
        UPDATE  TB_PO_HQ_STORE_ORDER_DTL
        SET     PO_UNIT_FG         = #{poUnitFg},
                PO_UNIT_QTY        = #{poUnitQty},
                ORDER_SPLY_UPRC    = #{orderSplyUprc},
                ORDER_UNIT_QTY     = #{orderUnitQty},
                ORDER_ETC_QTY      = #{orderEtcQty},
                ORDER_TOT_QTY      = #{orderTotQty},
                ORDER_AMT          = #{orderAmt},
                ORDER_VAT          = #{orderVat},
                ORDER_TOT          = #{orderTot},
                REMARK             = #{remark},
                MOD_DT             = #{modDt},
                MOD_ID             = #{modId}
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = #{slipFg}
        AND     PROD_CD     = #{prodCd}
    </update>

    <!-- 주문등록 주문상품 DTL 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER_DTL
        PARAM    : storeOrderDtlVO
        COMMENTS : 주문등록 주문상품 DTL을 삭제한다.
    -->
    <delete id="deleteStoreOrderDtl" parameterType="storeOrderDtlVO">
        /* USE : storeOrderMapper.deleteStoreOrderDtl */
        DELETE  TB_PO_HQ_STORE_ORDER_DTL
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = #{slipFg}
        AND     PROD_CD     = #{prodCd}
    </delete>

    <!-- 주문등록 주문상품 HD 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : storeOrderVO
        COMMENTS : 주문등록 주문상품 HD를 등록한다.
    -->
    <insert id="insertStoreOrder" parameterType="storeOrderVO">
        /* USE : storeOrderMapper.insertStoreOrder */
        INSERT INTO TB_PO_HQ_STORE_ORDER
        (
            REQ_DATE,
            STORE_CD,
            EMP_NO,
            SLIP_FG,
            ORDER_UNIT_QTY,
            ORDER_ETC_QTY,
            ORDER_TOT_QTY,
            ORDER_AMT,
            ORDER_VAT,
            ORDER_TOT,
            DTL_CNT,
            PROC_FG,
            MD_UNIT_QTY,
            MD_ETC_QTY,
            MD_TOT_QTY,
            MD_AMT,
            MD_VAT,
            MD_TOT,
            REMARK,
            REG_DT,
            REG_ID,
            MOD_DT,
            MOD_ID
        )
        SELECT  tphsod.REQ_DATE
        ,       tphsod.STORE_CD
        ,       '0000'
        ,       tphsod.SLIP_FG
        ,       SUM(tphsod.ORDER_UNIT_QTY)
        ,       SUM(tphsod.ORDER_ETC_QTY)
        ,       SUM(tphsod.ORDER_TOT_QTY)
        ,       SUM(tphsod.ORDER_AMT)
        ,       SUM(tphsod.ORDER_VAT)
        ,       SUM(tphsod.ORDER_TOT)
        ,       COUNT(tphsod.PROD_CD)
        ,       '0'
        ,       0
        ,       0
        ,       0
        ,       0
        ,       0
        ,       0
        ,       #{remark}
        ,       #{regDt}
        ,       #{regId}
        ,       #{modDt}
        ,       #{modId}
        FROM    TB_PO_HQ_STORE_ORDER_DTL tphsod
        WHERE   tphsod.REQ_DATE  = #{reqDate}
        AND     tphsod.STORE_CD  = #{storeCd}
        AND     tphsod.SLIP_FG   = #{slipFg}
        GROUP
        BY      tphsod.REQ_DATE
        ,       tphsod.STORE_CD
        ,       tphsod.SLIP_FG
    </insert>

    <!-- 주문등록 주문상품 HD 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : storeOrderVO
        COMMENTS : 주문등록 주문상품 HD를 수정한다.
    -->
    <update id="updateStoreOrder" parameterType="storeOrderVO">
        /* USE : storeOrderMapper.updateStoreOrder */
        UPDATE  TB_PO_HQ_STORE_ORDER
        SET     (ORDER_UNIT_QTY, ORDER_ETC_QTY, ORDER_TOT_QTY
                ,ORDER_AMT, ORDER_VAT, ORDER_TOT
                ,MD_UNIT_QTY, MD_ETC_QTY, MD_TOT_QTY
                ,MD_AMT, MD_VAT, MD_TOT
                ,DTL_CNT)
            =   (SELECT  NVL(SUM(tphsod.ORDER_UNIT_QTY), 0), NVL(SUM(tphsod.ORDER_ETC_QTY), 0), NVL(SUM(tphsod.ORDER_TOT_QTY), 0)
                ,        NVL(SUM(tphsod.ORDER_AMT), 0), NVL(SUM(tphsod.ORDER_VAT), 0), NVL(SUM(tphsod.ORDER_TOT), 0)
                ,        NVL(SUM(tphsod.MD_UNIT_QTY), 0), NVL(SUM(tphsod.MD_ETC_QTY), 0), NVL(SUM(tphsod.MD_TOT_QTY), 0)
                ,        NVL(SUM(tphsod.MD_AMT), 0), NVL(SUM(tphsod.MD_VAT), 0), NVL(SUM(tphsod.MD_TOT), 0)
                ,        COUNT(tphsod.PROD_CD)
                FROM    TB_PO_HQ_STORE_ORDER_DTL tphsod
                WHERE   tphsod.REQ_DATE  = #{reqDate}
                AND     tphsod.STORE_CD  = #{storeCd}
                AND     tphsod.SLIP_FG   = #{slipFg}
                )
        ,       PROC_FG = #{procFg}
        ,       REMARK  = #{remark}
        ,       MOD_DT  = #{modDt}
        ,       MOD_ID  = #{modId}
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = #{slipFg}
    </update>

    <!-- 주문등록 주문상품 HD 저장 -->
    <!--
        TABLE    : TB_PO_HQ_STORE_ORDER
        PARAM    : storeOrderVO
        COMMENTS : 주문등록 주문상품 HD를 삭제한다.
    -->
    <delete id="deleteStoreOrder" parameterType="storeOrderVO">
        /* USE : storeOrderMapper.deleteStoreOrder */
        DELETE  TB_PO_HQ_STORE_ORDER
        WHERE   REQ_DATE    = #{reqDate}
        AND     STORE_CD    = #{storeCd}
        AND     SLIP_FG     = #{slipFg}
    </delete>

</mapper>
