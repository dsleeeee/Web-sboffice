<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    Prod.xml
    상품관리 sql
    ======================================================
    No  ||  수정자 ||  수정일자    ||  수정내역
    ======================================================
    1       노현수     2018.10.19     쿼리수정
-->
<mapper namespace="kr.co.solbipos.base.prod.prod.service.impl.ProdMapper">

    <!-- 상품 조회 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_HQ_PRODUCT_SALE_PRICE,
                   TB_MS_PRODUCT, TB_MS_PRODUCT_SALE_PRICE
        PARAM    : prodVO
        COMMENTS : 상품의 목록을 조회한다. ( 본사/매장 )
    -->
    <select id="getProdList" parameterType="prodVO" resultType="DefaultMap">
        /* USE : ProdMapper.getProdList */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                <include refid="CmmSQL.PagingTemplateHeader"/>
                SELECT
                thp.HQ_OFFICE_CD,
                thp.PROD_CD,
                thp.PROD_NM,
                thp.HQ_BRAND_CD,
                thb.HQ_BRAND_NM,
                thp.PROD_CLASS_CD,
                ( SELECT SF_GET_PROD_CLASSES('H', thp.HQ_OFFICE_CD, thp.PROD_CLASS_CD) FROM DUAL ) AS PROD_CLASS_NM,
                NVL(thp.COST_UPRC, 0) COST_UPRC,
                NVL(thp.SPLY_UPRC, 0) SPLY_UPRC,
                NVL(thpsp.SALE_UPRC, 0) AS SALE_UPRC, -- 판매단가
                thp.ORGPLCE_CD, -- TODO 원산지명 조회 필요
                thp.SIDE_PROD_YN,
                thp.SDATTR_CLASS_CD,
                thp.SDSEL_GRP_CD,
                thp.PO_UNIT_FG,
                thp.REG_DT,
                thp.USE_YN,
                (SELECT COUNT(thps.STORE_CD) FROM TB_HQ_PRODUCT_STORE thps WHERE thps.HQ_OFFICE_CD = thp.HQ_OFFICE_CD AND thps.PROD_CD = thp.PROD_CD ) AS STORE_CNT,
                thpb.BARCD_CD AS BAR_CD
                <include refid="CmmSQL.PagingTemplateCount"/>
                FROM
                TB_HQ_PRODUCT thp
                LEFT OUTER JOIN (
                SELECT
                HQ_OFFICE_CD,
                PROD_CD,
                MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC
                FROM TB_HQ_PRODUCT_SALE_PRICE
                WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                <![CDATA[
                    AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                    AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                ]]>
                AND SALE_PRC_FG = '1'
                GROUP BY
                HQ_OFFICE_CD, PROD_CD
                ) thpsp ON
                thp.HQ_OFFICE_CD = thpsp.HQ_OFFICE_CD
                AND thp.PROD_CD = thpsp.PROD_CD
                LEFT OUTER JOIN TB_HQ_BRAND thb ON
                thb.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
                AND thb.HQ_BRAND_CD = thp.HQ_BRAND_CD
                LEFT OUTER JOIN TB_HQ_PRODUCT_BARCD thpb ON
                thpb.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
                AND thpb.PROD_CD = thp.PROD_CD
                WHERE 1=1
                AND thp.HQ_OFFICE_CD = #{hqOfficeCd}
                <if test="chkDt == false">
                    <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
                        <![CDATA[
                            AND thp.REG_DT BETWEEN #{startDate}||'000000' AND #{endDate}||'235959'
                        ]]>
                    </if>
                </if>
                <if test="prodCd != null and prodCd != ''">
                    AND thp.PROD_CD LIKE '%'||#{prodCd}||'%' --상품코드
                </if>
                <if test="prodNm != null and prodNm != ''">
                    AND thp.PROD_NM LIKE '%'||#{prodNm}||'%' --상품명
                </if>
                <if test="barCd != null and barCd != ''">
                    AND thp.BARCD_CD LIKE '%'||#{barCd}||'%' --바코드
                </if>
                <if test="prodClassCd != null and prodClassCd != ''">
                    AND thp.PROD_CLASS_CD IN (
                                                SELECT
                                                PROD_CLASS_CD
                                                FROM TB_HQ_PRODUCT_CLASS
                                                WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                                                START WITH PROD_CLASS_CD = #{prodClassCd} AND HQ_OFFICE_CD = #{hqOfficeCd}
                                                CONNECT BY PRIOR PROD_CLASS_CD = P_PROD_CLASS_CD AND HQ_OFFICE_CD = #{hqOfficeCd}
                                            )
                </if>
                <if test="useYn != null and useYn != ''">
                    AND thp.USE_YN = #{useYn} --사용여부
                </if>
                <if test="hqBrandNm != null and hqBrandNm != ''">
                    AND thb.HQ_BRAND_NM LIKE '%'||#{hqBrandNm}||'%' -- 브랜드명
                </if>
                ORDER BY thp.PROD_CD ASC
                <include refid="CmmSQL.PagingTemplateBottom"/>
            </when>
            <!-- 매장 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                <include refid="CmmSQL.PagingTemplateHeader"/>
                SELECT
                tmp.STORE_CD,
                tmp.PROD_CD,
                tmp.PROD_NM,
                tms.HQ_OFFICE_CD,
                tmp.HQ_BRAND_CD,
                thb.HQ_BRAND_NM,
                tmp.PROD_CLASS_CD,
                ( SELECT SF_GET_PROD_CLASSES('S', tmp.STORE_CD, tmp.PROD_CLASS_CD) FROM DUAL ) AS PROD_CLASS_NM,
                NVL(tmp.COST_UPRC, 0) COST_UPRC,
                NVL(tmp.SPLY_UPRC, 0) SPLY_UPRC,
                NVL(thpsp.SALE_UPRC, 0) AS SALE_UPRC, -- 판매단가
                tmp.ORGPLCE_CD, -- TODO 원산지명 조회 필요
                tmp.SIDE_PROD_YN,
                tmp.SDATTR_CLASS_CD,
                tmp.SDSEL_GRP_CD,
                tmp.PO_UNIT_FG,
                tmp.REG_DT,
                tmp.USE_YN,
                tmp.REG_FG,
                tmpb.BARCD_CD AS BAR_CD
                <include refid="CmmSQL.PagingTemplateCount"/>
                FROM
                TB_MS_PRODUCT tmp
                LEFT OUTER JOIN (
                SELECT
                STORE_CD,
                PROD_CD,
                MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC
                FROM TB_MS_PRODUCT_SALE_PRICE
                WHERE STORE_CD = #{storeCd}
                <![CDATA[
                    AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                    AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                ]]>
                AND SALE_PRC_FG = '1'
                GROUP BY
                STORE_CD, PROD_CD
                ) thpsp ON
                tmp.STORE_CD = thpsp.STORE_CD
                AND tmp.PROD_CD = thpsp.PROD_CD
                INNER JOIN TB_MS_STORE tms ON
                tms.STORE_CD  = tmp.STORE_CD
                LEFT OUTER JOIN TB_HQ_BRAND thb ON
                thb.HQ_OFFICE_CD = tms.HQ_OFFICE_CD
                AND thb.HQ_BRAND_CD = tmp.HQ_BRAND_CD
                LEFT OUTER JOIN TB_MS_PRODUCT_BARCD tmpb ON
                tmpb.STORE_CD = tmp.STORE_CD
                AND tmpb.PROD_CD = tmp.PROD_CD
                WHERE 1=1
                AND tmp.STORE_CD = #{storeCd}
                <if test="chkDt == false">
                    <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
                        <![CDATA[
                            AND tmp.REG_DT BETWEEN #{startDate}||'000000' AND #{endDate}||'235959'
                        ]]>
                    </if>
                </if>
                <if test="prodCd != null and prodCd != ''">
                    AND tmp.PROD_CD LIKE '%'||#{prodCd}||'%' --상품코드
                </if>
                <if test="prodNm != null and prodNm != ''">
                    AND tmp.PROD_NM LIKE '%'||#{prodNm}||'%' --상품명
                </if>
                <if test="barCd != null and barCd != ''">
                    AND tmp.BARCD_CD LIKE '%'||#{barCd}||'%' --바코드
                </if>
                <if test="prodClassCd != null and prodClassCd != ''">
                    AND tmp.PROD_CLASS_CD IN (
                                                SELECT
                                                PROD_CLASS_CD
                                                FROM TB_MS_PRODUCT_CLASS
                                                WHERE STORE_CD = #{storeCd}
                                                START WITH PROD_CLASS_CD = #{prodClassCd} AND STORE_CD = #{storeCd}
                                                CONNECT BY PRIOR PROD_CLASS_CD = P_PROD_CLASS_CD AND STORE_CD = #{storeCd}
                                            )
                </if>
                <if test="useYn != null and useYn != ''">
                    AND tmp.USE_YN = #{useYn} --사용여부
                </if>
                ORDER BY tmp.PROD_CD ASC
                <include refid="CmmSQL.PagingTemplateBottom"/>
            </when>
        </choose>
    </select>

    <!-- 상품 조회(엑셀다운로드용) -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_HQ_PRODUCT_SALE_PRICE,
                   TB_MS_PRODUCT, TB_MS_PRODUCT_SALE_PRICE
        PARAM    : prodVO
        COMMENTS : 상품의 목록을 조회한다. ( 본사/매장 )
    -->
    <select id="getProdExcelList" parameterType="prodVO" resultType="DefaultMap">
        /* USE : ProdMapper.getProdExcelList */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT
                thp.PROD_CD,
                thp.PROD_NM,
                thp.PROD_CLASS_CD,
                ( SELECT SF_GET_PROD_CLASSES('H', thp.HQ_OFFICE_CD, thp.PROD_CLASS_CD) FROM DUAL ) AS PROD_CLASS_NM,
                NVL(thp.COST_UPRC, 0) COST_UPRC,
                NVL(thp.SPLY_UPRC, 0) SPLY_UPRC,
                NVL(thpsp.SALE_UPRC, 0) AS SALE_UPRC, -- 판매단가
                thp.ORGPLCE_CD, -- TODO 원산지명 조회 필요
                thp.PO_UNIT_FG,
                thp.USE_YN,
                (SELECT COUNT(thps.STORE_CD) FROM TB_HQ_PRODUCT_STORE thps WHERE thps.HQ_OFFICE_CD = thp.HQ_OFFICE_CD AND thps.PROD_CD = thp.PROD_CD) AS STORE_CNT,
                thpb.BARCD_CD AS BAR_CD
                FROM
                TB_HQ_PRODUCT thp
                LEFT OUTER JOIN (
                SELECT
                HQ_OFFICE_CD,
                PROD_CD,
                MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC
                FROM TB_HQ_PRODUCT_SALE_PRICE
                WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                <![CDATA[
                    AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                    AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                ]]>
                AND SALE_PRC_FG = '1'
                GROUP BY
                HQ_OFFICE_CD, PROD_CD
                ) thpsp ON
                thp.HQ_OFFICE_CD = thpsp.HQ_OFFICE_CD
                AND thp.PROD_CD = thpsp.PROD_CD
                LEFT OUTER JOIN TB_HQ_BRAND thb ON
                thb.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
                AND thb.HQ_BRAND_CD = thp.HQ_BRAND_CD
                LEFT OUTER JOIN TB_HQ_PRODUCT_BARCD thpb ON
                thpb.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
                AND thpb.PROD_CD = thp.PROD_CD
                WHERE 1=1
                AND thp.HQ_OFFICE_CD = #{hqOfficeCd}
                <if test="chkDt == false">
                    <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
                        <![CDATA[
                            AND thp.REG_DT BETWEEN #{startDate}||'000000' AND #{endDate}||'235959'
                        ]]>
                    </if>
                </if>
                <if test="prodCd != null and prodCd != ''">
                    AND thp.PROD_CD LIKE '%'||#{prodCd}||'%' --상품코드
                </if>
                <if test="prodNm != null and prodNm != ''">
                    AND thp.PROD_NM LIKE '%'||#{prodNm}||'%' --상품명
                </if>
                <if test="barCd != null and barCd != ''">
                    AND thp.BARCD_CD LIKE '%'||#{barCd}||'%' --바코드
                </if>
                <if test="prodClassCd != null and prodClassCd != ''">
                    AND thp.PROD_CLASS_CD IN (
                                                SELECT
                                                PROD_CLASS_CD
                                                FROM TB_HQ_PRODUCT_CLASS
                                                WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                                                START WITH PROD_CLASS_CD = #{prodClassCd} AND HQ_OFFICE_CD = #{hqOfficeCd}
                                                CONNECT BY PRIOR PROD_CLASS_CD = P_PROD_CLASS_CD AND HQ_OFFICE_CD = #{hqOfficeCd}
                                            )
                </if>
                <if test="useYn != null and useYn != ''">
                    AND thp.USE_YN = #{useYn} --사용여부
                </if>
                <if test="hqBrandNm != null and hqBrandNm != ''">
                    AND thb.HQ_BRAND_NM LIKE '%'||#{hqBrandNm}||'%' -- 브랜드명
                </if>
                ORDER BY thp.PROD_CD ASC
            </when>
            <!-- 가맹점 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                SELECT
                tmp.PROD_CD,
                tmp.PROD_NM,
                tmp.PROD_CLASS_CD,
                ( SELECT SF_GET_PROD_CLASSES('S', tmp.STORE_CD, tmp.PROD_CLASS_CD) FROM DUAL ) AS PROD_CLASS_NM,
                NVL(tmp.COST_UPRC, 0) COST_UPRC,
                NVL(tmp.SPLY_UPRC, 0) SPLY_UPRC,
                NVL(thpsp.SALE_UPRC, 0) AS SALE_UPRC, -- 판매단가
                tmp.ORGPLCE_CD, -- TODO 원산지명 조회 필요
                tmp.PO_UNIT_FG,
                tmp.USE_YN,
                tmpb.BARCD_CD AS BAR_CD
                FROM
                TB_MS_PRODUCT tmp
                LEFT OUTER JOIN (
                SELECT
                STORE_CD,
                PROD_CD,
                MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC
                FROM TB_MS_PRODUCT_SALE_PRICE
                WHERE STORE_CD = #{storeCd}
                <![CDATA[
                    AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                    AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                ]]>
                AND SALE_PRC_FG = '1'
                GROUP BY
                STORE_CD, PROD_CD
                ) thpsp ON
                tmp.STORE_CD = thpsp.STORE_CD
                AND tmp.PROD_CD = thpsp.PROD_CD
                INNER JOIN TB_MS_STORE tms ON
                tms.STORE_CD  = tmp.STORE_CD
                LEFT OUTER JOIN TB_HQ_BRAND thb ON
                thb.HQ_OFFICE_CD = tms.HQ_OFFICE_CD
                AND thb.HQ_BRAND_CD = tmp.HQ_BRAND_CD
                LEFT OUTER JOIN TB_MS_PRODUCT_BARCD tmpb ON
                tmpb.STORE_CD = tmp.STORE_CD
                AND tmpb.PROD_CD = tmp.PROD_CD
                WHERE 1=1
                AND tmp.STORE_CD = #{storeCd}
                <if test="chkDt == false">
                    <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
                        <![CDATA[
                            AND tmp.REG_DT BETWEEN #{startDate}||'000000' AND #{endDate}||'235959'
                        ]]>
                    </if>
                </if>
                <if test="prodCd != null and prodCd != ''">
                    AND tmp.PROD_CD LIKE '%'||#{prodCd}||'%' --상품코드
                </if>
                <if test="prodNm != null and prodNm != ''">
                    AND tmp.PROD_NM LIKE '%'||#{prodNm}||'%' --상품명
                </if>
                <if test="barCd != null and barCd != ''">
                    AND tmp.BARCD_CD LIKE '%'||#{barCd}||'%' --바코드
                </if>
                <if test="prodClassCd != null and prodClassCd != ''">
                    AND tmp.PROD_CLASS_CD IN (
                                                SELECT
                                                PROD_CLASS_CD
                                                FROM TB_MS_PRODUCT_CLASS
                                                WHERE STORE_CD = #{storeCd}
                                                START WITH PROD_CLASS_CD = #{prodClassCd} AND STORE_CD = #{storeCd}
                                                CONNECT BY PRIOR PROD_CLASS_CD = P_PROD_CLASS_CD AND STORE_CD = #{storeCd}
                                            )
                </if>
                <if test="useYn != null and useYn != ''">
                    AND tmp.USE_YN = #{useYn} --사용여부
                </if>
                ORDER BY tmp.PROD_CD ASC
            </when>
        </choose>
    </select>

    <!-- 상품 상세 조회 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_HQ_PRODUCT_SALE_PRICE, TB_HQ_PRODUCT_IMAGE, TB_HQ_VENDOR_PROD, TB_HQ_VENDOR
                   TB_MS_PRODUCT, TB_MS_PRODUCT_SALE_PRICE, TB_MS_PRODUCT_IMAGE, TB_MS_VENDOR_PROD, TB_MS_VENDOR
        PARAM    : prodVO
        COMMENTS : 상품의 상세정보를 조회한다. ( 본사/매장 )
    -->
    <select id="getProdDetail" parameterType="prodVO" resultType="DefaultMap">
        /* USE : ProdMapper.getProdDetail */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT
                thp.HQ_OFFICE_CD,       -- 본사코드
                thp.PROD_CD,            -- 상품코드
                thp.PROD_NM,            -- 상품명
                thp.PROD_CLASS_CD,      -- 상품분류코드
                ( SELECT SF_GET_PROD_CLASSES('H', thp.HQ_OFFICE_CD, thp.PROD_CLASS_CD) FROM DUAL ) AS PROD_CLASS_CD_NM,
                ( SELECT BARCD_CD FROM TB_HQ_PRODUCT_BARCD WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND PROD_CD = #{prodCd}) AS BAR_CD,
                thp.CORNR_CD,           -- 코너코드
                thp.ORGPLCE_CD,         -- 원산지 구분 -- TODO 원산지명 조회 필요
                thp.SDATTR_CLASS_CD,    -- 사이드속성분류코드
                thp.SDSEL_GRP_CD,       -- 사이드선택그룹코드
                thp.POINT_SAVE_YN,
                thp.PROD_DC_FG,
                thp.VAT_FG,                                     -- 과세여부
                thp.PROD_TIP_YN,
                thp.PROD_PACK_AMT,
                thp.PROD_DLVR_AMT,
                thp.PROD_TYPE_FG,                               -- 상품유형구분
                thp.SALE_PROD_YN,                               -- 판매상품여부
                thp.STOCK_PROD_YN,                              -- 재고관리여부
                thp.SIDE_PROD_YN,
                thp.SET_PROD_FG,                                -- 세트상품구분
                NVL(thpsp.SALE_UPRC, 0) AS SALE_UPRC,           -- 최초판매단가
                thpsp.STIN_SALE_UPRC AS STIN_SALE_UPRC,         -- 내점가(NULL 허용가능)
                thpsp.DLVR_SALE_UPRC AS DLVR_SALE_UPRC,         -- 배달가(NULL 허용가능)
                thpsp.PACK_SALE_UPRC AS PACK_SALE_UPRC,         -- 포장가(NULL 허용가능)
                NVL(thp.COST_UPRC, 0) AS COST_UPRC,             -- 원가단가
                NVL(thp.LAST_COST_UPRC, 0) AS LAST_COST_UPRC,   -- 최종원가단가
                NVL(thp.SPLY_UPRC, 0) AS SPLY_UPRC,             -- 판매단가
                thp.SPLY_UPRC_USE_YN,
                thp.PO_PROD_FG,                                 -- 주문상품구분
                thp.PO_UNIT_FG,                                 -- 주문단위
                thp.PO_UNIT_QTY,
                thp.PO_UNIT_ALLOW_FG,
                thp.PO_MIN_QTY,                 -- 최소주문
                thp.SAFE_STOCK_QTY,             -- 안전재고
                0 AS DEFAULT_STOCK,             -- todo 초기재고
                thp.STOCK_UNIT_FG,
                thp.USE_YN,                     -- 사용여부
                NVL(thp.REMARK, '') AS REMARK,  -- 비고
                thp.REG_DT,
                thpi.IMG_URL,
                thvp.VENDR_CD,
                thvp.VENDR_NM,
                thp.PRC_CTRL_FG,
                thp.MAP_PROD_CD
                FROM
                TB_HQ_PRODUCT thp
                LEFT OUTER JOIN (
                SELECT
                HQ_OFFICE_CD,
                PROD_CD,
                MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC,
                MIN(STIN_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS STIN_SALE_UPRC,
                MIN(DLVR_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS DLVR_SALE_UPRC,
                MIN(PACK_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS PACK_SALE_UPRC
                FROM TB_HQ_PRODUCT_SALE_PRICE
                WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                <![CDATA[
                    AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                    AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                ]]>
                AND SALE_PRC_FG = '1'
                GROUP BY HQ_OFFICE_CD, PROD_CD
                ) thpsp ON
                thp.HQ_OFFICE_CD = thpsp.HQ_OFFICE_CD
                AND thp.PROD_CD = thpsp.PROD_CD
                LEFT OUTER JOIN (
                SELECT
                HQ_OFFICE_CD,
                PROD_CD,
                IMG_URL || IMG_FILE_NM AS IMG_URL
                FROM TB_HQ_PRODUCT_IMAGE
                WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                AND IMG_FG = '001'
                ) thpi ON
                thp.HQ_OFFICE_CD = thpi.HQ_OFFICE_CD
                AND thp.PROD_CD = thpi.PROD_CD
                LEFT OUTER JOIN (
                SELECT
                thvp.HQ_OFFICE_CD,
                thvp.PROD_CD,
                LISTAGG(thvp.VENDR_CD, ',') WITHIN GROUP (ORDER BY thvp.VENDR_CD) AS VENDR_CD,
                LISTAGG(thv.VENDR_NM, ',') WITHIN GROUP (ORDER BY thvp.VENDR_CD) AS VENDR_NM
                FROM TB_HQ_VENDOR_PROD thvp,
                TB_HQ_VENDOR thv
                WHERE 1=1
                AND thvp.HQ_OFFICE_CD = #{hqOfficeCd}
                AND thvp.PROD_CD = #{prodCd}
                AND thvp.USE_YN = 'Y'
                AND thv.HQ_OFFICE_CD = thvp.HQ_OFFICE_CD
                AND thv.VENDR_CD = thvp.VENDR_CD
                GROUP BY thvp.HQ_OFFICE_CD, thvp.PROD_CD
                ) thvp ON
                thp.HQ_OFFICE_CD = thvp.HQ_OFFICE_CD
                AND thp.PROD_CD = thvp.PROD_CD
                WHERE thp.HQ_OFFICE_CD = #{hqOfficeCd}
                AND thp.PROD_CD = #{prodCd}
            </when>
            <!-- 가맹점 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                SELECT
                tmp.STORE_CD,           -- 매장코드
                tmp.PROD_CD,            -- 상품코드
                tmp.PROD_NM,            -- 상품명
                tmp.PROD_CLASS_CD,      -- 상품분류코드
                ( SELECT SF_GET_PROD_CLASSES('S', tmp.STORE_CD, tmp.PROD_CLASS_CD) FROM DUAL ) AS PROD_CLASS_CD_NM,
                ( SELECT BARCD_CD FROM TB_MS_PRODUCT_BARCD WHERE STORE_CD = #{storeCd} AND PROD_CD = #{prodCd}) AS BAR_CD,
                tmp.CORNR_CD,           -- 코너코드
                tmp.ORGPLCE_CD,         -- 원산지 구분 -- TODO 원산지명 조회 필요
                tmp.SDATTR_CLASS_CD,
                tmp.SDSEL_GRP_CD,
                tmp.POINT_SAVE_YN,
                tmp.PROD_DC_FG,
                tmp.VAT_FG,                                     -- 과세여부
                tmp.PROD_TIP_YN,
                tmp.PROD_PACK_AMT,
                tmp.PROD_DLVR_AMT,
                tmp.PROD_TYPE_FG,                               -- 상품유형
                tmp.SALE_PROD_YN,                               -- 판매상품여부
                tmp.STOCK_PROD_YN,                              -- 재고관리여부
                tmp.SIDE_PROD_YN,
                tmp.SET_PROD_FG,                                -- 세트상품구분
                NVL(tmpsp.SALE_UPRC, 0) AS SALE_UPRC,           -- 최초판매단가
                tmpsp.STIN_SALE_UPRC AS STIN_SALE_UPRC,         -- 내점가(NULL 허용가능)
                tmpsp.DLVR_SALE_UPRC AS DLVR_SALE_UPRC,         -- 배달가(NULL 허용가능)
                tmpsp.PACK_SALE_UPRC AS PACK_SALE_UPRC,         -- 포장가(NULL 허용가능)
                NVL(tmp.COST_UPRC, 0) AS COST_UPRC,             -- 원가단가
                NVL(tmp.LAST_COST_UPRC, 0) AS LAST_COST_UPRC,   -- 최종원가단가
                NVL(tmp.SPLY_UPRC, 0) AS SPLY_UPRC,             -- 판매단가
                tmp.SPLY_UPRC_USE_YN,
                tmp.PO_PROD_FG,                                 -- 주문상품구분
                tmp.PO_UNIT_FG,                                 -- 주문단위
                tmp.PO_UNIT_QTY,
                tmp.PO_UNIT_ALLOW_FG,
                tmp.PO_MIN_QTY,                 -- 최소주문
                tmp.SAFE_STOCK_QTY,             -- 안전재고
                0 AS DEFAULT_STOCK,             -- todo 초기재고
                tmp.STOCK_UNIT_FG,
                tmp.USE_YN,                     -- 사용여부
                NVL(tmp.REMARK, '') AS REMARK,  -- 비고
                tmp.REG_DT,
                tmpi.IMG_URL,
                tmvp.VENDR_CD,
                tmvp.VENDR_NM,
                tmp.PRC_CTRL_FG,
                tmp.MAP_PROD_CD
                FROM
                TB_MS_PRODUCT tmp
                LEFT OUTER JOIN (
                SELECT
                STORE_CD,
                PROD_CD,
                MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC,
                MIN(STIN_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS STIN_SALE_UPRC,
                MIN(DLVR_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS DLVR_SALE_UPRC,
                MIN(PACK_SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS PACK_SALE_UPRC
                FROM TB_MS_PRODUCT_SALE_PRICE
                WHERE STORE_CD = #{storeCd}
                <![CDATA[
                    AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                    AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                ]]>
                AND SALE_PRC_FG = '1'
                GROUP BY STORE_CD, PROD_CD
                ) tmpsp ON
                tmp.STORE_CD = tmpsp.STORE_CD
                AND tmp.PROD_CD = tmpsp.PROD_CD
                LEFT OUTER JOIN (
                SELECT
                STORE_CD,
                PROD_CD,
                IMG_URL || IMG_FILE_NM AS IMG_URL
                FROM TB_MS_PRODUCT_IMAGE
                WHERE STORE_CD = #{storeCd}
                AND IMG_FG = '001'
                ) tmpi ON
                tmp.STORE_CD = tmpi.STORE_CD
                AND tmp.PROD_CD = tmpi.PROD_CD
                LEFT OUTER JOIN (
                SELECT
                tmvp.STORE_CD,
                tmvp.PROD_CD,
                LISTAGG(tmvp.VENDR_CD, ',') WITHIN GROUP (ORDER BY tmvp.VENDR_CD) AS VENDR_CD,
                LISTAGG(tmv.VENDR_NM, ',') WITHIN GROUP (ORDER BY tmvp.VENDR_CD) AS VENDR_NM
                FROM TB_MS_VENDOR_PROD tmvp,
                TB_MS_VENDOR tmv
                WHERE 1=1
                AND tmvp.STORE_CD = #{storeCd}
                AND tmvp.PROD_CD = #{prodCd}
                AND tmvp.USE_YN = 'Y'
                AND tmv.STORE_CD = tmvp.STORE_CD
                AND tmv.VENDR_CD = tmvp.VENDR_CD
                GROUP BY tmvp.STORE_CD, tmvp.PROD_CD
                ) tmvp ON
                tmp.STORE_CD = tmvp.STORE_CD
                AND tmp.PROD_CD = tmvp.PROD_CD
                WHERE tmp.STORE_CD = #{storeCd}
                AND tmp.PROD_CD = #{prodCd}
            </when>
        </choose>
    </select>

    <!-- 연결 상품 조회 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_UNITST_PROD, TB_MS_PRODUCT_UNITST_PROD,
        PARAM    : prodVO
        COMMENTS : 상품의 연결상품을 조회한다. ( 본사/매장 )
    -->
    <select id="getLinkedProdList" parameterType="prodVO" resultType="DefaultMap">
        /* USE : ProdMapper.getLinkedProdList */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT
                thpup.HQ_OFFICE_CD,
                thpup.PROD_CD,
                thpup.UNIT_PROD_CD,
                thpup.SET_PROD_FG,
                thpup.UNIT_PROD_QTY,
                thpup.DISP_SEQ
                FROM
                TB_HQ_PRODUCT_UNITST_PROD thpup
                WHERE
                thpup.HQ_OFFICE_CD = #{hqOfficeCd}
                AND thpup.PROD_CD = #{prodCd}
                ORDER BY
                thpup.DISP_SEQ
            </when>
            <!-- 가맹점 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                SELECT
                tmpup.STORE_CD,
                tmpup.PROD_CD,
                tmpup.UNIT_PROD_CD,
                tmpup.SET_PROD_FG,
                tmpup.UNIT_PROD_QTY,
                tmpup.DISP_SEQ
                FROM
                TB_MS_PRODUCT_UNITST_PROD tmpup
                WHERE
                tmpup.STORE_CD = #{storeCd}
                AND tmpup.PROD_CD = #{prodCd}
                ORDER BY
                tmpup.DISP_SEQ
            </when>
        </choose>
    </select>

    <!-- 상품코드 조회 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_MS_PRODUCT
        PARAM    : prodVO
        COMMENTS : 본사/매장의 상품정보를 생성/수정 한다.
    -->
    <select id="getProdCd" parameterType="prodVO" resultType="String">
        /* ProdMapper.getProdCd */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT LPAD(NVL(MAX(TO_NUMBER(PROD_CD)),0) + 1, 13, '0') AS PROD_CD
                FROM TB_HQ_PRODUCT
                WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                AND PROD_CD BETWEEN '0000000000001' AND '8000000000000'
            </when>
            <!-- 가맹점 (매장 등록 상품의 경우 상품코드가 '9'로 시작) -->
            <when test='orgnFg != null and orgnFg == "S"'>
                <!-- 단독매장 -->
                <if test='hqOfficeCd != null and hqOfficeCd == "0000"'>
                    SELECT
--                     LPAD(NVL(MAX(TO_NUMBER(PROD_CD)),0) + 1, 13, '0') AS PROD_CD
                    NVL(MAX(TO_NUMBER(PROD_CD)), 8000000000000) + 1 AS PROD_CD
                    FROM TB_MS_PRODUCT
                    WHERE STORE_CD = #{storeCd}
                    AND PROD_CD BETWEEN '8000000000001' AND '9999999999999'
                </if>
                <!-- 단독매장이 아닐 경우 -->
                <if test='hqOfficeCd != null and hqOfficeCd != "0000"'>
                    SELECT
--                     '9' || LPAD(NVL(MAX(TO_NUMBER(SUBSTR(PROD_CD, 2, 13))),0) + 1, 12, '0') AS PROD_CD
                    NVL(MAX(TO_NUMBER(PROD_CD)), 8000000000000) + 1 AS PROD_CD
                    FROM TB_MS_PRODUCT
                    WHERE STORE_CD = #{storeCd}
                    --                     AND PROD_CD LIKE '9%'
                    AND PROD_CD BETWEEN '8000000000001' AND '9999999999999'
                </if>
            </when>
        </choose>
    </select>

    <!-- 상품정보 저장 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_MS_PRODUCT
        PARAM    : prodVO
        COMMENTS : 본사/매장의 상품정보를 생성/수정 한다.
    -->
    <update id="saveProductInfo" parameterType="prodVO">
        /* ProdMapper.saveProductInfo */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                MERGE INTO
                TB_HQ_PRODUCT thp
                USING DUAL ON
                (
                thp.HQ_OFFICE_CD = #{hqOfficeCd}
                AND thp.PROD_CD = #{prodCd}
                )
                WHEN MATCHED THEN
                UPDATE
                SET
                PROD_NM = #{prodNm},
                PROD_CLASS_CD  = #{prodClassCd},
                CORNR_CD = #{cornrCd},
                ORGPLCE_CD = #{orgplceCd},
                SDATTR_CLASS_CD = #{sdattrClassCd},
                SDSEL_GRP_CD = #{sdselGrpCd},
                POINT_SAVE_YN = #{pointSaveYn, jdbcType=VARCHAR},
                PROD_DC_FG = #{prodDcFg},
                VAT_FG = #{vatFg},
                PROD_TIP_YN = #{prodTipYn, jdbcType=VARCHAR},
                PROD_PACK_AMT = #{prodPackAmt, jdbcType=NUMERIC},
                PROD_DLVR_AMT = #{prodDlvrAmt, jdbcType=NUMERIC},
                PROD_TYPE_FG = #{prodTypeFg},
                SALE_PROD_YN = #{saleProdYn},
                STOCK_PROD_YN = #{stockProdYn},
                SIDE_PROD_YN = #{sideProdYn, jdbcType=VARCHAR},
                SET_PROD_FG = #{setProdFg},
                COST_UPRC = #{costUprc, jdbcType=NUMERIC},
                LAST_COST_UPRC = #{lastCostUprc, jdbcType=NUMERIC},
                SPLY_UPRC = #{splyUprc, jdbcType=NUMERIC},
                SPLY_UPRC_USE_YN = #{splyUprcUseYn, jdbcType=VARCHAR},
                PO_PROD_FG = #{poProdFg},
                PO_UNIT_FG = #{poUnitFg},
                PO_UNIT_QTY = #{poUnitQty, jdbcType=NUMERIC},
                PO_UNIT_ALLOW_FG = #{poUnitAllowFg},
                PO_MIN_QTY = #{poMinQty, jdbcType=NUMERIC},
                SAFE_STOCK_QTY = #{safeStockQty, jdbcType=NUMERIC},
                STOCK_UNIT_FG = #{stockUnitFg},
                USE_YN = #{useYn},
                REMARK = #{remark},
                MOD_DT = #{modDt},
                MOD_ID = #{modId},
                PRC_CTRL_FG = #{prcCtrlFg},
                MAP_PROD_CD = #{mapProdCd}
                WHEN NOT MATCHED THEN
                INSERT
                (
                HQ_OFFICE_CD,
                PROD_CD,
                PROD_NM,
                PROD_CLASS_CD,
                CORNR_CD,
                ORGPLCE_CD,
                SDATTR_CLASS_CD,
                SDSEL_GRP_CD,
                POINT_SAVE_YN,
                PROD_DC_FG,
                VAT_FG,
                PROD_TIP_YN,
                PROD_PACK_AMT,
                PROD_DLVR_AMT,
                PROD_TYPE_FG,
                SALE_PROD_YN,
                STOCK_PROD_YN,
                SIDE_PROD_YN,
                SET_PROD_FG,
                COST_UPRC,
                LAST_COST_UPRC,
                SPLY_UPRC,
                SPLY_UPRC_USE_YN,
                PO_PROD_FG,
                PO_UNIT_FG,
                PO_UNIT_QTY,
                PO_UNIT_ALLOW_FG,
                PO_MIN_QTY,
                SAFE_STOCK_QTY,
                STOCK_UNIT_FG,
                USE_YN,
                REMARK,
                REG_DT,
                REG_ID,
                MOD_DT,
                MOD_ID,
                PRC_CTRL_FG,
                MAP_PROD_CD
                ) VALUES (
                #{hqOfficeCd},
                #{prodCd},
                #{prodNm},
                #{prodClassCd},
                '00',
                #{orgplceCd},
                #{sdattrClassCd},
                #{sdselGrpCd},
                #{pointSaveYn, jdbcType=VARCHAR},
                #{prodDcFg},
                #{vatFg},
                #{prodTipYn, jdbcType=VARCHAR},
                #{prodPackAmt, jdbcType=NUMERIC},
                #{prodDlvrAmt, jdbcType=NUMERIC},
                #{prodTypeFg},
                #{saleProdYn},
                #{stockProdYn},
                #{sideProdYn, jdbcType=VARCHAR},
                #{setProdFg},
                #{costUprc, jdbcType=NUMERIC},
                #{lastCostUprc, jdbcType=NUMERIC},
                #{splyUprc, jdbcType=NUMERIC},
                #{splyUprcUseYn, jdbcType=VARCHAR},
                #{poProdFg},
                #{poUnitFg},
                #{poUnitQty, jdbcType=NUMERIC},
                #{poUnitAllowFg},
                #{poMinQty, jdbcType=NUMERIC},
                #{safeStockQty, jdbcType=NUMERIC},
                #{stockUnitFg},
                #{useYn},
                #{remark},
                #{regDt},
                #{regId},
                #{modDt},
                #{modId},
                #{prcCtrlFg},
                #{mapProdCd}
                )
            </when>
            <!-- 매장 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                MERGE INTO
                TB_MS_PRODUCT tmp
                USING DUAL ON
                (
                tmp.STORE_CD = #{storeCd}
                AND tmp.PROD_CD = #{prodCd}
                )
                WHEN MATCHED THEN
                UPDATE
                SET
                PROD_NM = #{prodNm},
                PROD_CLASS_CD  = #{prodClassCd},
                CORNR_CD = #{cornrCd},
                ORGPLCE_CD = #{orgplceCd},
                SDATTR_CLASS_CD = #{sdattrClassCd},
                SDSEL_GRP_CD = #{sdselGrpCd},
                POINT_SAVE_YN = #{pointSaveYn},
                PROD_DC_FG = #{prodDcFg},
                VAT_FG = #{vatFg},
                PROD_TIP_YN = #{prodTipYn},
                PROD_PACK_AMT = #{prodPackAmt, jdbcType=NUMERIC},
                PROD_DLVR_AMT = #{prodDlvrAmt, jdbcType=NUMERIC},
                PROD_TYPE_FG = #{prodTypeFg},
                SALE_PROD_YN = #{saleProdYn},
                STOCK_PROD_YN = #{stockProdYn},
                SIDE_PROD_YN = #{sideProdYn},
                SET_PROD_FG = #{setProdFg},
                PRC_CTRL_FG = #{prcCtrlFg},
                COST_UPRC = #{costUprc},
                LAST_COST_UPRC = #{lastCostUprc},
                SPLY_UPRC = #{splyUprc},
                SPLY_UPRC_USE_YN = #{splyUprcUseYn},
                PO_PROD_FG = #{poProdFg},
                PO_UNIT_FG = #{poUnitFg},
                PO_UNIT_QTY = #{poUnitQty},
                PO_UNIT_ALLOW_FG = #{poUnitAllowFg},
                PO_MIN_QTY = #{poMinQty},
                SAFE_STOCK_QTY = #{safeStockQty},
                STOCK_UNIT_FG = #{stockUnitFg},
                USE_YN = #{useYn},
                REMARK = #{remark},
                MOD_DT = #{modDt},
                MOD_ID = #{modId},
                MAP_PROD_CD = #{mapProdCd}
                WHEN NOT MATCHED THEN
                INSERT
                (
                STORE_CD,
                PROD_CD,
                PROD_NM,
                PROD_CLASS_CD,
                CORNR_CD,
                ORGPLCE_CD,
                SDATTR_CLASS_CD,
                SDSEL_GRP_CD,
                POINT_SAVE_YN,
                PROD_DC_FG,
                VAT_FG,
                PROD_TIP_YN,
                PROD_PACK_AMT,
                PROD_DLVR_AMT,
                PROD_TYPE_FG,
                SALE_PROD_YN,
                STOCK_PROD_YN,
                SIDE_PROD_YN,
                SET_PROD_FG,
                PRC_CTRL_FG,
                COST_UPRC,
                LAST_COST_UPRC,
                SPLY_UPRC,
                SPLY_UPRC_USE_YN,
                PO_PROD_FG,
                PO_UNIT_FG,
                PO_UNIT_QTY,
                PO_UNIT_ALLOW_FG,
                PO_MIN_QTY,
                SAFE_STOCK_QTY,
                STOCK_UNIT_FG,
                USE_YN,
                REMARK,
                REG_DT,
                REG_ID,
                MOD_DT,
                MOD_ID,
                REG_FG,
                MAP_PROD_CD
                ) VALUES (
                #{storeCd},
                #{prodCd},
                #{prodNm},
                #{prodClassCd},
                '00',
                #{orgplceCd},
                #{sdattrClassCd},
                #{sdselGrpCd},
                #{pointSaveYn},
                #{prodDcFg},
                #{vatFg},
                #{prodTipYn},
                #{prodPackAmt, jdbcType=NUMERIC},
                #{prodDlvrAmt, jdbcType=NUMERIC},
                #{prodTypeFg},
                #{saleProdYn},
                #{stockProdYn},
                'N',
                #{setProdFg},
                #{prcCtrlFg},
                #{costUprc},
                #{lastCostUprc},
                #{splyUprc},
                #{splyUprcUseYn},
                #{poProdFg},
                #{poUnitFg},
                #{poUnitQty},
                #{poUnitAllowFg},
                #{poMinQty},
                #{safeStockQty},
                #{stockUnitFg},
                #{useYn},
                #{remark},
                #{regDt},
                #{regId},
                #{modDt},
                #{modId},
                'S',
                #{mapProdCd}
                )
            </when>
        </choose>
    </update>

    <!-- 상품 판매가 저장 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_SALE_PRICE
        PARAM    : prodVO
        COMMENTS : 본사/매장의 상품 최종 판매가를 저장한다.
    -->
    <update id="saveSalePrice" parameterType="prodVO">
        /* ProdMapper.saveSalePrice */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                <![CDATA[
                MERGE INTO TB_HQ_PRODUCT_SALE_PRICE thpsp
                USING DUAL ON
                (
                    thpsp.HQ_OFFICE_CD = #{hqOfficeCd}
                AND thpsp.PROD_CD = #{prodCd}
                AND thpsp.SALE_PRC_FG = '1'
                AND thpsp.START_DATE <= SYSDATE
                AND thpsp.end_date >= SYSDATE
                )
                WHEN MATCHED THEN
                UPDATE
                   SET SALE_UPRC = #{saleUprc},
                       STIN_SALE_UPRC = #{stinSaleUprc},
                       DLVR_SALE_UPRC = #{dlvrSaleUprc},
                       PACK_SALE_UPRC = #{packSaleUprc},
                       MOD_DT = #{modDt},
                       MOD_ID = #{modId}
                WHEN NOT MATCHED THEN
                INSERT
                (
                    HQ_OFFICE_CD,
                    PROD_CD,
                    SALE_PRC_FG,
                    START_DATE,
                    END_DATE,
                    SALE_UPRC,
                    STIN_SALE_UPRC,
                    DLVR_SALE_UPRC,
                    PACK_SALE_UPRC,
                    REG_DT,
                    REG_ID,
                    MOD_DT,
                    MOD_ID
                ) VALUES (
                    #{hqOfficeCd},
                    #{prodCd},
                    '1',
                    #{startDate},
                    #{endDate},
                    #{saleUprc},
                    #{stinSaleUprc},
                    #{dlvrSaleUprc},
                    #{packSaleUprc},
                    #{regDt},
                    #{regId},
                    #{modDt},
                    #{modId}
                )
                ]]>
            </when>
            <!-- 가맹점 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                <![CDATA[
                MERGE INTO TB_MS_PRODUCT_SALE_PRICE thpsp
                USING DUAL ON
                (
                    thpsp.STORE_CD = #{storeCd}
                AND thpsp.PROD_CD = #{prodCd}
                AND thpsp.SALE_PRC_FG = '1'
                AND thpsp.START_DATE <= SYSDATE
                AND thpsp.end_date >= SYSDATE
                )
                WHEN MATCHED THEN
                UPDATE
                   SET SALE_UPRC = #{saleUprc},
                        STIN_SALE_UPRC = #{stinSaleUprc},
                        DLVR_SALE_UPRC = #{dlvrSaleUprc},
                        PACK_SALE_UPRC = #{packSaleUprc},
                        MOD_DT = #{modDt},
                        MOD_ID = #{modId}
                WHEN NOT MATCHED THEN
                INSERT
                (
                    STORE_CD,
                    PROD_CD,
                    SALE_PRC_FG,
                    START_DATE,
                    END_DATE,
                    SALE_UPRC,
                    STIN_SALE_UPRC,
                    DLVR_SALE_UPRC,
                    PACK_SALE_UPRC,
                    REG_DT,
                    REG_ID,
                    MOD_DT,
                    MOD_ID
                ) VALUES (
                    #{storeCd},
                    #{prodCd},
                    '1',
                    #{startDate},
                    #{endDate},
                    #{saleUprc},
                    #{stinSaleUprc},
                    #{dlvrSaleUprc},
                    #{packSaleUprc},
                    #{regDt},
                    #{regId},
                    #{modDt},
                    #{modId}
                )
                ]]>
            </when>
        </choose>
    </update>


    <!-- 상품 판매가 변경 히스토리 저장 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_SALE_PRICE_HISTORY
        COMMENTS : 상품 판매가 변경 히스토리 저장한다.
    -->
    <insert id="saveSalePriceHistory" parameterType="prodVO">
        /* ProdMapper.saveSalePriceHistory */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                <![CDATA[
                INSERT INTO TB_HQ_PRODUCT_SALE_PRICE_HISTORY
                (
                    HIS_SEQ,
                    HQ_OFFICE_CD,
                    PROD_CD,
                    SALE_PRC_FG,
                    START_DATE,
                    END_DATE,
                    SALE_UPRC,
                    STIN_SALE_UPRC,
                    DLVR_SALE_UPRC,
                    PACK_SALE_UPRC,
                    REG_DT,
                    REG_ID
                ) VALUES (
                    SQ_HQ_PRODUCT_SALE_PRICE_HISTORY.NEXTVAL,
                    #{hqOfficeCd},
                    #{prodCd},
                    '1',
                    #{startDate},
                    #{endDate},
                    #{lastCostUprc},
                    #{stinSaleUprc},
                    #{dlvrSaleUprc},
                    #{packSaleUprc},
                    #{regDt},
                    #{regId}
                )
                ]]>
            </when>
            <!-- 가맹점 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                <![CDATA[
                INSERT INTO TB_MS_PRODUCT_SALE_PRICE_HISTORY
                (
                    HIS_SEQ,
                    STORE_CD,
                    PROD_CD,
                    SALE_PRC_FG,
                    START_DATE,
                    END_DATE,
                    SALE_UPRC,
                    STIN_SALE_UPRC,
                    DLVR_SALE_UPRC,
                    PACK_SALE_UPRC,
                    REG_DT,
                    REG_ID
                ) VALUES (
                    SQ_MS_PRODUCT_SALE_PRICE_HISTORY.NEXTVAL,
                    #{storeCd},
                    #{prodCd},
                    '1',
                    #{startDate},
                    #{endDate},
                    #{lastCostUprc},
                    #{stinSaleUprc},
                    #{dlvrSaleUprc},
                    #{packSaleUprc},
                    #{regDt},
                    #{regId}
                )
                ]]>
            </when>
        </choose>
    </insert>


    <!-- 상품존재여부 확인 (본사) -->
    <!--
        TABLE    : TB_HQ_PRODUCT
        PARAM    : prodVO
        COMMENTS : 상품의 존재여부를 확인하기 위해 COUNT 를 리턴한다.
    -->
    <select id="getProdExistInfo" parameterType="prodVO" resultType="Integer" >
        /* USE : ProdMapper.getProdExistInfo */
        SELECT
            COUNT(*) AS PROD_COUNT
          FROM
            TB_HQ_PRODUCT thp
         WHERE
            thp.HQ_OFFICE_CD = #{hqOfficeCd}
            AND thp.PROD_CD = #{prodCd}
    </select>


    <!-- 본사 상품 등록시, 매장 상품 등록 프로시져 호출 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_MS_PRODUCT
        PARAM    : prodVO
        COMMENTS : 본사 쿠폰분류를 매장 쿠폰분류에 적용시킨다.
    -->
    <select id="insertHqProdToStoreProd" statementType="CALLABLE"  parameterType="prodVO" resultType="String">
        /* USE : ProdMapper.insertHqProdToStoreProd */
        {
          CALL PKG_HQ_PRODUCT.SP_HQ_PRODUCT_I
          (
            #{hqOfficeCd},
            #{storeCd},
            #{prodCd},
            #{regId},
            #{result, mode=OUT, jdbcType=VARCHAR}
          )
        }
    </select>

    <!-- 본사 상품 수정시, 매장 상품 수정 프로시져 호출 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_MS_PRODUCT
        PARAM    : prodVO
        COMMENTS : 본사 쿠폰분류를 매장 쿠폰분류에 적용시킨다.
    -->
    <select id="updateHqProdToStoreProd" statementType="CALLABLE"  parameterType="prodVO" resultType="String">
        /* USE : ProdMapper.updateHqProdToStoreProd */
        {
          CALL PKG_HQ_PRODUCT.SP_HQ_PRODUCT_U
          (
            #{hqOfficeCd},
            #{prodCd},
            #{regId},
            #{result, mode=OUT, jdbcType=VARCHAR}
          )
        }
    </select>


    <!-- 상품 적용/미적용 매장 조회 -->
    <!--
        TABLE    : TB_MS_STORE, TB_HQ_PRODUCT_STORE
        PARAM    : prodVO
        COMMENTS : 상품 적용 대상인 매장을 조회한다.
    -->
    <select id="getStoreList" parameterType="prodVO" resultType="DefaultMap">
        /* USE : ProdMapper.getStoreList */
        SELECT
        tms.HQ_OFFICE_CD,
        tho.HQ_OFFICE_NM,
        tms.HQ_BRAND_CD,
        NVL(thb.HQ_BRAND_NM,'기본브랜드') as HQ_BRAND_NM,
        tms.STORE_CD,
        tms.STORE_NM,
        tms.SYS_STAT_FG,
        NVL2(thps.STORE_CD, 'Y', 'N') AS REG_YN,
        thpsp.SALE_UPRC AS HQ_SALE_UPRC,
        tmpsp.SALE_UPRC AS STORE_SALE_UPRC,
        <if test='storeRegFg != null and storeRegFg.toString() == "Y"'>
            tmpsp.SALE_UPRC AS SALE_UPRC, -- 등록매장은 매장판매가
            tmpsp.SALE_UPRC AS SALE_UPRC_B,
        </if>
        <if test='storeRegFg != null and storeRegFg.toString() == "N"'>
            CASE WHEN tmpsp.SALE_UPRC IS NULL THEN thpsp.SALE_UPRC
            ELSE tmpsp.SALE_UPRC END AS SALE_UPRC, -- 미등록매장은 매장판매가 우선, 없으면 본사판매가
            CASE WHEN tmpsp.SALE_UPRC IS NULL THEN thpsp.SALE_UPRC
            ELSE tmpsp.SALE_UPRC END AS SALE_UPRC_B,
        </if>
        thps.STORE_CD,
        tmp.PRC_CTRL_FG
        FROM TB_MS_STORE tms,
        TB_HQ_OFFICE tho,
        TB_HQ_PRODUCT_STORE thps,
        TB_HQ_BRAND thb,
        (
            SELECT
            thp.HQ_OFFICE_CD,
            thp.PROD_CD,
            thpsp.SALE_UPRC
            FROM TB_HQ_PRODUCT thp,
            (
                SELECT HQ_OFFICE_CD , PROD_CD,
                MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC
                FROM TB_HQ_PRODUCT_SALE_PRICE
                WHERE 1 = 1
                <![CDATA[
                    AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                    AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                ]]>
                AND SALE_PRC_FG = '1'
                GROUP BY HQ_OFFICE_CD, PROD_CD
            ) thpsp
            WHERE 1=1
            AND thpsp.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
            AND thpsp.PROD_CD = thp.PROD_CD
        ) thpsp, -- 본사 판매가
        (
            SELECT
            thp.HQ_OFFICE_CD,
            tmpsp.STORE_CD,
            thp.PROD_CD,
            tmpsp.SALE_UPRC
            FROM TB_HQ_PRODUCT thp,
            (
                SELECT STORE_CD , PROD_CD,
                MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC
                FROM TB_MS_PRODUCT_SALE_PRICE
                WHERE 1 = 1
                <![CDATA[
                     AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                     AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                 ]]>
                AND SALE_PRC_FG = '1'
                GROUP BY STORE_CD, PROD_CD
            ) tmpsp
            WHERE 1=1
            AND thp.HQ_OFFICE_CD = #{hqOfficeCd}
            AND tmpsp.STORE_CD IN (SELECT store_cd FROM TB_MS_STORE  WHERE HQ_OFFICE_CD = thp.HQ_OFFICE_CD)
            AND tmpsp.PROD_CD = thp.PROD_CD
        ) tmpsp,
        (
            SELECT
            STORE_CD,
            PRC_CTRL_FG
            FROM TB_MS_PRODUCT
            WHERE 1=1
            AND PROD_CD = #{prodCd}
            GROUP BY STORE_CD, PRC_CTRL_FG
        ) tmp
        WHERE tho.HQ_OFFICE_CD = tms.HQ_OFFICE_CD
        AND tms.HQ_OFFICE_CD = #{hqOfficeCd}
        AND thps.HQ_OFFICE_CD (+)= tms.HQ_OFFICE_CD
        AND thps.STORE_CD (+)= tms.STORE_CD
        AND thps.PROD_CD (+)= #{prodCd}
        AND thpsp.HQ_OFFICE_CD (+)= tho.HQ_OFFICE_CD
        AND thpsp.PROD_CD (+)= #{prodCd}
        AND tmpsp.HQ_OFFICE_CD (+)= #{hqOfficeCd}
        AND tmpsp.STORE_CD (+)= tms.STORE_CD
        AND tmpsp.PROD_CD (+)= #{prodCd}
        AND thb.HQ_OFFICE_CD (+)= tms.HQ_OFFICE_CD
        AND thb.HQ_BRAND_CD (+)= tms.HQ_BRAND_CD
        AND tmp.STORE_CD (+)= tms.STORE_CD
        <if test='sysStatFg != null and sysStatFg.toString() != ""'>
            AND tms.SYS_STAT_FG = #{sysStatFg}
        </if>
        <if test='hqBrandCd != null and hqBrandCd.toString() != ""'>
            AND tms.HQ_BRAND_CD = #{hqBrandCd}
        </if>
        <if test='storeCd != null and storeCd.toString() != ""'>
            AND tms.STORE_CD = #{storeCd}
        </if>
        <if test='storeNm != null and storeNm.toString() != ""'>
            AND tms.STORE_NM LIKE '%'||#{storeNm}||'%'
        </if>
        <if test='storeRegFg != null and storeRegFg.toString() == "Y"'>
            AND thps.STORE_CD IS NOT NULL
        </if>
        <if test='storeRegFg != null and storeRegFg.toString() == "N"'>
            AND thps.STORE_CD IS NULL
        </if>
        ORDER BY tms.STORE_CD ASC
    </select>

    <!-- 브랜드 콤보박스 리스트 조회 -->
    <!--
        TABLE    : TB_HQ_BRAND
        PARAM    : prodVO
        COMMENTS : 콤보박스에 넣을 브랜드를 조회한다.
    -->
    <select id="getBrandComboList" parameterType="prodVO" resultType="DefaultMap">
        SELECT HQ_BRAND_CD AS NMCODE_CD, HQ_BRAND_NM AS NMCODE_NM
        FROM TB_HQ_BRAND
        WHERE HQ_OFFICE_CD = #{hqOfficeCd}
    </select>

    <!-- 상품 적용 매장 등록 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_STORE
        PARAM    : prodVO
        COMMENTS : 본사 상품을 적용할 매장을 등록한다.
    -->
    <insert id="insertProdStore" parameterType="prodVO">

        /* USE : ProdMapper.insertProdStore */
        INSERT INTO TB_HQ_PRODUCT_STORE
        (
          HQ_OFFICE_CD,
          PROD_CD,
          STORE_CD,
          REG_DT,
          REG_ID,
          MOD_DT,
          MOD_ID
        )
        VALUES
        (
          #{hqOfficeCd},
          #{prodCd},
          #{storeCd},
          #{regDt},
          #{regId},
          #{modDt},
          #{modId}
        )
    </insert>

    <!-- 상품 적용 매장 등록시, 본사의 상품 매장으로 등록 -->
    <!--
        TABLE    : TB_HQ_PRODUCT, TB_MS_PRODUCT
        PARAM    : prodVO
        COMMENTS : 상품 적용 매장 등록시, 본사의 상품 매장으로 등록
    -->
    <insert id="insertProdStoreDetail" parameterType="prodVO">
        /* USE : ProdMapper.insertProdStoreDetail */
        MERGE INTO TB_MS_PRODUCT tmp
        USING ( SELECT
                    #{storeCd} AS STORE_CD,
                    thp.HQ_OFFICE_CD,
                    thp.HQ_BRAND_CD,
                    thp.PROD_CD,
                    thp.PROD_NM,
                    thp.PROD_CLASS_CD,
                    thp.CORNR_CD,
                    thp.ORGPLCE_CD,
                    thp.SDATTR_CLASS_CD,
                    thp.SDSEL_GRP_CD,
                    thp.POINT_SAVE_YN,
                    thp.PROD_DC_FG,
                    thp.VAT_FG,
                    thp.PROD_TIP_YN,
                    thp.PROD_PACK_AMT,
                    thp.PROD_DLVR_AMT,
                    thp.PROD_TYPE_FG,
                    thp.SALE_PROD_YN,
                    thp.STOCK_PROD_YN,
                    thp.SIDE_PROD_YN,
                    thp.SET_PROD_FG,
                    thp.COST_UPRC,
                    thp.LAST_COST_UPRC,
                    thp.SPLY_UPRC,
                    thp.SPLY_UPRC_USE_YN,
                    thp.PO_PROD_FG,
                    thp.PO_UNIT_FG,
                    thp.PO_UNIT_QTY,
                    thp.PO_UNIT_ALLOW_FG,
                    thp.PO_MIN_QTY,
                    thp.SAFE_STOCK_QTY,
                    thp.STOCK_UNIT_FG,
                    thp.USE_YN,
                    thp.REMARK,
                    thp.REG_DT,
                    thp.REG_ID,
                    thp.MOD_DT,
                    thp.MOD_ID,
                    thp.PRC_CTRL_FG,
                    thp.MAP_PROD_CD
               FROM
                   TB_HQ_PRODUCT thp
               WHERE
                   thp.HQ_OFFICE_CD = #{hqOfficeCd}
                   AND thp.PROD_CD = #{prodCd} ) thp
           ON ( tmp.STORE_CD = thp.STORE_CD
            AND tmp.PROD_CD  = thp.PROD_CD )
        WHEN MATCHED THEN
        UPDATE
           SET tmp.PROD_NM             = thp.PROD_NM,
               tmp.HQ_BRAND_CD         = thp.HQ_BRAND_CD,
               tmp.PROD_CLASS_CD       = thp.PROD_CLASS_CD,
               tmp.CORNR_CD            = thp.CORNR_CD,
               tmp.ORGPLCE_CD          = thp.ORGPLCE_CD,
               tmp.SDATTR_CLASS_CD     = thp.SDATTR_CLASS_CD,
               tmp.SDSEL_GRP_CD        = thp.SDSEL_GRP_CD,
               tmp.POINT_SAVE_YN       = thp.POINT_SAVE_YN,
               tmp.PROD_DC_FG          = thp.PROD_DC_FG,
               tmp.VAT_FG              = thp.VAT_FG,
               tmp.PROD_TIP_YN         = thp.PROD_TIP_YN,
               tmp.PROD_PACK_AMT       = thp.PROD_PACK_AMT,
               tmp.PROD_DLVR_AMT       = thp.PROD_DLVR_AMT,
               tmp.PROD_TYPE_FG        = thp.PROD_TYPE_FG,
               tmp.SALE_PROD_YN        = thp.SALE_PROD_YN,
               tmp.STOCK_PROD_YN       = thp.STOCK_PROD_YN,
               tmp.SIDE_PROD_YN        = thp.SIDE_PROD_YN,
               tmp.SET_PROD_FG         = thp.SET_PROD_FG,
--                tmp.PRC_CTRL_FG         = 'H',           -- 가격관리구분 (본사에서 매장으로 내려줌)
               tmp.PRC_CTRL_FG         = thp.PRC_CTRL_FG,  -- 가격관리구분 (본사에서 매장으로 내려줌)
               tmp.COST_UPRC           = thp.COST_UPRC,
               tmp.LAST_COST_UPRC      = thp.LAST_COST_UPRC,
               tmp.SPLY_UPRC           = thp.SPLY_UPRC,
               tmp.SPLY_UPRC_USE_YN    = thp.SPLY_UPRC_USE_YN,
               tmp.PO_PROD_FG          = thp.PO_PROD_FG,
               tmp.PO_UNIT_FG          = thp.PO_UNIT_FG,
               tmp.PO_UNIT_QTY         = thp.PO_UNIT_QTY,
               tmp.PO_UNIT_ALLOW_FG    = thp.PO_UNIT_ALLOW_FG,
               tmp.PO_MIN_QTY          = thp.PO_MIN_QTY,
               tmp.SAFE_STOCK_QTY      = thp.SAFE_STOCK_QTY,
               tmp.STOCK_UNIT_FG       = thp.STOCK_UNIT_FG,
               tmp.USE_YN              = thp.USE_YN,
               tmp.REMARK              = thp.REMARK,
               tmp.MOD_DT              = #{modDt},
               tmp.MOD_ID              = #{modId},
               tmp.MAP_PROD_CD         = thp.MAP_PROD_CD
        WHEN NOT MATCHED THEN
            INSERT
            (
                tmp.STORE_CD,
                tmp.PROD_CD,
                tmp.PROD_NM,
                tmp.HQ_BRAND_CD,
                tmp.PROD_CLASS_CD,
                tmp.CORNR_CD,
                tmp.ORGPLCE_CD,
                tmp.SDATTR_CLASS_CD,
                tmp.SDSEL_GRP_CD,
                tmp.POINT_SAVE_YN,
                tmp.PROD_DC_FG,
                tmp.VAT_FG,
                tmp.PROD_TIP_YN,
                tmp.PROD_PACK_AMT,
                tmp.PROD_DLVR_AMT,
                tmp.PROD_TYPE_FG,
                tmp.SALE_PROD_YN,
                tmp.STOCK_PROD_YN,
                tmp.SIDE_PROD_YN,
                tmp.SET_PROD_FG,
                tmp.PRC_CTRL_FG,
                tmp.COST_UPRC,
                tmp.LAST_COST_UPRC,
                tmp.SPLY_UPRC,
                tmp.SPLY_UPRC_USE_YN,
                tmp.PO_PROD_FG,
                tmp.PO_UNIT_FG,
                tmp.PO_UNIT_QTY,
                tmp.PO_UNIT_ALLOW_FG,
                tmp.PO_MIN_QTY,
                tmp.SAFE_STOCK_QTY,
                tmp.STOCK_UNIT_FG,
                tmp.USE_YN,
                tmp.REMARK,
                tmp.REG_DT,
                tmp.REG_ID,
                tmp.MOD_DT,
                tmp.MOD_ID,
                tmp.REG_FG,
                tmp.MAP_PROD_CD
            )
            VALUES
            (
                thp.STORE_CD,
                thp.PROD_CD,
                thp.PROD_NM,
                thp.HQ_BRAND_CD,
                thp.PROD_CLASS_CD,
                thp.CORNR_CD,
                thp.ORGPLCE_CD,
                thp.SDATTR_CLASS_CD,
                thp.SDSEL_GRP_CD,
                thp.POINT_SAVE_YN,
                thp.PROD_DC_FG,
                thp.VAT_FG,
                thp.PROD_TIP_YN,
                thp.PROD_PACK_AMT,
                thp.PROD_DLVR_AMT,
                thp.PROD_TYPE_FG,
                thp.SALE_PROD_YN,
                thp.STOCK_PROD_YN,
                thp.SIDE_PROD_YN,
                thp.SET_PROD_FG,
--                 'H',          -- 가격관리구분 (본사에서 매장으로 내려줌)
                thp.PRC_CTRL_FG, -- 가격관리구분 (본사에서 매장으로 내려줌)
                thp.COST_UPRC,
                thp.LAST_COST_UPRC,
                thp.SPLY_UPRC,
                thp.SPLY_UPRC_USE_YN,
                thp.PO_PROD_FG,
                thp.PO_UNIT_FG,
                thp.PO_UNIT_QTY,
                thp.PO_UNIT_ALLOW_FG,
                thp.PO_MIN_QTY,
                thp.SAFE_STOCK_QTY,
                thp.STOCK_UNIT_FG,
                thp.USE_YN,
                thp.REMARK,
                #{regDt},
                #{regId},
                #{modDt},
                #{modId},
                'H', --상품등록구분 REG_FG(현재 등록매장수, 매장상품일괄등록 기능은 본사에만 기능있음)
                thp.MAP_PROD_CD
            )
    </insert>

    <!-- 상품판매가 본사통제여부가 본사인 경우, 본사 판매가 등록시 매장 판매가 등록 -->
    <!--
        TABLE    : TB_MS_PRODUCT_SALE_PRICE, TB_MS_PRODUCT_SALE_PRICE_HISTORY
        PARAM    : prodVO
        COMMENTS : 상품판매가 본사통제여부가 본사인 경우, 본사 판매가 등록시 매장 판매가 등록
    -->
    <select id="saveStoreSalePrice" statementType="CALLABLE"  parameterType="prodVO">
        /* USE : ProdMapper.saveStoreSalePrice */
        {
          CALL PKG_HQ_PRODUCT_SALE_PRICE.SP_HQ_PRODUCT_SALE_PRICE_I
          (
            #{hqOfficeCd},
            #{prodCd},
            #{storeCd},
            #{workMode},
            #{result, mode=OUT, jdbcType=VARCHAR}
          )
        }
    </select>

    <!-- 상품 적용 매장 삭제 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_STORE
        PARAM    : prodVO
        COMMENTS : 본사 쿠폰을 적용한 매장을 삭제한다.
    -->
    <delete id="deleteProdStore" parameterType="prodVO">
        /* USE : ProdMapper.deleteProdStore */
        DELETE TB_HQ_PRODUCT_STORE
         WHERE HQ_OFFICE_CD = #{hqOfficeCd}
           AND PROD_CD = #{prodCd}
           AND STORE_CD = #{storeCd}
    </delete>

    <!-- 상품 매장 적용 삭제시, 해당 상품의 USE_YN 값 변경 -->
    <!--
        TABLE    : TB_MS_PRODUCT
        PARAM    : prodVO
        COMMENTS : 상품 매장 적용 삭제시, 해당 상품의 USE_YN 값 변경
    -->
    <update id="deleteProdStoreDetail" parameterType="prodVO">
        /* USE : ProdMapper.deleteProdStoreDetail */
        UPDATE TB_MS_PRODUCT
           SET USE_YN = 'N'
         WHERE STORE_CD = #{storeCd}
           AND PROD_CD = #{prodCd}
    </update>

    <!-- 판매가 히스토리 등록을 위한 COUNT 조회 -->
    <!--
        TABLE    : TB_MS_PRODUCT_SALE_PRICE
        COMMENTS : 판매가 히스토리 등록을 위한 COUNT 조회한다.
    -->
    <select id="getRegistProdCount" parameterType="salePriceVO" resultType="Integer">
        /* USE : ProdMapper.getRegistProdCount */
        SELECT COUNT(SALE_UPRC) AS CNT
          FROM (
                SELECT STORE_CD, PROD_CD, SALE_PRC_FG,
                       MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC
                  FROM TB_MS_PRODUCT_SALE_PRICE
                 WHERE 1 = 1
                <![CDATA[
                   AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                   AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                ]]>
                   AND SALE_PRC_FG = '1'
                 GROUP BY STORE_CD, PROD_CD, SALE_PRC_FG
               )
         WHERE STORE_CD = #{storeCd}
           AND PROD_CD = #{prodCd}
           AND SALE_UPRC = ${saleUprc}
    </select>


    <!-- 매장 상품 판매가 변경 히스토리 등록 -->
    <!--
        TABLE    : TB_MS_PRODUCT_SALE_PRICE_HISTORY
        COMMENTS : 판매가 변경 히스토리를 등록한다.
    -->
    <insert id="updateStoreSaleUprcHistory"  parameterType="prodVO" >
        /* USE : ProdMapper.updateStoreSaleUprcHistory */
        <![CDATA[
        INSERT INTO TB_MS_PRODUCT_SALE_PRICE_HISTORY
        SELECT SQ_MS_PRODUCT_SALE_PRICE_HISTORY.NEXTVAL,
               STORE_CD,
               PROD_CD,
               SALE_PRC_FG,
               START_DATE,
               END_DATE,
               SALE_UPRC,
               #{regDt},
               #{regId},
               STIN_SALE_UPRC,
               DLVR_SALE_UPRC,
               PACK_SALE_UPRC
          FROM TB_MS_PRODUCT_SALE_PRICE
         WHERE STORE_CD = #{storeCd}
           AND PROD_CD = #{prodCd}
           AND SALE_PRC_FG = '1'
           AND START_DATE = #{startDate}
          ]]>
    </insert>

    <!-- 매장 판매가 변경 -->
    <!--
        TABLE    : TB_MS_PRODUCT_SALE_PRICE
        COMMENTS : 매장 판매가를 일괄 변경한다.
    -->
    <insert id="updateStoreSaleUprc"  parameterType="prodVO" >
        /* USE : ProdMapper.updateStoreSaleUprc */
        MERGE INTO TB_MS_PRODUCT_SALE_PRICE tmpsp
        USING DUAL
        ON (
            tmpsp.STORE_CD = #{storeCd}
            AND tmpsp.PROD_CD = #{prodCd}
            AND tmpsp.SALE_PRC_FG = '1'
            AND tmpsp.START_DATE = TO_CHAR(SYSDATE, 'yyyyMMdd')
        )
        WHEN MATCHED THEN
        UPDATE
        SET
            tmpsp.SALE_UPRC = #{saleUprc},
            tmpsp.MOD_DT = #{modDt},
            tmpsp.MOD_ID = #{modId}
        WHEN NOT MATCHED THEN
        INSERT
        (
            STORE_CD,
            PROD_CD,
            SALE_PRC_FG,
            START_DATE,
            END_DATE,
            SALE_UPRC,
            REG_DT,
            REG_ID,
            MOD_DT,
            MOD_ID
        ) VALUES (
            #{storeCd},
            #{prodCd},
            '1',
            #{startDate},
            #{endDate},
            #{saleUprc},
            #{regDt},
            #{regId},
            #{modDt},
            #{modId}
        )
    </insert>

    <!-- 상품코드 중복체크 -->
    <!--
          TABLE    : TB_HQ_PRODUCT, TB_MS_PRODUCT, TB_MS_STORE
          PARAM    : prodVO
          COMMENTS : 상품코드 수동입력 시 중복되는 상품코드가 있는지 체크 (중복체크)
    -->
    <select id="getProdCdCnt" parameterType="prodVO" resultType="Integer">
        /* USE : ProdMapper.getProdCdCnt */
        <!--<choose>
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT COUNT(1) AS CNT
                  FROM TB_HQ_PRODUCT
                  WHERE 1=1
                    AND PROD_CD = #{prodCd}
            </when>
            <when test='orgnFg != null and orgnFg == "S"'>
                SELECT COUNT(1) AS CNT
                  FROM TB_MS_PRODUCT
                 WHERE 1=1
                   AND HQ_OFFICE_CD = #{hqOfficeCd}
                   AND STORE_CD = #{storeCd}
                   AND PROD_CD = #{prodCd}
            </when>
        </choose>-->
        <!--SELECT COUNT(1) AS CNT
        FROM (
                SELECT PROD_CD FROM TB_HQ_PRODUCT
                UNION ALL
                SELECT PROD_CD FROM TB_MS_PRODUCT
              )
        WHERE 1=1
          AND PROD_CD = #{prodCd}-->
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT
                COUNT(1) AS CNT
                FROM (
                SELECT PROD_CD FROM TB_HQ_PRODUCT WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND PROD_CD = #{prodCd}
                UNION ALL
                (
                SELECT
                tmp.PROD_CD
                FROM TB_MS_PRODUCT tmp,
                TB_MS_STORE tms
                WHERE 1=1
                AND tms.HQ_OFFICE_CD = #{hqOfficeCd}
                AND tmp.STORE_CD = tms.STORE_CD
                AND tmp.PROD_CD = #{prodCd}
                )
                )
            </when>
            <!-- 매장 -->
            <when test='orgnFg != null and orgnFg == "S" and hqOfficeCd != "00000"'>
                SELECT
                COUNT(1) AS CNT
                FROM (
                SELECT PROD_CD FROM TB_HQ_PRODUCT WHERE HQ_OFFICE_CD = #{hqOfficeCd} AND PROD_CD = #{prodCd}
                UNION ALL
                SELECT PROD_CD FROM TB_MS_PRODUCT WHERE STORE_CD = #{storeCd} AND PROD_CD = #{prodCd}
                )
            </when>
            <!--  단독매장 -->
            <when test='orgnFg != null and orgnFg == "S" and hqOfficeCd == "00000"'>
                SELECT COUNT(1) AS CNT
                FROM TB_MS_PRODUCT
                WHERE 1=1
                AND STORE_CD = #{storeCd}
                AND PROD_CD = #{prodCd}
            </when>
        </choose>
    </select>

    <!-- 상품 바코드 존재 여부 확인 -->
    <!--
          TABLE    : TB_HQ_PRODUCT_BARCD
          PARAM    : prodVO
          COMMENTS : 상품등록 시, 해당상품의 바코드가 있는지 확인
    -->
    <select id="getProdBarCdCnt" parameterType="prodVO" resultType="Integer">
        /* USE : ProdMapper.getProdBarCdCnt */
         SELECT COUNT(1) AS CNT
           FROM TB_HQ_PRODUCT_BARCD
          WHERE HQ_OFFICE_CD = #{hqOfficeCd}
            AND PROD_CD = #{prodCd}
    </select>

    <!-- 상품 적용 매장 등록시, 본사의 상품의 바코드 매장으로 등록 -->
    <!--
          TABLE    : TB_MS_PRODUCT_BARCD
          PARAM    : prodVO
          COMMENTS : 상품 적용 매장 등록시, 본사의 상품의 바코드 매장으로 등록
    -->
    <insert id="insertProdBarcdStoreDetail" parameterType="prodVO">
        /* USE : ProdMapper.insertProdBarcdStoreDetail */
         MERGE INTO TB_MS_PRODUCT_BARCD tmpb
            USING ( SELECT #{storeCd} AS STORE_CD
                             , HQ_OFFICE_CD
                             , BARCD_CD
                             , BARCD_NM
                             , PROD_CD
                             , UNIT_QTY
                             , REG_DT
                             , REG_ID
                             , MOD_DT
                             , MOD_ID
                       FROM TB_HQ_PRODUCT_BARCD thpb
                      WHERE HQ_OFFICE_CD = #{hqOfficeCd}
                        AND PROD_CD = #{prodCd}
                   ) thpb
                ON ( tmpb.PROD_CD   = thpb.PROD_CD
                     AND tmpb.STORE_CD  = thpb.STORE_CD )
            WHEN MATCHED THEN
                UPDATE
                    SET tmpb.BARCD_CD = thpb.BARCD_CD
                       , tmpb.BARCD_NM = thpb.BARCD_NM
                       , tmpb.UNIT_QTY = thpb.UNIT_QTY
                       , tmpb.MOD_DT = #{modDt}
                       , tmpb.MOD_ID = #{modId}
        WHEN NOT MATCHED THEN
				INSERT (
				            tmpb.STORE_CD
						  , tmpb.PROD_CD
						  , tmpb.BARCD_CD
						  , tmpb.BARCD_NM
						  , tmpb.UNIT_QTY
						  , tmpb.REG_DT
						  , tmpb.REG_ID
						  , tmpb.MOD_DT
						  , tmpb.MOD_ID   )
				 VALUES (
				              thpb.STORE_CD
							, thpb.PROD_CD
							, thpb.BARCD_CD
							, thpb.BARCD_NM
							, thpb.UNIT_QTY
							, #{regDt}
                            , #{regId}
                            , #{modDt}
                            , #{modId}      )
    </insert>

    <!-- 본사/매장 상품 등록시, 본사/매장 상품의 바코드 등록-->
    <!--
          TABLE    : TB_HQ_PRODUCT_BARCD, TB_MS_PRODUCT_BARCD
          PARAM    : prodVO
          COMMENTS : 본사/매장 상품 등록시, 본사/매장 상품의 바코드 등록
    -->
    <insert id="saveProdBarcd" parameterType="prodVO">
        /* USE : ProdMapper.saveProdBarcd */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                MERGE INTO TB_HQ_PRODUCT_BARCD
                USING DUAL ON (
                HQ_OFFICE_CD = #{hqOfficeCd}
                AND PROD_CD = #{prodCd}
                )
                WHEN MATCHED THEN
                UPDATE
                SET BARCD_CD = #{barCd}
                , BARCD_NM = #{prodNm}
                , MOD_DT = #{modDt}
                , MOD_ID = #{modId}
                WHEN NOT MATCHED THEN
                INSERT (
                HQ_OFFICE_CD
                , PROD_CD
                , BARCD_CD
                , BARCD_NM
                , UNIT_QTY
                , REG_DT
                , REG_ID
                , MOD_DT
                , MOD_ID )
                VALUES (
                #{hqOfficeCd}
                , #{prodCd}
                , #{barCd}
                , #{prodNm}
                , '1'
                , #{regDt}
                , #{regId}
                , #{modDt}
                , #{modId} )
            </when>
            <!-- 가맹점 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                MERGE INTO TB_MS_PRODUCT_BARCD
                USING DUAL ON (
                STORE_CD = #{storeCd}
                AND PROD_CD = #{prodCd}
                )
                WHEN MATCHED THEN
                UPDATE
                SET BARCD_CD = #{barCd}
                , BARCD_NM = #{prodNm}
                , MOD_DT = #{modDt}
                , MOD_ID = #{modId}
                WHEN NOT MATCHED THEN
                INSERT (
                STORE_CD
                , PROD_CD
                , BARCD_CD
                , BARCD_NM
                , UNIT_QTY
                , REG_DT
                , REG_ID
                , MOD_DT
                , MOD_ID )
                VALUES (
                #{storeCd}
                , #{prodCd}
                , #{barCd}
                , #{prodNm}
                , '1'
                , #{regDt}
                , #{regId}
                , #{modDt}
                , #{modId} )
            </when>
        </choose>

    </insert>

    <!-- 매장 상품 등록시, 매장 상품의 바코드 등록 프로시저 호출-->
    <!--
          TABLE    : TB_MS_PRODUCT_BARCD
          PARAM    : prodVO
          COMMENTS : 매장 상품 등록시, 매장 상품의 바코드 등록한다.
    -->
    <select  id="saveProdBarcdStore" statementType="CALLABLE" parameterType="prodVO" resultType="String">
        /* USE : ProdMapper.saveProdBarcdStore */
        {
            CALL PKG_HQ_PRODUCT_BARCD.SP_HQ_PRODUCT_BARCD_I
            (
                #{hqOfficeCd},
                #{prodCd},
                #{storeCd},
                #{workMode},
                #{result, mode=OUT, jdbcType=VARCHAR}
            )
        }
    </select>

    <!-- 본사상품 매장 등록 시, 해당 상품을 사용하는 매장에도  사이드 그룹 추가 프로시저 호출-->
    <!--
          TABLE    : TB_HQ_PRODUCT_SDSEL_GROUP, TB_MS_PRODUCT_SDSEL_GROUP
          PARAM    : prodVO
          COMMENTS : 본사상품 매장 등록 시, 해당 상품을 사용하는 매장에도  사이드 그룹 추가(본사 사이드 그룹 >> 매장 사이드 그룹)
    -->
    <select  id="insertSdselGrpToStore" statementType="CALLABLE" parameterType="prodVO" resultType="String">
        /* USE : ProdMapper.insertSdselGrpToStore */
        {
            CALL PKG_HQ_PRODUCT_SDSEL_GROUP.SP_HQ_PRODUCT_SDSEL_GROUP_I02
            (
                #{hqOfficeCd},
                #{sdselGrpCd},
                #{prodCd},
                #{regId},
                #{result, mode=OUT, jdbcType=VARCHAR}
            )
        }
    </select>

    <!-- 본사상품 매장 등록 시, 해당 상품을 사용하는 매장에도  사이드 분류 추가 프로시저 호출-->
    <!--
          TABLE    : TB_HQ_PRODUCT_SDSEL_CLASS, TB_MS_PRODUCT_SDSEL_CLASS
          PARAM    : prodVO
          COMMENTS : 본사상품 매장 등록 시, 해당 상품을 사용하는 매장에도  사이드 분류 추가(본사 사이드 분류 >> 매장 사이드 분류)
    -->
    <select  id="insertSdselClassToStore" statementType="CALLABLE" parameterType="prodVO" resultType="String">
        /* USE : ProdMapper.insertSdselClassToStore */
        {
            CALL PKG_HQ_PRODUCT_SDSEL_CLASS.SP_HQ_PRODUCT_SDSEL_CLASS_I02
            (
                #{hqOfficeCd},
                #{sdselGrpCd},
                #{prodCd},
                #{regId},
                #{result, mode=OUT, jdbcType=VARCHAR}
            )
        }
    </select>

    <!-- 본사상품 매장 등록 시, 해당 상품을 사용하는 매장에도  사이드 선택상품 추가 프로시저 호출-->
    <!--
          TABLE    : TB_HQ_PRODUCT_SDSEL_PROD, TB_MS_PRODUCT_SDSEL_PROD
          PARAM    : prodVO
          COMMENTS : 본사상품 매장 등록 시, 해당 상품을 사용하는 매장에도  사이드 선택상품 추가(본사 사이드 선택상품 >> 매장 사이드 선택상품)
    -->
    <select  id="insertSdselProdToStore" statementType="CALLABLE" parameterType="prodVO" resultType="String">
        /* USE : ProdMapper.insertSdselProdToStore */
        {
            CALL PKG_HQ_PRODUCT_SDSEL_PROD.SP_HQ_PRODUCT_SDSEL_PROD_I02
            (
                #{hqOfficeCd},
                #{sdselGrpCd},
                #{prodCd},
                #{regId},
                #{result, mode=OUT, jdbcType=VARCHAR}
            )
        }
    </select>

    <!-- 매장 적용 상품 조회 -->
    <!--
        TABLE    : TB_MS_PRODUCT, TB_HQ_PRODUCT_STORE
        PARAM    : prodVO
        COMMENTS : 매장 적용 대상인 상품을 조회한다.
    -->
    <select id="getStoreProdRegList" parameterType="prodVO" resultType="DefaultMap">
        /* USE : ProdMapper.getStoreProdRegList */
        SELECT  tmp.STORE_CD,
        tmp.PROD_CD,
        tmp.PROD_NM,
        NVL2(thps.PROD_CD, 'Y', 'N') AS REG_YN,
        thps.PROD_CD,
        thpsp.SALE_UPRC AS HQ_SALE_UPRC,
        tmpsp.SALE_UPRC AS STORE_SALE_UPRC,
        CASE WHEN tmpsp.SALE_UPRC IS NULL THEN thpsp.SALE_UPRC
        ELSE tmpsp.SALE_UPRC END AS SALE_UPRC, -- 미등록매장은 매장판매가 우선, 없으면 본사판매가
        CASE WHEN tmpsp.SALE_UPRC IS NULL THEN thpsp.SALE_UPRC
        ELSE tmpsp.SALE_UPRC END AS SALE_UPRC_B,
        tmp.PRC_CTRL_FG
        FROM TB_MS_PRODUCT tmp,
        (
        SELECT STORE_CD, PROD_CD
        FROM TB_HQ_PRODUCT_STORE
        WHERE HQ_OFFICE_CD = #{hqOfficeCd}
        AND STORE_CD = #{storeCd}
        ) thps,
        (
        SELECT thp.HQ_OFFICE_CD ,
        thp.PROD_CD,
        thpsp.SALE_UPRC
        FROM TB_HQ_PRODUCT thp,
        (
        SELECT HQ_OFFICE_CD,
        PROD_CD,
        MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC
        FROM TB_HQ_PRODUCT_SALE_PRICE
        WHERE 1=1
        <![CDATA[
            AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
            AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
          ]]>
        AND SALE_PRC_FG = '1'
        AND HQ_OFFICE_CD = #{hqOfficeCd}
        GROUP BY HQ_OFFICE_CD, PROD_CD
        ) thpsp
        WHERE 1=1
        AND thp.HQ_OFFICE_CD = #{hqOfficeCd}
        AND thpsp.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
        AND thpsp.PROD_CD = thp.PROD_CD
        ) thpsp,
        (
        SELECT thp.HQ_OFFICE_CD ,
        tmpsp.STORE_CD,
        thp.PROD_CD,
        tmpsp.SALE_UPRC
        FROM TB_HQ_PRODUCT thp,
        (
        SELECT STORE_CD,
        PROD_CD,
        MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC
        FROM TB_MS_PRODUCT_SALE_PRICE
        WHERE 1=1
        <![CDATA[
                                       AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                                       AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                                     ]]>
        AND SALE_PRC_FG = '1'
        AND STORE_CD = #{storeCd}
        GROUP BY STORE_CD, PROD_CD
        ) tmpsp
        WHERE 1=1
        AND thp.HQ_OFFICE_CD = #{hqOfficeCd}
        AND tmpsp.STORE_CD = #{storeCd}
        AND tmpsp.STORE_CD IN (SELECT store_cd FROM TB_MS_STORE  WHERE HQ_OFFICE_CD = thp.HQ_OFFICE_CD)
        AND tmpsp.PROD_CD = thp.PROD_CD
        ) tmpsp
        WHERE thps.STORE_CD (+)= tmp.STORE_CD
        AND thps.PROD_CD (+)= tmp.PROD_CD
        AND tmp.STORE_CD = #{storeCd}
        --AND tmp.USE_YN = 'Y'
        AND thpsp.PROD_CD (+)= tmp.PROD_CD
        AND tmpsp.STORE_CD (+)= tmp.STORE_CD
        AND tmpsp.PROD_CD (+)= tmp.PROD_CD
        <if test='prodCd != null and prodCd.toString() != ""'>
            AND tmp.PROD_CD LIKE '%'||#{prodCd}||'%'
        </if>
        <if test='prodNm != null and prodNm.toString() != ""'>
            AND tmp.PROD_NM LIKE '%'||#{prodNm}||'%'
        </if>
        AND thps.PROD_CD IS NOT NULL
        ORDER BY tmp.PROD_CD ASC
    </select>

    <!-- 매장 미적용 상품 조회 -->
    <!--
        TABLE    : TB_MS_PRODUCT, TB_HQ_PRODUCT_STORE
        PARAM    : prodVO
        COMMENTS : 매장 미적용 대상인 상품을 조회한다.
    -->
    <select id="getStoreProdNoRegList" parameterType="prodVO" resultType="DefaultMap">
        /* USE : ProdMapper.getStoreProdNoRegList */
        SELECT thp.PROD_CD,
        thp.PROD_NM,
        thpsp.SALE_UPRC AS HQ_SALE_UPRC,
        tmpsp.SALE_UPRC AS STORE_SALE_UPRC,
        CASE WHEN tmpsp.SALE_UPRC IS NULL THEN thpsp.SALE_UPRC
        ELSE tmpsp.SALE_UPRC END AS SALE_UPRC, -- 미등록매장은 매장판매가 우선, 없으면 본사판매가
        CASE WHEN tmpsp.SALE_UPRC IS NULL THEN thpsp.SALE_UPRC
        ELSE tmpsp.SALE_UPRC END AS SALE_UPRC_B
        FROM TB_HQ_PRODUCT thp,
        (
        SELECT thp.HQ_OFFICE_CD ,
        thp.PROD_CD,
        thpsp.SALE_UPRC
        FROM TB_HQ_PRODUCT thp,
        (
        SELECT HQ_OFFICE_CD,
        PROD_CD,
        MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC
        FROM TB_HQ_PRODUCT_SALE_PRICE
        WHERE 1=1
        <![CDATA[
                                       AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                                       AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                                     ]]>
        AND SALE_PRC_FG = '1'
        AND HQ_OFFICE_CD = #{hqOfficeCd}
        GROUP BY HQ_OFFICE_CD, PROD_CD
        ) thpsp
        WHERE 1=1
        AND thp.HQ_OFFICE_CD = #{hqOfficeCd}
        AND thpsp.HQ_OFFICE_CD = thp.HQ_OFFICE_CD
        AND thpsp.PROD_CD = thp.PROD_CD
        ) thpsp,
        (
        SELECT thp.HQ_OFFICE_CD ,
        tmpsp.STORE_CD,
        thp.PROD_CD,
        tmpsp.SALE_UPRC
        FROM TB_HQ_PRODUCT thp,
        (
        SELECT STORE_CD,
        PROD_CD,
        MIN(SALE_UPRC) KEEP( DENSE_RANK FIRST ORDER BY START_DATE DESC ) AS SALE_UPRC
        FROM TB_MS_PRODUCT_SALE_PRICE
        WHERE 1=1
        <![CDATA[
                                   AND START_DATE <= TO_CHAR(SYSDATE, 'yyyyMMdd')
                                   AND END_DATE >= TO_CHAR(SYSDATE, 'yyyyMMdd')
                                ]]>
        AND SALE_PRC_FG = '1'
        AND STORE_CD = #{storeCd}
        GROUP BY STORE_CD, PROD_CD
        ) tmpsp
        WHERE 1=1
        AND thp.HQ_OFFICE_CD = #{hqOfficeCd}
        AND tmpsp.STORE_CD = #{storeCd}
        AND tmpsp.STORE_CD IN (SELECT store_cd FROM TB_MS_STORE  WHERE HQ_OFFICE_CD = thp.HQ_OFFICE_CD)
        AND tmpsp.PROD_CD = thp.PROD_CD
        ) tmpsp
        WHERE thp.HQ_OFFICE_CD = #{hqOfficeCd}
        --AND thp.USE_YN = 'Y'
        AND thpsp.HQ_OFFICE_CD (+)= thp.HQ_OFFICE_CD
        AND thpsp.PROD_CD (+) = thp.PROD_CD
        AND tmpsp.HQ_OFFICE_CD (+)= thp.HQ_OFFICE_CD
        AND tmpsp.PROD_CD (+)= thp.PROD_CD
        AND thp.PROD_CD NOT IN (
        SELECT tmp.PROD_CD
        FROM TB_MS_PRODUCT tmp,
        (  SELECT STORE_CD,
        PROD_CD
        FROM TB_HQ_PRODUCT_STORE
        WHERE HQ_OFFICE_CD = #{hqOfficeCd}
        AND STORE_CD = #{storeCd} ) thps
        WHERE thps.STORE_CD (+)= tmp.STORE_CD
        AND thps.PROD_CD (+)= tmp.PROD_CD
        AND tmp.STORE_CD = #{storeCd}
        --AND tmp.USE_YN = 'Y'
        AND thps.PROD_CD IS NOT NULL
        )
        <if test='prodCd != null and prodCd.toString() != ""'>
            AND thp.PROD_CD LIKE '%'||#{prodCd}||'%'
        </if>
        <if test='prodNm != null and prodNm.toString() != ""'>
            AND thp.PROD_NM LIKE '%'||#{prodNm}||'%'
        </if>
        ORDER BY thp.PROD_CD ASC
    </select>

    <!-- 본사상품 매장 등록 시, 본사에 포함되는 모든 매장에 상품분류 추가(본사 상품분류 > 매장 상품분류)-->
    <!--
          TABLE    : TB_HQ_PRODUCT_CLASS, TB_MS_PRODUCT_CLASS
          PARAM    : prodVO
          COMMENTS : 본사상품 매장 등록 시, 본사에 포함되는 모든 매장에 상품분류 추가(본사 상품분류 > 매장 상품분류)
    -->
    <select  id="insertClsHqToStore" statementType="CALLABLE" parameterType="prodVO" resultType="String">
        /* USE : ProdMapper.insertClsHqToStore */
        {
            CALL PKG_HQ_PRODUCT_CLASS.SP_HQ_PRODUCT_CLASS_I02
            (
                #{hqOfficeCd},
                #{prodClassCd},
                #{regId},
                #{result, mode=OUT, jdbcType=VARCHAR}
            )
        }
    </select>

    <!-- 본사상품 매장 등록 시, 해당 상품을 사용하는 매장에도 상품분류 추가 or 수정(본사 상품분류 > 매장 상품분류)-->
    <!--
          TABLE    : TB_HQ_PRODUCT_CLASS, TB_MS_PRODUCT_CLASS
          PARAM    : prodVO
          COMMENTS : 본사상품 매장 등록 시, 해당 상품을 사용하는 매장에도 상품분류 추가 or 수정(본사 상품분류 > 매장 상품분류)
    -->
    <select  id="updateClsHqToStore" statementType="CALLABLE" parameterType="prodVO" resultType="String">
        /* USE : ProdMapper.updateClsHqToStore */
        {
            CALL PKG_HQ_PRODUCT_CLASS.SP_HQ_PRODUCT_CLASS_U02
            (
                #{hqOfficeCd},
                #{storeCd},
                #{prodCd},
                #{prodClassCd},
                #{workMode},
                #{regId},
                #{result, mode=OUT, jdbcType=VARCHAR}
            )
        }
    </select>

    <!-- 상품 이미지 저장시 파일여부 체크 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_IMAGE, TB_MS_PRODUCT_IMAGE
        COMMENTS : [본사]상품 이미지, [매장]상품 이미지
    -->
    <select id="getProdImageFileSaveCheck"  parameterType="prodVO" resultType="String">
        /* ProdMapper.getProdImageFileSaveCheck */
        <choose>
            <when test='orgnFg != null and orgnFg != ""'>
                <!-- 본사 -->
                <if test='orgnFg == "HQ"'>
                    SELECT COUNT(*)
                    FROM TB_HQ_PRODUCT_IMAGE thpi
                    WHERE 1=1
                    AND thpi.HQ_OFFICE_CD = #{hqOfficeCd}
                    AND thpi.PROD_CD = #{prodCd}
                    AND thpi.IMG_FG = '001'
                </if>
                <!-- 매장 -->
                <if test='orgnFg == "STORE"'>
                    SELECT COUNT(*)
                    FROM TB_MS_PRODUCT_IMAGE tmpi
                    WHERE 1=1
                    AND tmpi.STORE_CD = #{storeCd}
                    AND tmpi.PROD_CD = #{prodCd}
                    AND tmpi.IMG_FG = '001'
                </if>
            </when>
        </choose>
    </select>

    <!-- 상품 신규등록,수정 팝업 - 상품 이미지 저장 insert -->
    <!--
        TABLE    : TB_HQ_PRODUCT_IMAGE, TB_MS_PRODUCT_IMAGE
        COMMENTS : [본사]상품 이미지, [매장]상품 이미지
    -->
    <insert id="getProdImageFileSaveInsert" parameterType="prodVO">
        /* ProdMapper.getProdImageFileSaveInsert */
        <choose>
            <when test='orgnFg != null and orgnFg != ""'>
                <!-- 본사 -->
                <if test='orgnFg == "HQ"'>
                    INSERT INTO TB_HQ_PRODUCT_IMAGE
                    (
                    HQ_OFFICE_CD,
                    PROD_CD,
                    IMG_FG,
                    IMG_URL,
                    IMG_FILE_NM,
                    IMG_CHG_DT,
                    REMARK,
                    REG_DT,
                    REG_ID,
                    MOD_DT,
                    MOD_ID
                    ) VALUES (
                    #{hqOfficeCd},
                    #{prodCd},
                    '001', --001: 기본이미지, 002: KIOSK이미지, 003: DID이미지
                    #{filePath},
                    #{fileNm} ||'.'|| #{fileExt},
                    #{modDt},
                    '',
                    #{regDt},
                    #{regId},
                    #{modDt},
                    #{modId}
                    )
                </if>
                <!-- 매장 -->
                <if test='orgnFg == "STORE"'>
                    INSERT INTO TB_MS_PRODUCT_IMAGE
                    (
                    STORE_CD,
                    PROD_CD,
                    IMG_FG,
                    IMG_URL,
                    IMG_FILE_NM,
                    IMG_CHG_DT,
                    REMARK,
                    REG_DT,
                    REG_ID,
                    MOD_DT,
                    MOD_ID
                    ) VALUES (
                    #{storeCd},
                    #{prodCd},
                    '001', --001: 기본이미지, 002: KIOSK이미지, 003: DID이미지
                    #{filePath},
                    #{fileNm} ||'.'|| #{fileExt},
                    #{modDt},
                    '',
                    #{regDt},
                    #{regId},
                    #{modDt},
                    #{modId}
                    )
                </if>
            </when>
        </choose>
    </insert>

    <!-- 상품 신규등록,수정 팝업 - 상품 이미지 저장 update -->
    <!--
        TABLE    : TB_HQ_PRODUCT_IMAGE, TB_MS_PRODUCT_IMAGE
        COMMENTS : [본사]상품 이미지, [매장]상품 이미지
    -->
    <update id="getProdImageFileSaveUpdate" parameterType="prodVO">
        /* ProdMapper.getProdImageFileSaveUpdate */
        <choose>
            <when test='orgnFg != null and orgnFg != ""'>
                <!-- 본사 -->
                <if test='orgnFg == "HQ"'>
                    UPDATE
                    TB_HQ_PRODUCT_IMAGE
                    SET
                    IMG_URL = #{filePath},
                    IMG_FILE_NM = #{fileNm} ||'.'|| #{fileExt},
                    IMG_CHG_DT = #{modDt},
                    MOD_DT = #{modDt},
                    MOD_ID = #{modId}
                    WHERE 1=1
                    AND HQ_OFFICE_CD = #{hqOfficeCd}
                    AND PROD_CD = #{prodCd}
                    AND IMG_FG = '001'
                </if>
                <!-- 매장 -->
                <if test='orgnFg == "STORE"'>
                    UPDATE
                    TB_MS_PRODUCT_IMAGE
                    SET
                    IMG_URL = #{filePath},
                    IMG_FILE_NM = #{fileNm} ||'.'|| #{fileExt},
                    IMG_CHG_DT = #{modDt},
                    MOD_DT = #{modDt},
                    MOD_ID = #{modId}
                    WHERE 1=1
                    AND STORE_CD = #{storeCd}
                    AND PROD_CD = #{prodCd}
                    AND IMG_FG = '001'
                </if>
            </when>
        </choose>
    </update>

    <!-- 상품 신규등록,수정 팝업 - 상품 이미지 저장 delete -->
    <!--
        TABLE    : TB_HQ_PRODUCT_IMAGE, TB_MS_PRODUCT_IMAGE
        COMMENTS : [본사]상품 이미지, [매장]상품 이미지
    -->
    <delete id="getProdImageFileSaveDelete" parameterType="prodVO">
        /* ProdMapper.getProdImageFileSaveDelete */
        <choose>
            <when test='orgnFg != null and orgnFg != ""'>
                <!-- 본사 -->
                <if test='orgnFg == "HQ"'>
                    DELETE
                    TB_HQ_PRODUCT_IMAGE
                    WHERE 1=1
                    AND HQ_OFFICE_CD = #{hqOfficeCd}
                    AND PROD_CD = #{prodCd}
                    AND IMG_FG = '001'
                </if>
                <!-- 매장 -->
                <if test='orgnFg == "STORE"'>
                    DELETE
                    TB_MS_PRODUCT_IMAGE
                    WHERE 1=1
                    AND STORE_CD = #{storeCd}
                    AND PROD_CD = #{prodCd}
                    AND IMG_FG = '001'
                </if>
            </when>
        </choose>
    </delete>

    <!-- 상품 이미지 삭제시 파일명 가져오기 -->
    <!--
        TABLE    : TB_HQ_PRODUCT_IMAGE, TB_MS_PRODUCT_IMAGE
        COMMENTS : [본사]상품 이미지, [매장]상품 이미지
    -->
    <select id="getProdImageFileSaveImgFileNm"  parameterType="prodVO" resultType="String">
        /* ProdMapper.getProdImageFileSaveImgFileNm */
        <choose>
            <when test='orgnFg != null and orgnFg != ""'>
                <!-- 본사 -->
                <if test='orgnFg == "HQ"'>
                    SELECT
                    SUBSTR(thpi.IMG_URL, INSTR(thpi.IMG_URL, '\prod_img')) || thpi.IMG_FILE_NM AS PATH_FULL
                    --                     SUBSTR(thpi.IMG_URL, INSTR(thpi.IMG_URL, '\A0001')) || thpi.IMG_FILE_NM AS PATH_FULL --로컬 테스트시
                    FROM TB_HQ_PRODUCT_IMAGE thpi
                    WHERE 1=1
                    AND thpi.HQ_OFFICE_CD = #{hqOfficeCd}
                    AND thpi.PROD_CD = #{prodCd}
                    AND thpi.IMG_FG = '001'
                </if>
                <!-- 매장 -->
                <if test='orgnFg == "STORE"'>
                    SELECT
                    SUBSTR(tmpi.IMG_URL, INSTR(tmpi.IMG_URL, '\prod_img')) || tmpi.IMG_FILE_NM AS PATH_FULL
                    --                     SUBSTR(tmpi.IMG_URL, INSTR(tmpi.IMG_URL, '\S000002')) || tmpi.IMG_FILE_NM AS PATH_FULL --로컬 테스트시
                    FROM TB_MS_PRODUCT_IMAGE tmpi
                    WHERE 1=1
                    AND tmpi.STORE_CD = #{storeCd}
                    AND tmpi.PROD_CD = #{prodCd}
                    AND tmpi.IMG_FG = '001'
                </if>
            </when>
        </choose>
    </select>

    <!-- 미적용 상품 거래처 조회 팝업 - 조회 -->
    <!--
        TABLE    : TB_HQ_VENDOR_PROD, TB_HQ_VENDOR, TB_MS_VENDOR_PROD, TB_MS_VENDOR
        COMMENTS : [본사]거래처별_취급상품, [본사]상품_거래처, [매장]거래처별_취급상품, [매장]상품_거래처
    -->
    <select id="getSearchNoProdVendrList" parameterType="prodVO" resultType="DefaultMap">
        /* ProdMapper.getSearchNoProdVendrList */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                SELECT
                thv.VENDR_CD,
                thv.VENDR_NM
                FROM TB_HQ_VENDOR thv
                WHERE 1=1
                AND thv.HQ_OFFICE_CD = #{hqOfficeCd}
                <if test='chkVendrCd != null and chkVendrCd != ""'>
                    AND thv.VENDR_CD NOT IN
                    <foreach collection="vendrCdList" item="item" open="("  separator="," close=")" >
                        #{item}
                    </foreach>
                </if>
                ORDER BY thv.VENDR_CD
            </when>
            <!-- 매장 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                SELECT
                tmv.VENDR_CD,
                tmv.VENDR_NM
                FROM TB_MS_VENDOR tmv
                WHERE 1=1
                AND tmv.STORE_CD = #{storeCd}
                <if test='chkVendrCd != null and chkVendrCd != ""'>
                    AND tmv.VENDR_CD NOT IN
                    <foreach collection="vendrCdList" item="item" open="("  separator="," close=")" >
                        #{item}
                    </foreach>
                </if>
                ORDER BY tmv.VENDR_CD
            </when>
        </choose>
    </select>

    <!-- 거래처 삭제 -->
    <!--
        TABLE    : TB_HQ_VENDOR_PROD, TB_MS_VENDOR_PROD
        COMMENTS : [본사]상품_거래처별_취급상품, [매장]상품_거래처별_취급상품
    -->
    <delete id="getVendorProdSaveUpdate" parameterType="prodVO">
        /* ProdMapper.getVendorProdSaveUpdate */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                UPDATE
                TB_HQ_VENDOR_PROD
                SET
                USE_YN = 'N',
                MOD_DT = #{modDt},
                MOD_ID = #{modId}
                WHERE 1=1
                AND HQ_OFFICE_CD = #{hqOfficeCd}
                AND PROD_CD = #{prodCd}
            </when>
            <!-- 매장 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                UPDATE
                TB_MS_VENDOR_PROD
                SET
                USE_YN = 'N',
                MOD_DT = #{modDt},
                MOD_ID = #{modId}
                WHERE 1=1
                AND STORE_CD = #{storeCd}
                AND PROD_CD = #{prodCd}
            </when>
        </choose>
    </delete>

    <!-- 거래처 저장 -->
    <!--
        TABLE    : TB_HQ_VENDOR_PROD, TB_MS_VENDOR_PROD
        COMMENTS : [본사]상품_거래처별_취급상품, [매장]상품_거래처별_취급상품
    -->
    <insert id="getVendorProdSaveInsert" parameterType="prodVO">
        /* ProdMapper.getVendorProdSaveInsert */
        <choose>
            <!-- 본사 -->
            <when test='orgnFg != null and orgnFg == "H"'>
                MERGE INTO TB_HQ_VENDOR_PROD thvp
                USING DUAL
                ON (thvp.HQ_OFFICE_CD = #{hqOfficeCd} AND thvp.VENDR_CD = #{vendrCd} AND thvp.PROD_CD = #{prodCd})
                WHEN MATCHED THEN
                UPDATE
                SET
                thvp.SPLY_UPRC = #{splyUprc},
                thvp.USE_YN = 'Y',
                thvp.MOD_DT = #{modDt},
                thvp.MOD_ID = #{modId}
                WHEN NOT MATCHED THEN
                INSERT
                (
                HQ_OFFICE_CD,
                HQ_BRAND_CD,
                VENDR_CD,
                PROD_CD,
                SPLY_UPRC,
                USE_YN,
                REG_DT,
                REG_ID,
                MOD_DT,
                MOD_ID
                ) VALUES (
                #{hqOfficeCd},
                '0000000', --HQ_BRAND_CD
                #{vendrCd},
                #{prodCd},
                #{splyUprc},
                'Y',
                #{regDt},
                #{regId},
                #{modDt},
                #{modId}
                )
            </when>
            <!-- 매장 -->
            <when test='orgnFg != null and orgnFg == "S"'>
                MERGE INTO TB_MS_VENDOR_PROD tmvp
                USING DUAL
                ON (tmvp.STORE_CD = #{storeCd} AND tmvp.VENDR_CD = #{vendrCd} AND tmvp.PROD_CD = #{prodCd})
                WHEN MATCHED THEN
                UPDATE
                SET
                tmvp.SPLY_UPRC = #{splyUprc},
                tmvp.USE_YN = 'Y',
                tmvp.MOD_DT = #{modDt},
                tmvp.MOD_ID = #{modId}
                WHEN NOT MATCHED THEN
                INSERT
                (
                STORE_CD,
                VENDR_CD,
                PROD_CD,
                SPLY_UPRC,
                USE_YN,
                REG_DT,
                REG_ID,
                MOD_DT,
                MOD_ID
                ) VALUES (
                #{storeCd},
                #{vendrCd},
                #{prodCd},
                #{splyUprc},
                'Y',
                #{regDt},
                #{regId},
                #{modDt},
                #{modId}
                )
            </when>
        </choose>
    </insert>

</mapper>